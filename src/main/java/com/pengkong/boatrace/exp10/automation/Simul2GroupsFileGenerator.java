package com.pengkong.boatrace.exp10.automation;

import java.io.File;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.pengkong.boatrace.common.BoatConst;
import com.pengkong.boatrace.common.enums.Delimeter;
import com.pengkong.boatrace.exp10.property.MLPropertyUtil;
import com.pengkong.boatrace.exp10.property.SqlTemplate;
import com.pengkong.boatrace.exp10.simulation.evaluation.Evaluation;
import com.pengkong.boatrace.exp10.util.EvaluationHelper;
import com.pengkong.boatrace.mybatis.client.CustomMapper;
import com.pengkong.boatrace.server.db.dto.DBRecord;
import com.pengkong.boatrace.util.DatabaseUtil;
import com.pengkong.common.FileUtil;
import com.pengkong.common.PropertyUtil;
import com.pengkong.common.StringUtil;

@Deprecated
public class Simul2GroupsFileGenerator {
	Logger logger = LoggerFactory.getLogger(Simul2GroupsFileGenerator.class);

	MLPropertyUtil prop = MLPropertyUtil.getInstance();

	/** sql template */
	SqlTemplate sqlTpl = SqlTemplate.getInstance();

	String sql;
	
	public void execute(List<String> exNos) throws Exception {
		HashMap<String, String> mapExNo = new HashMap<>();
		for (String exNo : exNos) {
			mapExNo.put(exNo, exNo);
		}
		
		prop.reset("file_simul_config_step1");
		while(prop.hasNext()) {
			prop.next();
			String exNo = prop.getString("result_no");
			if (!mapExNo.containsKey(exNo)) 
				continue;
			// 実験実行
			executeExperiment(exNo);
		}
	}
	
	public void executeExperiment(String exNo) throws Exception {
		String dir = prop.getString("dir_groups_step1");
		String fileKey = String.join("_", StringUtil.leftPad(exNo, BoatConst.LEFT_PAD6, "0"), 
				prop.getString("bettype") + "-" + prop.getString("kumiban") + "_" + prop.getString("grade_type"));
		
		List<DBRecord> results = loadDB();
		if (results.size() <= 0) {
			FileUtil.writeFile(dir + fileKey + ".tsv.nodata", "");
			logger.warn(fileKey + " has no data.");

			return;
		}
		
		// 内容作成
		String content = createContent(exNo, results, fileKey);
		
		// save file
		FileUtil.writeFile(dir + fileKey + ".tsv", content);
		
		int sumOfBet = 0;
		for (DBRecord rec : results) {
			sumOfBet += rec.getInt("betcnt");
		}
		logger.info(fileKey + " has been created. ptncnt=" + results.size() + ", betcnt=" + sumOfBet);
		
		// log出力
		//FileUtil.appendFileByLine(prop.getString("dir_simulation_log") + "group_generation.log", content + "\n");
	}
	
	void print(File file) throws Exception {
		List<Evaluation> evaluations = EvaluationHelper.readFile(file);
		EvaluationHelper.printTitle();
		for (Evaluation eval : evaluations) {
			EvaluationHelper.print(eval);
		}
	}
	
	String createContent(String exNo, List<DBRecord> results, String fileKey) {
		StringBuilder sb = new StringBuilder();
		
		// comment section
		sb.append("COMMENT_BEGIN " + fileKey); sb.append("\n");
		sb.append("generated by Simul2GroupFileGenerator."); sb.append("\n");
		sb.append(sql); sb.append("\n\n");
		sb.append("COMMENT_END"); sb.append("\n");
		// group bonus 定義 
		sb.append("RANGE_SELECTOR:x"); sb.append("\n");
		sb.append("BONUS_PR:" + prop.getString("bonus_pr")); sb.append("\n");
		sb.append("BONUS_BOR:" + prop.getString("bonus_bor")); sb.append("\n");
		sb.append("BONUS_BORK:" + prop.getString("bonus_bork")); sb.append("\n");
		sb.append("BONUS_BORKBOR:x"); sb.append("\n");
		
		String factor = prop.getString("factor");
		String titles = String.join("\t", 
				"sel", "grades", "bettype", "kumiban", "resultno", "modelno", "patternid", "pattern",
				factor, "incamt", "betcnt", "bal_pluscnt",
				"range_selector", "bonus_pr", "bonus_bor", "bonus_bork", "bonus_borkbor" 
				);		
		sb.append(titles); sb.append("\n");
		
		// data section
		for (DBRecord rec : results) {
			sb.append(rec.getString("sel")); sb.append("\t");
			sb.append(rec.getString("grades")); sb.append("\t");
			sb.append(rec.getString("bettype")); sb.append("\t");
			sb.append(rec.getString("kumiban")); sb.append("\t");
			sb.append(rec.getString("resultno")); sb.append("\t");
			sb.append(rec.getString("modelno")); sb.append("\t");
			sb.append(rec.getString("patternid")); sb.append("\t");
			sb.append(rec.getString("pattern")); sb.append("\t");
			
			sb.append(rec.getInteger(factor)); sb.append("\t");
			sb.append(rec.getInteger("incamt")); sb.append("\t");
			sb.append(rec.getInteger("betcnt")); sb.append("\t");
			sb.append(rec.getInteger("bal_pluscnt")); sb.append("\t");
			
			sb.append(rec.getString("range_selector")); sb.append("\t");
			sb.append(rec.getString("bonus_pr")); sb.append("\t");
			sb.append(rec.getString("bonus_bor")); sb.append("\t");
			sb.append(rec.getString("bonus_bork")); sb.append("\t");
			sb.append(rec.getString("bonus_borkbor")); sb.append("\n");
		}
		
		return sb.toString();
	}

	
	/**
	 * group
	 * 
	 * @throws Exception
	 */
	List<DBRecord> loadDB() throws Exception {
		SqlSession session = DatabaseUtil.open(prop.getString("target_db_resource"), false);
		CustomMapper customMapper = session.getMapper(CustomMapper.class);

		sql = sqlTpl.get(prop.getString("group_sql_id"));

		// ex) term_833_1=20180601~20220131
		String[] tokenTerm = prop.getString("term_" + prop.getString("term")).split(Delimeter.WAVE.getValue());
		sql = sql.replace("{fromYmd}", tokenTerm[0]);
		sql = sql.replace("{toYmd}", tokenTerm[1]);

		sql = sql.replace("{bettype}", prop.getString("bettype"));
		sql = sql.replace("{kumiban}", prop.getString("kumiban"));
		sql = sql.replace("{factor}", prop.getString("factor"));
		sql = sql.replace("{limit}", prop.getString("limit"));

		if (prop.getString("grade_type").equals("ip")) {
			sql = sql.replace("{result_type}", "1");
		} else {
			sql = sql.replace("{result_type}", "11");
		}

		// "83,94" -> "99083,99094"
		String[] modelsToken = prop.getString("models").split(Delimeter.COMMA.getValue());
		String models = convertModelInClause(modelsToken);
		// "99083,99094" -> "'99083','99094'"
		models = StringUtil.quote(models.split(Delimeter.COMMA.getValue()));
		
		sql = sql.replace("{models}", models);

		HashMap<String, String> mapParam = new HashMap<>();
		mapParam.put("sql", sql);

		// 디비 데이터 일람 취득
		List<DBRecord> results = customMapper.selectSql(mapParam);
		if (results.size() <= 0) {
			throw new Exception("db has no data. sql=" + sql);
		}

		DatabaseUtil.close(session);
		
		return results;
	}

	/** ex) ["83,94"] -> "99083,99094" */
	String convertModelInClause(String[] modelNos) {
		StringBuilder sb = new StringBuilder();
		
		for (String model : modelNos) {
			String combined = "99" + StringUtil.leftPad(model, 3, "0");
			sb.append(combined);
			sb.append(",");
		}
		
		return sb.substring(0, sb.length()-1);
	}
	
	public static void main(String[] args) {
		String propertyFilepath = "C:/Dev/workspace/Oxygen/pod_boatrace/properties/expr10/expr10.properties";
		String exNosStr = "21087";
//		String propertyFilepath = args[0];
//		String exNosStr = args[1];
		
		List<String> listExno = StringUtil.parseNumericOptionsString(exNosStr);
		
		try {
			// PropertyUtilを使っている箇所もあるので互換性確保のために
			PropertyUtil.getInstance().addFile(propertyFilepath);
			MLPropertyUtil.getInstance().addFile(propertyFilepath);

			Simul2GroupsFileGenerator generator = new Simul2GroupsFileGenerator(); 
			generator.execute(listExno);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

norm2t_3
 norm1t_23
 form3t8_23
 norm3t_0
 norm2f_123
 form3t4_3
 form2t2_23
 norm3f_123
 \c boatstat
truncate  stmp_stat_ml_ptn_final;
\c boatstat1
truncate  stmp_stat_ml_ptn_final;
\c boatstat2
truncate  stmp_stat_ml_ptn_final;
\c boatstat3
truncate  stmp_stat_ml_ptn_final;
\c boatstat4
truncate  stmp_stat_ml_ptn_final;

truncate  stat_ml_result_ptn;
truncate  stat_ml_ptn_cnt;
truncate  stat_ml_ptn_linear;
truncate  stat_ml_ptn_totally;
truncate  stat_ml_ptn_totally_stmp;
truncate  stat_ml_ptn_metric;
truncate  stmp_stat_ml_ptn_final;
truncate  stat_ml_ptn_final;

truncate  stat_ml_result_ptn_analyze;
truncate  stat_ml_ptn_linear_analyze;
truncate  stat_ml_ptn_metric_analyze;
truncate  stat_ml_ptn_analyze;
truncate  stat_ml_kumiban_linear_analyze;
truncate  stat_ml_kumiban_metric_analyze;
truncate  stat_ml_kumiban_analyze;

truncate  stmp_stat_ml_ptn_final;

truncate  stat_ml_ptn_analyze;
truncate  stat_ml_kumiban_analyze;

-- DB 용량 확인
SELECT datname, pg_size_pretty(pg_database_size(datname)) FROM pg_database;

select distinct description from rank_stat order by description;
select cast('20171231'::date - '20160101'::date as int);

OutputWekaPattern db:0 all C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/20190816/output_entry2-0.properties
start: 2019/08/16_ 2:19:09.37
end  : 2019/08/16_ 6:50:05.39
OutputWekaPattern db:1 all C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/20190816/output_entry2-1.properties
start: 2019/08/16_ 2:19:15.66
end  : 2019/08/16_ 7:31:46.98

copy ( select * from rank_result
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191121\rank_result.tsv' csv delimiter E'\t' header;
copy ( select * from rank_stat
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191121\rank_stat.tsv' csv delimiter E'\t' header;

copy (
select * from rank_stat_kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191120\rank_stat_kumiban.tsv' csv delimiter E'\t' header;

truncate rank_result;
truncate rank_result_form;

truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_metric;

truncate rank_result;
truncate rank_stat;
truncate rank_stat_metric;
truncate rank_stat_kumiban;
truncate rank_stat_monthly;
truncate rank_stat_daily;

select bet_kumiban, count(*) from rank_stat where description = '0042' group by bet_kumiban order by bet_kumiban;
select distinct description from rank_stat order by description;
select distinct description from rank_metric order by description;

select distinct description from rank_stat_kumiban order by description;
select count(*) from rank_stat;

select distinct model.description
from rank_stat stat, rank_metric metric, rank_model model
where stat.description = metric.description and stat.bettype = metric.bettype and stat.pattern = metric.pattern and stat.bet_kumiban = metric.bet_kumiban
  and stat.description = model.description
order by model.description
copy ( select * from rank_stat
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rank_stat_20191130.tsv' csv delimiter E'\t' header;

copy ( select * from rank_result where ymd >= '20190801' and ymd <= '20191129'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_result.tsv' csv delimiter E'\t' header;
copy ( select * from rank_model
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_model.tsv' csv delimiter E'\t' header;
copy ( select * from rank_stat
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_stat.tsv' csv delimiter E'\t' header;
copy ( select * from rank_metric
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_metric.tsv' csv delimiter E'\t' header;
copy ( select * from rank_stat_kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_stat_kumiban.tsv' csv delimiter E'\t' header;
copy ( select * from rank_stat_bettype
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_stat_bettype.tsv' csv delimiter E'\t' header;
copy ( select * from rank_stat_monthly
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191201\rank_stat_monthly.tsv' csv delimiter E'\t' header;

delete from rank_stat_daily
where description in (select description from rank_model where attributes <> 'entry');

copy (select * from rec_race) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rec_race.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result_entry) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rank_result_entry.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rank_result.tsv' csv delimiter E'\t' header; 
copy (select * from rank_stat) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rank_stat.tsv' csv delimiter E'\t' header; 
copy (select * from rank_metric) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rank_metric.tsv' csv delimiter E'\t' header; 
copy (select * from rank_model) to 'F:\Dev\experiment\expr02\dbbackup\20191218\rank_model.tsv' csv delimiter E'\t' header; 
copy (select * from oddsbefore_trend) to 'F:\Dev\experiment\expr02\dbbackup\20191218\oddsbefore_trend.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result_form) to 'F:\Dev\experiment\expr02\dbbackup\rank_result\rec_race.tsv' csv delimiter E'\t' header; 

truncate rank_result_entry;
insert into rank_result_entry select * from rank_result where description in (select description from rank_model where attributes = 'entry'); 

insert into stmp_rank_ext select * from rank_ext where bet_months >= 25
insert into stmp_rank_ext_monthly select mon.* from rank_ext_monthly mon, stmp_rank_ext ext where ext.extkey = mon.extkey;

truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_balance;
truncate rank_ext_metric;

copy rank_ext from 'F:\Dev\experiment\expr02\dbbackup\stat_tables_160101_181231_200531_6months\rank_ext.tsv' csv delimiter E'\t' header;
copy rank_ext_metric from 'F:\Dev\experiment\expr02\dbbackup\stat_tables_160101_181231_200531_6months\rank_ext_metric.tsv' csv delimiter E'\t' header;
copy rank_ext_balance from 'F:\Dev\experiment\expr02\dbbackup\stat_tables_20200811_01\rank_ext_balance.tsv' csv delimiter E'\t' header;
insert into rank_ext_monthly
select description, bettype, bet_kumiban, pattern, ranktype, waku, ym, betcnt, hitcnt, betamt, hitamt, incomeamt, hitrate, incomerate, avg_incomeamt, extkey from rank_ext_balance;

drop table rank_model_tmp;
create table rank_model_tmp as
select 
  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)  || '_' || mod.description) id,
  *
from rank_model mod;


drop table rank_ext_bak;
drop table rank_ext_metric_bak;
drop table rank_ext_balance_bak;
drop table rank_ext_slope_bak;

create table rank_ext_bak as select * from rank_ext;
create table rank_ext_metric_bak as select * from rank_ext_metric;
create table rank_ext_balance_bak as select * from rank_ext_balance;
create table rank_ext_slope_bak as select * from rank_ext_slope;

copy (
select 
  bal.*
from rank_ext_balance bal,
(


select
  -- extkey
  count(1)
from rank_ext_slope
where balance[1] > 0
  and balance[2] > 0
  and balance[5] > 50
  
) tmp
where bal.extkey = tmp.extkey
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\expr02\work\all_ext_test.tsv' csv delimiter E'\t' header;


-----------------------
20210224
select count(*) from rec_race where substring(sanrentanno from 1 for 2)  = '16';
select count(*) from rec_race where substring(sanrentanno from 1 for 1)  = '2';
select count(*) from rec_race where substring(sanrentanno from 1 for 1)  = '3';

select min(ymd), max(ymd) from rec_race;

-----------------------
20201101
---
1-1. 1T_1の払戻金額予想モデル生成
arff_creator C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr10\tmp\predict_income_1T-1.arff ./tmp/predict_income_1T-1.def 20180101 20191231

select 
  cast(min(tansyoprize) as numeric(7,2)) min, 
  cast(max(tansyoprize) as numeric(7,2)) max, 
  cast(avg(tansyoprize) as numeric(7,2)) avg, 
  cast(stddev(tansyoprize) as numeric(7,2)) stddev,
  percentile_disc(0.5) within group (order by tansyoprize) median50, -- 中央値
  mode() within group (order by tansyoprize) modeval --最頻値
from rec_race race 
where tansyono = '1'
  and sanrentanno not in ('特払','不成立','発売無') 
;



-----------------------
20200830

pg_dump -h localhost -p 55432 -U postgres boatstat2 > boatstat2.dump.20200830
drop database boatstat2;
vacuum full;
create database boatstat2 with template boatstat owner postgres;
\c boatstat2
-- truncate all result, stat

select bettype, duplicate, count(1) cnt from rank_result where description = '0003' group by bettype, duplicate order by bettype, duplicate;

-----------------------
20200813
truncate rank_ext_balance;

insert into rank_ext_balance 
select bak.* from rank_ext_balance_bak bak, rank_ext ext
where bak.extkey = ext.extkey;

create table rank_ext_monthly_bak as select * from rank_ext_monthly;

truncate rank_ext_monthly;

insert into rank_ext_monthly 
select bak.* from rank_ext_monthly_bak bak, rank_ext ext
where bak.extkey = ext.extkey;


delete from rank_ext_monthly where ym::int > 36;


copy (select extkey from rank_ext order by extkey) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\expr02_02\extkey1.tsv' csv delimiter E'\t' header;
copy (select distinct extkey from rank_ext_monthly order by extkey) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\expr02_02\extkey2.tsv' csv delimiter E'\t' header;

select count(distinct extkey) from rank_ext_balance;
select count(1) from rank_ext;

-----------------------
20200811
select count(1) from rank_result where ymd > '20200531';
delete from rank_result where ymd > '20200531';


copy rank_result from '

select count(1) from rank_ext;

select count(distinct extkey) from rank_ext_monthly;

select
  extkey, cnt, maxym
from
(
  select bal.extkey, count(1) cnt, max(bal.ym::int) maxym 
  from rank_ext_balance bal, rank_ext ext
  where bal.extkey = ext.extkey
  group by extkey
) tmp
where cnt < 53;


select 
from rank_ext_balance


-----------------------
20200807
select count(1) from
(
select 
  'level1234' pattern_name, 
  substring(race.wakulevellist from 1 for 11) 
  pattern,
  count(1) betcnt
from rec_race race group by pattern_name, pattern order by pattern_name, pattern
) tmp where betcnt >= 100;

-----------------------
20200731
패턴제외관리자 작성

jyocd
jyocd+alevelcount
jyocd+level1
jyocd+mm
jyocd+raceno
jyocd+racetype
jyocd+timezone
jyocd+turn
  level1234  substring(race.wakulevellist from 1 for 11)
nopattern
raceno
racetype
  racetype+alevelcount  racetype_simple  || '_' || alevelcount
  racetype+level12  turn || '_' || alevelcount  || '_' || substring(race.wakulevellist from 1 for 5)
turn
turn+alevelcount
  turn+alevelcount+level1  turn || '_' || alevelcount  || '_' || substring(race.wakulevellist from 1 for 2)
  turn+apos  turn  || '_' || 
    ( 
      (case when substring(wakulevellist from 1 for 1) = 'A' then '1' else '0' end) || 
      (case when substring(wakulevellist from 4 for 1) = 'A' then '1' else '0' end) || 
      (case when substring(wakulevellist from 7 for 1) = 'A' then '1' else '0' end) || 
      (case when substring(wakulevellist from 10 for 1) = 'A' then '1' else '0' end) 
    ) 
 turn+level1  turn || '_' || substring(race.wakulevellist from 1 for 2)
 turn+level12  turn || '_' || substring(race.wakulevellist from 1 for 5)
turn+raceno
 turn+racetype  turn || '_' || racetype_simple
 turn+rank1+level1  turn || '_' || substring(nationwiningrank from 1 for 1)  || '_' || substring(wakulevellist from 1 for 2)
turn+timezone

insert into rank_pattern
select 
  'jyocd' pattern_name, 
  race.jyocd pattern,
  count(1) betcnt
from rec_race race group by pattern_name, pattern order by pattern_name, pattern;



-----------------------
20200729
베팅횟수가 한달1회미만인 경우 모델생성에서 제외
select '0079' desc, ( turn || '_' || alevelcount || '_' ||  substring(race.wakulevellist from 1 for 2) ) pattern, count(1) cnt from rec_race race where ymd between '20160101' and '20181231' group by pattern order by pattern;
select '0080' desc, ( turn || '_' || alevelcount || '_' ||  substring(race.wakulevellist from 1 for 2) ) pattern, count(1) cnt from rec_race race where ymd between '20160101' and '20181231' group by pattern order by pattern;
select '0081' desc, ( turn || '_' || alevelcount || '_' ||  substring(race.wakulevellist from 1 for 2) ) pattern, count(1) cnt from rec_race race where ymd between '20160101' and '20181231' group by pattern order by pattern;
select '0082' desc, ( turn || '_' || alevelcount || '_' ||  substring(race.wakulevellist from 1 for 2) ) pattern, count(1) cnt from rec_race race where ymd between '20160101' and '20181231' group by pattern order by pattern;


-----------------------
20200724
turn+acount+level1에 대해 1개월, 6개월 성능비교
turn:level12에 대해 1개월,6개월 성능비교


12240574202001

-----------------------
20200723
truncate rank_result;


-----------------------
20200718
copy ( select * from rank_result where description = '0079' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0079.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0080' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0080.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0081' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0081.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0082' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0082.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0086' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0086.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0087' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0087.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0088' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0088.tsv' csv delimiter E'\t' header; 
copy ( select * from rank_result where description = '0089' ) to  'F:\Dev\experiment\expr02\dbbackup\reslut_tables_160101-200618\rank_result_0089.tsv' csv delimiter E'\t' header; 


stat_tables_160101-190630-200531_ptn1
  
select count( distinct extkey ) from rank_ext_bak;
select count( distinct extkey ) from rank_ext_metric_bak;

-----------------------
20200708
select *
from (
  select extkey, max(ym::int) maxym from rank_ext_balance group by extkey
) tmp1 where maxym < 53;

select count(distinct extkey) from rank_ext_balance;
insert into rank_ext select * from rank_ext_bak where extkey in (
  select distinct extkey from rank_ext_slope_bak
    where -- balance[3] > 0 and balance[4] > 0
);

truncate rank_ext;
truncate rank_ext_metric;
truncate rank_ext_balance;
truncate rank_ext_slope;

-- insert into rank_ext select * from rank_ext_bak where ranktype = 'norm3t_0' and bet_kumiban = '123';
-- insert into rank_ext select * from rank_ext_bak where betcnt >= 60 and incomerate between 1 and 100;
-- insert into rank_ext select * from rank_ext_bak where betcnt >= 200 and incomerate >= 0.85;
-- insert into rank_ext select * from rank_ext_bak where betcnt >= 50 and incomerate >= 1;
-- insert into rank_ext select * from rank_ext_bak where betcnt >= 30;
-- insert into rank_ext select * from rank_ext_bak where incomerate between 1.05 and 100;
insert into rank_ext select * from rank_ext_bak where incomerate > 0.9;
insert into rank_ext_metric 
select bak.* from rank_ext ext, rank_ext_metric_bak bak where ext.extkey = bak.extkey;
insert into rank_ext_balance
select bak.* from rank_ext ext, rank_ext_balance_bak bak where ext.extkey = bak.extkey;
insert into rank_ext_slope
select bak.* from rank_ext ext, rank_ext_slope_bak bak where ext.extkey = bak.extkey;



select count( met.extkey) 
from rank_ext_metric_bak met, rank_ext ext
where ext.extkey = met.extkey;



select
  bal.ranktype, bal.bet_kumiban, sum(bal.betcnt) k_betcnt, sum(bal.betamt) k_betamt, sum(bal.incomeamt) k_incomeamt, 
  (sum(bal.hitamt)::float / sum(bal.betamt)::float)::numeric(5,2) k_incomerate
from rank_ext_balance bal, 
  (
	select
	  tmp.extkey, sum(bal.incomeamt) incomeamt
	from rank_ext_balance bal, rank_model_tmp mod, 
	 (
	 	select 
	 	  ext.extkey, betcnt e_betcnt, incomeamt e_incomeamt
	 	from rank_ext_slope slo, rank_ext ext
	 	where ext.extkey = slo.extkey
 	      and ( (slope_balance[1] * 47) + intcpt_balance[1] ) > 0
 	      -- and ( (slope_balance[5] * 53) + intcpt_balance[5] ) > 0
 	      and ( ((slope_balance[5] * 47) + intcpt_balance[5]) - ((slope_balance[1] * 47) + intcpt_balance[1]) ) > 0
 	      -- and ext.incomerate > 1.1
	 ) tmp
	where bal.extkey = tmp.extkey
	  and bal.description = mod.description  
	group by tmp.extkey
  ) tmp2
where bal.extkey = tmp2.extkey
   and bal.ym::int between 47 and 50
group by bal.ranktype, bal.bet_kumiban
order by bal.ranktype, bal.bet_kumiban
;

 
  -- and bal.ranktype = 'norm3t_0' and bal.bet_kumiban in ('123', '126', '145', '143')
  -- and bal.ranktype = 'norm3t_0' and bal.bet_kumiban in ('123', '346', '145', '135', '146', '216')
  -- and bal.ranktype = 'norm2f_123' and bal.bet_kumiban in ( '15')
  -- and bal.ranktype = 'form3t4_3' and bal.bet_kumiban in ( '16=')
  -- and bal.ranktype = 'form2t2_23' and bal.bet_kumiban in ( '4=')
  -- and bal.ranktype = 'norm2t_3' and bal.bet_kumiban in ( '15')

-----------------------
20200707




-----------------------
20200704

-- rank_ext에 대한 총괄 분석 (구미방별, 모델별)
copy (
select
  -- ranktype || '_' || bet_kumiban id, ranktype, bet_kumiban,
  -- id,
  '12mon' kubun, (model  || '_' || ranktype || '_' || bet_kumiban) id, model, ranktype, bet_kumiban,
  (plus_ptncnt::float / ptncnt::float)::numeric(7,2) plus_ptncnt_rate,
  (plus_betcnt::float / betcnt::float)::numeric(7,2) plus_betcnt_rate,
  (plus_betamt::float / betamt::float)::numeric(7,2) plus_betamt_rate,
  (case when minus_incomeamt = 0 then 1 else (plus_incomeamt::float / abs(minus_incomeamt)::float) end)::numeric(7,2) plus_incomeamt_rate,
  (plus_bet_months::float / bet_months::float)::numeric(7,2) plus_bet_months_rate,
  (plus_bet_days::float / bet_days::float)::numeric(7,2) plus_bet_days_rate,
  ptncnt, betcnt, hitcnt, betamt, incomeamt,
  (hitcnt::float / betcnt::float)::numeric(7,2) hitrate,
  (hitamt::float / betamt::float)::numeric(7,2) incomerate,
  plus_ptncnt, plus_betcnt, plus_betamt, hitamt, bet_months, plus_bet_months, bet_days, plus_bet_days
from (
	select 
	  -- ext.ranktype, ext.bet_kumiban,
	  -- mod.id,
	  mod.id model, ext.ranktype, ext.bet_kumiban,
	  sum(betcnt) betcnt, sum(betamt) betamt, sum(hitcnt) hitcnt, sum(hitamt) hitamt, sum(incomeamt) incomeamt,
	  sum(bet_days) bet_days, sum(bet_months) bet_months,
	  count(1) ptncnt,
	  sum(case when incomeamt >= 0 then 1 else 0 end) plus_ptncnt,
	  sum(case when incomeamt >= 0 then betcnt else 0 end) plus_betcnt,
	  sum(case when incomeamt >= 0 then betamt else 0 end) plus_betamt,
	  sum(case when incomeamt >= 0 then incomeamt else 0 end) plus_incomeamt,
	  sum(case when incomeamt < 0 then incomeamt else 0 end) minus_incomeamt,
	  sum(case when incomeamt >= 0 then bet_months else 0 end) plus_bet_months,
	  sum(case when incomeamt >= 0 then bet_days else 0 end) plus_bet_days
	from rank_ext_tmp12 ext, rank_model_tmp mod
	where ext.description = mod.description
	-- group by ext.ranktype, ext.bet_kumiban order by ext.ranktype, ext.bet_kumiban
	-- group by mod.id order by mod.id
	group by ext.ranktype, ext.bet_kumiban, model order by ext.ranktype, ext.bet_kumiban, model
) tmp1
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\compare_month\metric_kumiban_model_12mon.tsv' csv delimiter E'\t' header;
;

-----------------------
20200704
select 
  -- (turn || '_' || fixedEntrance) type, count(1) 
  -- (turn || '_' || grade || '_' ||  substring(wakulevellist from 1 for 2)) kubun, count(1) 
  ( turn || '_' || substring(nationwiningrank from 1 for 1)  || '_' || substring(wakulevellist from 1 for 2) ) kubun, count(1)
  -- ( turn || '_' || alevelcount || '_' ||  substring(wakulevellist from 1 for 2)) kubun, count(1)
  -- ( turn || '_' || substring(wakulevellist from 1 for 5) ) kubun, count(1)
from rec_race 
group by kubun order by kubun;

  turn  || '_' || 
  ( 
    (case when substring(wakulevellist from 1 for 1) = 'A' then '1' else '0' end) || 
    (case when substring(wakulevellist from 4 for 1) = 'A' then '1' else '0' end) || 
    (case when substring(wakulevellist from 7 for 1) = 'A' then '1' else '0' end) || 
    (case when substring(wakulevellist from 10 for 1) = 'A' then '1' else '0' end) 
  ) kubun, count(1) 

-----------------------
20200701
select
  sum(betcnt) betcnt, (sum(betcnt) / 6)::numeric(7,2) mon_betcnt, sum(incomeamt) incomeamt
from (
	select
	  ranktype, bet_kumiban, sum(betcnt) betcnt, (sum(betcnt)/6) mon_betcnt, sum(incomeamt) incomeamt, 
	  count(tmp.extkey) e_cnt, sum(e_betcnt) e_betcnt, (sum(e_betcnt)/36) e_mon_betcnt, sum(e_incomeamt) e_encomeamt, avg(tmp.balance[6])::numeric(7,2) avg_balance6
	from rank_ext_balance bal,
	 (
	 	select 
	 	  ext.extkey, betcnt e_betcnt, incomeamt e_incomeamt, balance
	 	from rank_ext_slope slo, rank_ext ext
	 	where ext.extkey = slo.extkey and
	 	  balance[4] > 0 and balance[5] > 0 and balance[3] > 0  -- and balance[2] > 0 and balance[1] > 0
	 	  -- and ext.incomeamt > 0
	 	  and ext.incomerate between 1.5 and 2
	 	  
	 ) tmp
	where bal.extkey = tmp.extkey
	and bal.ym::int between 43 and 48
	group by ranktype, bet_kumiban
	order by incomeamt desc, ranktype, bet_kumiban
) tmp2
;

	select
	  ranktype, bet_kumiban, sum(betcnt) betcnt, (sum(betcnt)/6) mon_betcnt, sum(incomeamt) incomeamt, 
	  count(tmp.extkey) e_cnt, sum(e_betcnt) e_betcnt, (sum(e_betcnt)/36) e_mon_betcnt, sum(e_incomeamt) e_encomeamt,
	  avg((tmp.balance[4] + tmp.balance[3] + tmp.balance[2] + tmp.balance[1]) / 4)::numeric(7,2) avg_past_slope
	  -- avg(tmp.balance[6])::numeric(7,2) avg_balance6
	from rank_ext_balance bal,
	 (
	 	select 
	 	  ext.extkey, betcnt e_betcnt, incomeamt e_incomeamt, balance
	 	from rank_ext_slope slo, rank_ext ext
	 	where ext.extkey = slo.extkey 
	 	   -- and (balance[3] > 0 and balance[2] > 0 )
	 	   and balance[5] > 0 
	 	   and ((balance[4] + balance[3] + balance[2] + balance[1]) / 4) between 100 and 1000
	 	   -- and balance[4] > 0 
	 	   -- and balance[3] > 0  
	 	  -- and balance[2] > 0 
	 	  -- and balance[1] > 0
	 	  and ext.incomeamt > 0
	 ) tmp
	where bal.extkey = tmp.extkey
	 and bal.ym::int between 43 and 48
	group by ranktype, bet_kumiban
	order by incomeamt desc, ranktype, bet_kumiban
;


-----------------------
20200630
select count(*)
from rank_ext_slope where 
 (balance[1] + balance[2] + balance[3] + balance[4] + balance[5] + balance[6]) > 0;

-----------------------
20200629
-- 잔액기울기 테이블 생성 수작업  
20160101 - 20181231 - 20191129 4분할
truncate rank_ext_slope;
insert into rank_ext_slope
select
  array[slope1,slope2,slope3,slope4], tmp1.extkey
from 
(
	select 
	  extkey, regr_slope(balance, ym::int)::int slope1
	from rank_ext_balance mon
	where ym::int between 1 and 12
	group by extkey
) tmp1,
(
	select 
	  extkey, regr_slope(balance, ym::int)::int slope2
	from rank_ext_balance mon
	where ym::int between 13 and 24
	group by extkey
) tmp2,
(
	select 
	  extkey, regr_slope(balance, ym::int)::int slope3
	from rank_ext_balance mon
	where ym::int between 25 and 36
	group by extkey
) tmp3,
(
	select 
	  extkey, regr_slope(balance, ym::int)::int slope4
	from rank_ext_balance mon
	where ym::int between 37 and 42
	group by extkey
) tmp4
where tmp1.extkey = tmp2.extkey and tmp1.extkey = tmp3.extkey and tmp1.extkey = tmp4.extkey
;

select 
  extkey, balance[1], balance[2], balance[3], balance[4] 
from rank_ext_slope 
where 
      balance[4] > 0
  and balance[3] > 0
  and balance[2] > 0
  and balance[1] > 0
;

-----------------------
20200628
select count(*) from rank_ext; -- sel으로부터 betcnt가 100이상인것을 발췌
select count(*) from rank_ext_allptn;
select count(*) from rank_ext_allptn where betcnt >= 47;
select * from rank_ext_allptn where extkey not in (select extkey from rank_ext);


-- 밸런스 테이블 생성하기
insert into rank_ext_balance
select
  *, 
  sum(incomeamt) over (partition by description, ranktype, bet_kumiban, pattern order by ym::int) balance
from rank_ext_monthly mon
;




-----------------------
20200627
1T 적중율 2T 수익율 교차실험 해볼 것

select 
  *
from rank_ext ext, rank_model_tmp mod,
(
	select 
	  mod.pattern_name, ext.*
	from rank_ext ext, rank_model_tmp mod
	where ranktype = 'norm1t_23' and bet_kumiban = '1' and ext.description = mod.description
	and ext.hitrate >= 0.7
	order by bet_kumiban, pattern
) ext1t
where ext.description = mod.description and ext.description = ext1t.description
  and ext.ranktype = 'norm2t_3' 
  and (mod.pattern_name = ext1t.pattern_name and ext.pattern = ext1t.pattern)
  and substring(ext.bet_kumiban from 1 for 1) = ext1t.bet_kumiban
;


copy (
select 
  mod.id, ext.*
from rank_ext ext, rank_model_tmp mod
where ranktype = 'norm1t_23' and ext.description = mod.description
order by bet_kumiban, pattern
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\work\ext_norm1t_23.tsv' csv delimiter E'\t' header;







-----------------------
20200624
-- 패턴별 시계열 분석
copy (
	select  
	  mod.id, mod.algorithm, mod.attributes, mod.pattern_name,
	  mon.ym, mon.betcnt, mon.hitcnt, mon.betamt, mon.hitamt, mon.incomeamt, mon.hitrate, mon.incomerate,
	  ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.betcnt e_betcnt, ext.betamt e_betamt, ext.incomeamt e_incomeamt, 
	  ext.hitrate e_hitrate, ext.incomerate e_incomerate, ext.extkey,
	  met2.ptncnt k_ptncnt, met2.betcnt k_betcnt, met2.betamt k_betamt, met2.incomeamt k_incomeamt, met2.hitrate k_hitrate, met2.incomerate k_incomerate,
	  met2.plus_ptncnt_rate, met2.plus_betcnt_rate, met2.plus_betamt_rate, met2.plus_hitcnt_rate, met2.plus_bet_months_rate, met2.plus_bet_days_rate,
	  met.plus_month_rate, met.betdays_rate, met.stddev_hitrate, met.stddev_incomerate 
	from
	  rank_model_tmp mod, rank_ext ext, rank_ext_metric met, rank_ext_monthly mon, rank_ext_metric_tmp met2
	where 
	  -- substring(ext.ranktype from 1 for 4) = 'norm' and
	  ext.extkey = met.extkey and ext.description = mod.description and ext.extkey = mon.extkey
	  and ext.description = met2.description and ext.ranktype = met2.ranktype and ext.bet_kumiban = met2.bet_kumiban
	  -- and mon.ym::int <= 36
	and ext.betamt > 100000
	-- and ext.incomerate > 1.1
	order by ranktype, bet_kumiban, pattern, ym
)  to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\all_ext_0004.tsv' csv delimiter E'\t' header;


-----------------------
20200621
-- 패턴별 시계열 분석
copy (
	select  
	  mod.id, mod.algorithm, mod.attributes, mod.pattern_name,
	  mon.ym, mon.betcnt, mon.hitcnt, mon.betamt, mon.hitamt, mon.incomeamt, mon.hitrate, mon.incomerate,
	  ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.betcnt e_betcnt, ext.betamt e_betamt, ext.incomeamt e_incomeamt, 
	  ext.hitrate e_hitrate, ext.incomerate e_incomerate, ext.extkey,
	  met2.ptncnt k_ptncnt, met2.betcnt k_betcnt, met2.betamt k_betamt, met2.incomeamt k_incomeamt, met2.hitrate k_hitrate, met2.incomerate k_incomerate,
	  met2.plus_ptncnt_rate, met2.plus_betcnt_rate, met2.plus_betamt_rate, met2.plus_hitcnt_rate, met2.plus_bet_months_rate, met2.plus_bet_days_rate,
	  met.plus_month_rate, met.betdays_rate, met.stddev_hitrate, met.stddev_incomerate 
	from
	  rank_model_tmp mod, rank_ext ext, rank_ext_metric met, rank_ext_monthly mon, rank_ext_metric_tmp met2
	where 
	  -- substring(ext.ranktype from 1 for 4) = 'norm' and
	  ext.extkey = met.extkey and ext.description = mod.description and ext.extkey = mon.extkey
	  and ext.description = met2.description and ext.ranktype = met2.ranktype and ext.bet_kumiban = met2.bet_kumiban
	  -- and mon.ym::int <= 36
	and ext.betamt > 100000
	-- and ext.incomerate > 1.1
	order by ranktype, bet_kumiban, pattern, ym
)  to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\all_ext_0004.tsv' csv delimiter E'\t' header;


-- 필터 생성
delete from rank_filter;
insert into rank_filter
select 
  ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.extkey, ''
from rank_ext ext, rank_ext_metric met
where ext.extkey = met.extkey
  and ext.description = '0011' and ext.ranktype = 'form3t4_3' and ext.bet_kumiban = '13=' 
  -- and substring(ext.pattern from 1 for 1) in ('1')
  -- and met.plus_month_rate >= 0.3 
  and incomeamt >= 1
  -- and hitrate >= 0.14
;

-- 분석용 시뮬레이션

select 
  ym, 
  count(1) betcnt, (sum(hitamt) - sum(betamt)) incomeamt
from (
	select
	  (ntile(8) over(partition by res.description, res.bettype, res.bet_kumiban order by ymd, sime))::text ym,
	  -- substring(res.ymd from 1 for 6) ym, 
	  res.*
	from rank_result_form res, rank_filter fil
	where res.description = fil.description
	  and res.bettype = fil.bettype
	  and res.bet_kumiban = fil.bet_kumiban
	  and res.pattern = fil.pattern
	  and res.ymd between  '20190101' and '20190830'
) tmp
group by ym
order by ym
;


-- rank_ext에 대한 총괄 분석
drop table if exists rank_ext_metric_tmp;
create table rank_ext_metric_tmp as
select
  id, algorithm, attributes, pattern_name, ranktype, bet_kumiban,
  ptncnt, betcnt, hitcnt, betamt, incomeamt,
  (hitcnt::float / betcnt::float)::numeric(7,2) hitrate,
  (hitamt::float / betamt::float)::numeric(7,2) incomerate,
  (plus_ptncnt::float / ptncnt::float)::numeric(7,2) plus_ptncnt_rate,
  (plus_betcnt::float / betcnt::float)::numeric(7,2) plus_betcnt_rate,
  (plus_betamt::float / betamt::float)::numeric(7,2) plus_betamt_rate,
  (case when hitcnt = 0 then 0 else ( plus_hitcnt::float / hitcnt::float)::numeric(7,2) end) plus_hitcnt_rate,
  plus_ptncnt, minus_ptncnt, 
  plus_betcnt, minus_betcnt, 
  plus_hitcnt, minus_hitcnt, 
  plus_betamt, minus_betamt, 
  hitamt, 
  bet_months, plus_bet_months, minus_bet_months, (plus_bet_months::float / bet_months::float)::numeric(7,2) plus_bet_months_rate,
  bet_days, plus_bet_days, minus_bet_days, (plus_bet_days::float / bet_days::float)::numeric(7,2) plus_bet_days_rate,
  description,
  ranktype || '_' || bet_kumiban id2
from (
	select 
	  id, mod.algorithm, mod.attributes, mod.pattern_name, ext.description, ext.ranktype, ext.bet_kumiban,
	  count(1) ptncnt,
	  sum(case when incomeamt >= 0 then 1 else 0 end) plus_ptncnt,
	  sum(case when incomeamt < 0 then 1 else 0 end) minus_ptncnt,
	  sum(betcnt) betcnt,
	  sum(case when incomeamt >= 0 then betcnt else 0 end) plus_betcnt,
	  sum(case when incomeamt < 0 then betcnt else 0 end) minus_betcnt,
	  sum(hitcnt) hitcnt,
	  sum(case when incomeamt >= 0 then hitcnt else 0 end) plus_hitcnt,
	  sum(case when incomeamt < 0 then hitcnt else 0 end) minus_hitcnt,
	  sum(betamt) betamt,
	  sum(case when incomeamt >= 0 then betamt else 0 end) plus_betamt,
	  sum(case when incomeamt < 0 then betamt else 0 end) minus_betamt,
	  sum(hitamt) hitamt,
	  sum(incomeamt) incomeamt,
	  sum(bet_months) bet_months,
	  sum(case when incomeamt >= 0 then bet_months else 0 end) plus_bet_months,
	  sum(case when incomeamt < 0 then bet_months else 0 end) minus_bet_months,
	  sum(bet_days) bet_days,
	  sum(case when incomeamt >= 0 then bet_days else 0 end) plus_bet_days,
	  sum(case when incomeamt < 0 then bet_days else 0 end) minus_bet_days
	from rank_ext ext, rank_model_tmp mod
	where ext.description = mod.description
	group by id, mod.algorithm, mod.attributes, mod.pattern_name, ext.description, ext.ranktype, ext.bet_kumiban
) tmp1
order by algorithm, attributes, pattern_name, id, ranktype, bet_kumiban
;

copy (
  select * from rank_ext_metric_tmp
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\rank_ext_metric_tmp.tsv' csv delimiter E'\t' header;

-----------------------
20200619
select count(*) from rank_ext_monthly where ym::int > 36;

truncate rank_ext_monthly;
copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231_36_nowaku\rank_ext_monthly.tsv' csv delimiter E'\t' header;


select count(*) from rank_ext_monthly 
where description = '0011' and ranktype = 'norm2t_3' and bet_kumiban = '21' and ym::int >= 37;



-- hitcnt가 0인것이 어느정도인지 조사
copy (
select 
  description, bettype, bet_kumiban, pattern, count(1) betcnt, sum(hity) hity
from rank_result
where ymd between '20160101' and '20181231'
group by description, bettype, bet_kumiban, pattern
order by description, bettype, bet_kumiban, pattern
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\all_betcnt_hitcnt.tsv' csv delimiter E'\t' header;


copy (
	select
	  description, bettype, bet_kumiban, (ym::int / 3) y, sum(incomeamt) incomeamt
	from rank_ext_monthly
	group by description, bettype, bet_kumiban, y
	order by description, bettype, bet_kumiban, y
)  to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\yearly_income_trand.tsv' csv delimiter E'\t' header;




-----------------------
20200618

-----------------------
20200617
-- 모델/구미방/패턴별 탑3
copy (
  select
    *
  from (
    select
      ROW_NUMBER() OVER (PARTITION BY ranktype, bet_kumiban ORDER BY incomeamt desc) AS r2,
      ranktype, bet_kumiban, id, incomeamt
    from (
      select 
        ranktype, bet_kumiban, id, sum(incomeamt) incomeamt
      from (
        select  ROW_NUMBER() OVER (PARTITION BY ext.description || '_' || ext.ranktype, ext.bet_kumiban ORDER BY incomeamt desc) AS r1,
          (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)  || '_' || mod.description) id,
          ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.betcnt, ext.betamt, ext.incomeamt, ext.hitrate, ext.incomerate, ext.extkey,
          met.indev_hitamt_rate, met.plus_month_rate, met.betdays_rate, met.stddev_hitrate, met.stddev_incomerate
        from
          rank_model mod, rank_ext ext, rank_ext_metric met
        where 
          ext.extkey = met.extkey and ext.description = mod.description
      ) tmp where r1 <= 3
	  group by ranktype, bet_kumiban, id
	) tmp2
	order by ranktype, bet_kumiban, id
  )tmp3 where r2 <= 1
  order by ranktype, bet_kumiban, id
)  to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\nowaku\top1.tsv' csv delimiter E'\t' header;

-----------------------
20200616
select
  description, ranktype, bet_kumiban, sum(betamt) betamt, sum(incomeamt) s_incomeamt, avg(hitrate) avg_hitrate, avg(incomerate) avg_incomerate
from rank_ext
group by description, ranktype, bet_kumiban
order by s_incomeamt desc;



-----------------------
20200615
select incomerate, count(*) from rank_ext_02 order by incomerate desc;


-----------------------
20200611
truncate rank_ext_monthly_02;
copy rank_ext_monthly_02 from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231_36\rank_ext_monthly.tsv' csv delimiter E'\t' header;
  select * from rank_ext_monthly_02 
  where ranktype = 'norm2t_3' and bet_kumiban = '21' and description = '0003' and waku = '3'
  order by ym
-----------------------
20200607
select 
  *
from
rank_ext_02 ext, rank_ext_metric_02 met
where ext.extkey = met.extkey
  and incomerate > 1 
  and (incomerate - (stddev_incomerate+0.8)) > 0;



delete from rank_filter;
insert into rank_filter
select
  description, bettype, bet_kumiban, pattern, ranktype, waku, extkey, ''
from
(
	select
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.betcnt, ext.betamt, ext.incomeamt, ext.hitrate, ext.incomerate, ext.extkey,
	  met.indev_hitamt_rate, met.plus_month_rate, met.betdays_rate, met.stddev_hitrate, met.stddev_incomerate
	from
	  rank_model mod, rank_ext_02 ext, rank_ext_metric_02 met
	where 
	  ext.extkey = met.extkey and ext.description = mod.description 
	  and ext.ranktype = 'norm3t_0' and ext.bet_kumiban = '261' 
	  and ext.description = '0043' 
	  -- and ext.waku = '2'
	  -- and substring(ext.pattern from 1 for 1) in ('1', '7')
	  -- and ext.pattern = '2'
	  -- and ext.incomeamt > 0
	  -- and ext.hitrate  > 0.15
	  -- and met.slope_monthly_income  > 1
) x
order by bettype, bet_kumiban;


select
  res.pattern,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  (sum(hity)::float / sum(1)::float)::numeric(7,2) hitrate,
  (sum(hitamt)::float / sum(betamt)::float)::numeric(7,2) incomerate
from rec_race race, rank_result res, rank_filter fil, oddsbefore_trend trend, rank_model mod
where res.ymd = trend.ymd and res.jyocd = trend.jyocd and res.raceno = trend.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.description = mod.description
  and res.description = fil.description
  and res.pattern = fil.pattern
  and res.bettype = fil.bettype
  and res.bet_kumiban = fil.bet_kumiban
  and res.ymd between  '20190101' and '20190831'
  --and substring(res.predict_rank123 from 2 for 2) = fil.waku
-- group by fil.waku order by fil.waku
group by res.pattern order by res.pattern
;

-----------------------
20200531
=$h2 & " " & $f2 & " " & $c2 & " " & $h2
=$i2 & " " & $g2 & " " & $ac2 & " " & $h2

select ext.* 
from rank_ext_metric_02 met, rank_ext_02 ext, rank_model mod
where met.extkey = ext.extkey and met.description = mod.description and met.betdays_rate = 1;


전체데이터 출력
copy (
select
  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)) id,
  mod.pattern_name, mod.attributes, mod.algorithm,
  ext.*,
  met.indev_hitamt_rate, met.plus_month_rate, met.betdays_rate, met.slope_monthly_income, met.stddev_hitrate, met.stddev_incomerate
from rank_ext_metric_062 met, rank_ext_062 ext, rank_model mod
where met.extkey = ext.extkey and met.description = mod.description
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\ext_062.tsv' csv delimiter E'\t' header;

-----------------------
20200528
delete from rank_filter;
insert into rank_filter
select
  description, bettype, bet_kumiban, pattern, ranktype, waku, extkey, ''
from
(
  select 
    *
  from (
    select *, ROW_NUMBER() OVER (PARTITION BY ranktype, bet_kumiban ORDER BY hitrate desc ) AS r3
    from (
      select *, ROW_NUMBER() OVER (PARTITION BY ranktype, bet_kumiban ORDER BY incomeamt desc) AS r2
      from (
        select  ROW_NUMBER() OVER (PARTITION BY ext.ranktype, ext.bet_kumiban ORDER BY betdays_rate desc) AS r1,
          (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)) id,
          ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.betcnt, ext.betamt, ext.incomeamt, ext.hitrate, ext.incomerate, ext.extkey,
          met.indev_hitamt_rate, met.plus_month_rate, met.betdays_rate, met.stddev_hitrate, met.stddev_incomerate
        from
          rank_model mod, rank_ext_061 ext, rank_ext_metric_061 met
        where 
          -- ext.ranktype = 'norm2t_3' and ext.bet_kumiban = '21' and -- ext.pattern = 'nopattern' and
          ext.extkey = met.extkey and ext.description = mod.description
      ) tmp where r1 <= 30
    ) tmp2 where r2 <= 20
  ) tmp3 where r3 <= 10
  order by (r1 + r2 + r3) 
) x
order by bettype, bet_kumiban;

copy (
select
  mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  race.jyocd, race.raceno, race.grade, race.isvenus, race.timezone, race.turn, race.kimarite, race.fixedentrance, race.racetype_simple racetype, race.alevelcount, race.femalecount,
  res.pattern, res.bettype, res.bet_kumiban, res.predict_rank123, res.bet_odds, res.bet_oddsrank, res.hity, res.hitn, res.betamt, res.hitamt, res.result_amt,
  fil.ranktype, fil.waku,
  
from rec_race race, rank_result res, rank_filter fil, oddsbefore_trend trend, rank_model mod, rank_me
where res.ymd = trend.ymd and res.jyocd = trend.jyocd and res.raceno = trend.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.description = mod.description
  res.description = fil.description
  and res.bettype = fil.bettype
  and res.bet_kumiban = fil.bet_kumiban
  and res.pattern = fil.pattern
  and res.ymd between  '20190101' and '20190831'
order by race.ymd, race.sime
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\061_betdays_rate-incomeamt-hitrate_30-20-10.tsv' csv delimiter E'\t' header;
;


select
  
from rec_race race, rank_result res, rank_filter fil, oddsbefore_trend trend, rank_model mod
where res.ymd = trend.ymd and res.jyocd = trend.jyocd and res.raceno = trend.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.description = mod.description
  res.description = fil.description
  and res.bettype = fil.bettype
  and res.bet_kumiban = fil.bet_kumiban
  and res.pattern = fil.pattern
  and substring(res.predict_rank123 from 3 for 1) = fil.waku
  and res.ymd > '20190831'
group by fil.waku
;

-----------------------
20200506
-- 필터 생성
delete from rank_filter;
insert into rank_filter
select
  description, bettype, bet_kumiban, pattern, ranktype, waku, extkey, ''
from
(
  select
    ROW_NUMBER() OVER (PARTITION BY bet_kumiban ORDER BY score desc) AS r,
    description, bettype, bet_kumiban, pattern, ranktype, waku, ''
  from (
    select 
      mod.no, mod.pattern_name, mod.attributes, mod.algorithm,
      (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)) id,
      sqrt((ext.incomerate*100)^2.0 + (met.betdays_rate*100)^2.0)::nimeric(7,2) score, 
      indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income,
      ext.*
    from
      rank_model mod, rank_ext_02 ext, rank_ext_metric_04 met
    where 
      ext.extkey = met.ext_key and ext.description = mod.description
      and ext.ranktype = 'norm3t_0'
	  and stddev_hitrate <= 0.1
  ) tmp
  where score >= 120 and score < 130
  order by ranktype, bet_kumiban
) x
where x.r <= 1000
order by bet_kumiban
;


select bet_kumiban, count(*) cnt from rank_filter
group by bet_kumiban order by bet_kumiban;


-- 분석용 시뮬레이션
copy (
select
  mod.pattern_name ptn, race.turn, res.*, trend.*, (hitamt - betamt) incomeamt
from rec_race race, rank_result res, rank_filter fil, oddsbefore_trend trend, rank_model mod
where res.ymd = trend.ymd and res.jyocd = trend.jyocd and res.raceno = trend.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.description = mod.description
  and res.description = fil.description
  and res.pattern = fil.pattern
  and res.bettype = fil.bettype
  and res.bet_kumiban = fil.bet_kumiban
  -- and substring(res.bet_kumiban from 1 for 1) = substring(fil.bet_kumiban from 1 for 1)
  and res.ymd between  '20190101' and '20190831'
order by res.ymd, res.jyocd, res.raceno, res.bet_kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\01_rank_result_trend_norm3t_0_===score61_120-130.tsv' csv delimiter E'\t' header;


-- 최종시뮬레이션
select
  res.jyocd,
  res.description,
  res.bet_oddsrank,
  res.bet_kumiban,
  substring(res.sime from 1 for 2) sime2,
  (sum(hity)::float / count(res.hity)::float)::numeric(7,2) hitrate,
  count(betamt) betcnt,
  sum(betamt) betamt, 
  sum(hitamt - betamt) incomeamt
from rec_race race, rank_result res, rank_filter fil, oddsbefore_trend trend
where res.ymd = race.ymd and rec.jyocd = race.jyocd and res.raceno = race.raceno
  and res.ymd = trend.ymd and rec.jyocd = trend.jyocd and res.raceno = trend.raceno
  and res.description = fil.description and res.pattern = fil.pattern and res.bettype = fil.bettype and res.bet_kumiban = fil.bet_kumiban
  and res.bet_kumiban = '123'
  -- and substring(res.bet_kumiban from 1 for 1) = substring(fil.bet_kumiban from 1 for 1)
  -- and rank123 between 4 and 6
  -- and bet_oddsrank between 1 and 4
  -- and (res.bet_odds between 12 and 15)
  -- and race.turn in ('4', '7')
  -- and res.predict_rank123 in ('126', '162')
  -- and res.raceno in ('03')
  -- and res.jyocd in ('01')
  and res.description in ('2005')
  -- and trend.odds1 between 200 and 230
  -- and trend.rank1 between 11 and 12
  -- and trend.rank123 between 1 and 2
  -- and trend.odds123 between 5 and 10
  -- and res.bet_kumiban in ('132', '213')
  -- and substring(res.sime from 1 for 2) in ('15', '19')
  and res.ymd > '20190831'
-- group res.jyocd, order by res.jyocd
group by res.description order by res.description
-- group by res.bet_oddsrank order by res.bet_oddsrank
-- group by res.bet_kumiban order by res.bet_kumiban
-- group by sime2
;


-- 전체 스코어 데이터
copy (
select
  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1)  || '_' || substring(mod.pattern_name from 1 for 10)) id,
  sqrt((ext.hitrate*100)^2.0 + (ext.incomerate*100)^2.0 + (met.betdays_rate*100)^2.0)::numeric(7,2) score11,
  sqrt((ext.hitrate*100)^2.0 + (ext.incomerate*100)^2.0 + (met.betcnt/10)^2.0)::numeric(7,2) score12,
  sqrt((ext.hitrate*100)^2.0 + (met.betdays_rate*100)^2.0)::numeric(7,2) score21,
  sqrt((ext.hitrate*100)^2.0 + (met.betcnt/10)^2.0)::numeric(7,2) score22,
  sqrt((ext.hitrate*100)^2.0 + (ext.incomerate*100)^2.0)::numeric(7,2) score3,
  sqrt((ext.hitrate*100)^2.0 + (ext.incomerate*100)^2.0 + (met.plus_month_rate*100)^2.0)::numeric(7,2) score4,
  sqrt((ext.hitrate*100)^2.0 + ((1.0-met.stddev_hitrate)*100)^2.0)::numeric(7,2) score5,
  sqrt((ext.incomerate*100)^2.0 + (met.betdays_rate*100)^2.0)::numeric(7,2) score61,
  sqrt((ext.incomerate*100)^2.0 + (met.plus_month_rate*100)^2.0)::numeric(7,2) score62,
  sqrt((ext.incomerate*100)^2.0 + ((1.0-met.stddev_incomerate)*100)^2.0)::numeric(7,2) score63,
  mod.pattern_name, mod.attributes, mod.algorithm,
  ext.*,
  met.indev_hitamt_rate, met.plus_month_rate, met.betdays_rate, met.slope_monthly_income, met.stddev_hitrate, met.stddev_incomerate
from rank_ext_metric_02 met, rank_ext_02 ext, rank_model mod
where met.extkey = ext.extkey and met.description = mod.description and met.betdays_rate <> 1
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\ext_02.tsv' csv delimiter E'\t' header;



-----------------------
-----------------------
20200312
copy (select * from odds_trend ) to 'H:\!!DevBackup\export\20200313\odds_trend.tsv' csv delimiter E'\t' header; 
copy (select * from oddsbefore_trend ) to 'H:\!!DevBackup\export\20200313\oddsbefore_trend.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result where ymd >= '20190101') to 'H:\!!DevBackup\export\20200313\rank_result_03_2019.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result where ymd >= '20190101') to 'H:\!!DevBackup\export\20200313\rank_result_01_2019.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result_form where ymd >= '20190101') to 'H:\!!DevBackup\export\20200313\rank_result_form_03_2019.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result_form where ymd >= '20190101') to 'H:\!!DevBackup\export\20200313\rank_result_form_01_2019.tsv' csv delimiter E'\t' header; 

select max(ymd) from oddsbefore_trend;

-----------------------
20200223
select
  race.sanrentanno, sanrentanprize, sanrentanpopular,
  bodds.odds123 rank123b, odds.odds123 rank123, 
  bodds.odds213 rank213b, odds.odds213 rank213, 
  bodds.odds314 rank314b, odds.odds314 rank314, 
  bodds.odds412 rank412b, odds.odds412 rank412, 
  bodds.odds512 rank512b, odds.odds512 rank512, 
  bodds.odds612 rank612b, odds.odds612 rank612
from odds_trend odds, oddsbefore_trend bodds, rec_race race
where odds.ymd = bodds.ymd and odds.jyocd = bodds.jyocd and odds.raceno = bodds.raceno
  and odds.ymd = race.ymd and odds.jyocd = race.jyocd and odds.raceno = race.raceno
order by odds.ymd desc;


-----------------------
20200219
\c boatstat
truncate rank_ext_02;
truncate rank_ext_metric_02;

truncate rank_ext_monthly;

copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_190101-190630_6\rank_ext_monthly.tsv' csv delimiter E'\t' header;

copy rank_ext_02 from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231_36\rank_ext.tsv' csv delimiter E'\t' header;
copy rank_ext_metric_02 from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231_36\rank_ext_metric.tsv' csv delimiter E'\t' header;

-----------------------
20200218

truncate rank_ext_hit;
truncate rank_ext_monthly;

copy rank_ext_02 from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231\rank_ext.tsv' csv delimiter E'\t' header;
copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\190101-190630\rank_ext_monthly.tsv' csv delimiter E'\t' header;
copy rank_ext_metric_02 from 'H:\!!DevBackup\experiment\expr02\dbbackup\stat_tables_160101-181231\rank_ext_metric.tsv' csv delimiter E'\t' header;


select * from rank_result where ymd = '20190101' and jyocd = '14' and raceno=4 and description = '2019' and pattern = '4';

truncate rank_filter;
insert into rank_filter 
select description, bettype, bet_kumiban, pattern, ranktype, waku, extkey, 'test'
-- copy ( 
select * 
from (
    select 
      mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
      (substring(mod.algorithm from 1 for 2) || '_' || substring(mod.attributes from 1 for 2) || '_' || substring(mod.pattern_name from 1 for 12)) id,
      indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income, 
      ext.*
    from
      rank_model mod, rank_ext_061 ext, rank_ext_metric_061 met
    where ext.description = mod.description
      and ext.extkey = met.extkey
--      and ext.ranktype = 'norm3t_4'  -- and ext.bet_kumiban = '123'
--      and ext.extkey in ('2019+3T+123+4+norm3t_4+6')
--      and ext.hitrate between 0.3 and 0.6
--      and ext.bet_months >= 25
--      and met.plus_month_rate >= 0.7
--      and indev_hitamt_rate >= 0.9
--      and met.stddev_hitrate >= 0.2
--      and betdays_rate > 0.5
--      and met.slope_monthly_income > 10
        and ext.incomerate between 1.5 and 2
) tmp
-- ) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\rank_ext_02.tsv' csv delimiter E'\t' header
; 
select ranktype, count(*) cnt from rank_filter group by ranktype order by ranktype ;

select 
  -- fil.ranktype, 
  -- fil.bet_kumiban,
  fil.extkey,
  sum(betcnt) betcnt, sum(incomeamt) incomeamt, (sum(hitcnt)::float / sum(betcnt)::float)::numeric(7,2) hitrate,  (sum(hitamt)::float / sum(betamt)::float)::numeric(7,2) incomerate
from rank_ext_monthly mon, rank_filter fil 
where mon.extkey = fil.extkey
-- group by fil.ranktype, fil.bet_kumiban, fil.extkey
-- order by fil.ranktype, fil.bet_kumiban, fil.extkey
group by fil.extkey
order by fil.extkey
;


-----------------------
truncate rank_filter;
insert into rank_filter select description, bettype, bet_kumiban, pattern, ranktype, waku, extkey, 'test'
-- copy ( select * 
from (
    select 
      mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
      (substring(mod.algorithm from 1 for 2) || '_' || substring(mod.attributes from 1 for 2) || '_' || substring(mod.pattern_name from 1 for 12)) id,
      indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income, 
      ext.*
    from
      rank_model mod, rank_ext_062 ext, rank_ext_metric_062 met
    where ext.description = mod.description
      and ext.extkey = met.extkey
--      and ext.ranktype = 'norm1t_23' and ext.bet_kumiban = '2'
--      and ext.hitrate >= 0.5
--      and ext.bet_months >= 25
--      and met.plus_month_rate >= 0.5
--      and indev_hitamt_rate >= 0.8
--      and met.stddev_hitrate <= 0.1
--      and betdays_rate > 0.5
--      and abs(met.slope_monthly_income) > 0
        and ext.incomerate between 1.5 and 1.9
) tmp
-- ) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\rank_ext_02.tsv' csv delimiter E'\t' header
; 
select ranktype, count(*) cnt from rank_filter group by ranktype order by ranktype ;

select 
  count(distinct fil.extkey) extkey_cnt,
  sum(betcnt) betcnt, sum(incomeamt) incomeamt, (sum(hitcnt)::float / sum(betcnt)::float)::numeric(7,2) hitrate,  (sum(hitamt)::float / sum(betamt)::float)::numeric(7,2) incomerate
from rank_ext_monthly mon, rank_filter fil 
where mon.extkey = fil.extkey;


-----------------------
copy (
    select 
      mon.description, mon.bettype, mon.bet_kumiban, mon.pattern, mon.ranktype, mon.waku, mon.ym, incomeamt, 
      sum(incomeamt) over (partition by mon.extkey order by ym)
    from rank_ext_monthly mon, rank_filter fil
    where mon.extkey = fil.extkey
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\result_analysis\rank_mon_02.tsv' csv delimiter E'\t' header
;

-- 구미방별 평균월별(적중율, 적중율편차, 수익률, 수익률편차)
select 
  ext.bettype, ext.bet_kumiban, 
  avg(ext.hitrate)::numeric(7,2) avg_hitrate, avg(met.stddev_hitrate)::numeric(7,2) avg_stddev_hitrate, 
  avg(ext.incomerate)::numeric(7,2) avg_incomerate, avg(met.stddev_incomerate)::numeric(7,2) avg_stddev_incomerate
from rank_ext_02 ext, rank_ext_metric_02 met, rank_model mod
where ext.description = mod.description and ext.extkey = met.extkey
group by ext.bettype, ext.bet_kumiban
order by ext.bettype, ext.bet_kumiban
;

-----------------------
20200213
select
  description, bettype, bet_kumiban, pattern, ranktype, waku, ym,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(incomeamt) incomeamt,
  (sum(hity)::float / sum(1)::float)::numeric(7,2) hitrate,
  (sum(hitamt)::float / sum(betamt)::float)::numeric(7,2) incomerate,
  ((sum(hitamt) - sum(betamt)) / sum(1)) avg_incomeamt,
  extkey
from (
	select 
	  description, bettype, bet_kumiban, pattern, 'norm1t_23' ranktype, substring(predict_rank123 from 2 for 2) waku, 
	  (ntile(24) over(partition by description, bettype, bet_kumiban, pattern, substring(predict_rank123 from 2 for 2) order by ymd, sime))::text ym,
	  hity, betamt, hitamt, (hitamt - betamt) incomeamt,
	  description || '+' || bettype || '+' || bet_kumiban || '+' || pattern || '+' || 'norm1t_23' || '+' || substring(predict_rank123 from 2 for 2) extkey
	from rank_result
	where description = '0003'
	  and bettype = '1T'
	  and ymd >= '20170101' and ymd <= '20181231' 
) tmp
group by description, bettype, bet_kumiban, pattern, ranktype, waku, ym, extkey
order by description, bettype, bet_kumiban, pattern, ranktype, waku, ym::int, extkey
;
		


-----------------------
2020212
select count(*) from rank_result 
where description = '0003' and bettype = '1T' and bet_kumiban = '1' and pattern = 'nopattern' and substring(predict_rank123 from 2 for 2) = '11'
and ymd >= '20170101' and ymd <= '20170331';

-----------------------
2020211

truncate rank_filter;
insert into rank_filter select * from rank_filter_061;


-- boatstat에서 rank_ext, rank_ext_02변환작업
-- boatstat2에서 rank_ext_061, rank_ext_062분리작업
drop table rank_ext_02;
drop table rank_ext_monthly_02;
drop table rank_ext_hit_02;
drop table rank_ext_metric_02;

create table rank_ext_02 as select * from rank_ext;
create table rank_ext_monthly_02 as select * from rank_ext_monthly;
create table rank_ext_hit_02 as select * from rank_ext_hit;
create table rank_ext_metric_02 as select * from rank_ext_metric;

truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_hit;
truncate rank_ext_metric;

copy rank_ext from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext.tsv' csv delimiter E'\t' header;
copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_monthly.tsv' csv delimiter E'\t' header;
copy rank_ext_hit from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_hit.tsv' csv delimiter E'\t' header;
copy rank_ext_metric from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_metric.tsv' csv delimiter E'\t' header;

delete from rank_ext_metric where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext_monthly where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext_hit where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext where  hitrate = 0 or hitrate = 1;

create table rank_ext_061 as select * from rank_ext;
create table rank_ext_monthly_061 as select * from rank_ext_monthly;
create table rank_ext_hit_061 as select * from rank_ext_hit;
create table rank_ext_metric_061 as select * from rank_ext_metric;

truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_hit;
truncate rank_ext_metric;

copy rank_ext from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_062\rank_ext.tsv' csv delimiter E'\t' header;
copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_062\rank_ext_monthly.tsv' csv delimiter E'\t' header;
copy rank_ext_hit from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_062\rank_ext_hit.tsv' csv delimiter E'\t' header;
copy rank_ext_metric from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_062\rank_ext_metric.tsv' csv delimiter E'\t' header;

delete from rank_ext_metric where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext_monthly where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext_hit where extkey in (select extkey from rank_ext where hitrate = 0 or hitrate = 1);
delete from rank_ext where  hitrate = 0 or hitrate = 1;

create table rank_ext_062 as select * from rank_ext;
create table rank_ext_monthly_062 as select * from rank_ext_monthly;
create table rank_ext_hit_062 as select * from rank_ext_hit;
create table rank_ext_metric_062 as select * from rank_ext_metric;

truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_hit;
truncate rank_ext_metric;

-- boatstat2에서 rank_ext_061, rank_ext_062분리작업



-----------------------
2020210

boatstat2에서 stattables 재생성 작업
truncate rank_result_form;
truncate rank_ext;
truncate rank_ext_monthly;
truncate rank_ext_hit;
truncate rank_ext_metric;

copy rank_ext from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext.tsv' csv delimiter E'\t' header;;
copy rank_ext_monthly from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_monthly.tsv' csv delimiter E'\t' header;;
copy rank_ext_hit from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_hit.tsv' csv delimiter E'\t' header;;
copy rank_ext_metric from 'H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\rank_ext_metric.tsv' csv delimiter E'\t' header;;

rank_result_form_generator_061 boatstat2 20170101 20181231
select count(*) from rank_result_form;

rank_result_hity_generator boatstat2 20170101 20181231
select count(*) from rank_result_hity;
select count(*) from rank_result_form_hity;


rank_ext_generator_061_tmp boatstat2 2001 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2002 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2010 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2011 20170101 20181231 all

rank_ext_generator_061_tmp boatstat2 2003 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2004 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2012 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2013 20170101 20181231 all

rank_ext_generator_061_tmp boatstat2 2005 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2006 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2014 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2015 20170101 20181231 all

rank_ext_generator_061_tmp boatstat2 2007 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2020 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2021 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2008 20170101 20181231 all

rank_ext_generator_061_tmp boatstat2 2009 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2016 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2017 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2018 20170101 20181231 all
rank_ext_generator_061_tmp boatstat2 2019 20170101 20181231 all

select count(*) from rank_ext_metric;

backup_result_tables boatstat2 H:\!!DevBackup\experiment\expr06\dbbackup\result_tables_form_061\
backup_stat_tables boatstat2 H:\!!DevBackup\experiment\expr06\dbbackup\stat_tables_061\

-----------------------
2020209
select min(ymd), max(ymd), count(*) from rank_result_form;


select count(*) from rank_result_form;
select count(*) from rank_result_hity;
select count(*) from rank_result_form_hity;

select count(*) from rank_ext;
select count(*) from rank_ext_metric;

select description, bettype, count(*) cnt
from rank_result_hity
group by description, bettype
order by description, bettype
;


-----------------------
2020204
truncate rank_filter;

insert into rank_filter
select 
  ext.description, ext.bettype, ext.bet_kumiban, ext.pattern, ext.ranktype, ext.waku, ext.extkey, 'test'
from stmp_rank_ext ext, rank_ext_metric met
where ext.extkey = met.extkey
	-- and indev_hitamt_rate >= varArrIndevHitamtRate[1] and indev_hitamt_rate <= varArrIndevHitamtRate[2]
	-- and plus_month_rate >= 0.4
	-- and ext.hitrate >= 0.4
	-- and ext.bet_months >= 25
	and ext.incomerate > 1
	and met.betdays_rate >= 0.5
	-- and abs(met.slope_monthly_income) <= 0.05
;

select ranktype, bet_kumiban, count(*) cnt from rank_filter 
group by ranktype, bet_kumiban 
order by ranktype, bet_kumiban;


select
  ymd, jyocd, raceno, predict_rank123
from rank_result result
where result.description = '0077' 
  and result.pattern = '1_Z'
group by ymd, jyocd, raceno, predict_rank123
order by ymd, jyocd, raceno, predict_rank123
;

-----------------------
2020201
select distinct yyyymm
select

from
  rank_model mod, rank_ext ext, rank_ext_metric met
where ext.description = mod.description
  and ext.extkey = met.extkey



delete from run_rank_result;
delete from run_rank_result_ptn;

copy (
select
  *
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 2) || '_' || substring(mod.attributes from 1 for 2) || '_' || substring(mod.pattern_name from 1 for 12)) id,
	  indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income, 
	  ext.*
	from
	  rank_model mod, stmp_rank_ext ext, rank_ext_metric met
	where ext.description = mod.description
	  and ext.extkey = met.extkey
  	  -- and ext.bet_months >= 25
  	  -- and met.plus_month_rate > 0.1
  	  -- and ext.incomeamt > 0
) tmp
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\result_analysis\rank_ext.incomeamt.tsv' csv delimiter E'\t' header
; 

-- 
select 
  betdays_rate, count(*) cnt
from
  rank_model mod, rank_ext ext, rank_ext_metric met
where ext.description = mod.description
  and ext.extkey = met.extkey
order by cnt desc;

-----------------------
20200131
select alevelcount, count(*) from rec_race group by alevelcount;
select substring(wakulevellist from 1 for 11) level1234, count(*) from rec_race group by level1234 order by level1234;
-----------------------
20200128
copy (select * from rec_race) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20200129\rec_race.tsv' csv delimiter E'\t' header; 
copy (select * from rec_race_waku2) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20200129\rec_race_waku2.tsv' csv delimiter E'\t' header; 
copy (select * from rec_racer_arr) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20200129\rec_racer_arr.tsv' csv delimiter E'\t' header; 
copy (select * from oddsbefore_trend) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20200129\oddsbefore_trend.tsv' csv delimiter E'\t' header; 



copy (
  select 
    entry[1]::text entry1, 
    entry[2]::text entry2, 
    entry[3]::text entry3, 
    entry[4]::text entry4, 
    entry[5]::text entry5, 
    entry[6]::text entry6, 
    cast(nationwiningrate1 as int)::text || lpad(cast(nation2winingrate1 as int)::text,2,'0') || lpad(cast(nation3winingrate1 as int)::text,2,'0') ranknationrate1, 
    cast(nationwiningrate2 as int)::text || lpad(cast(nation2winingrate2 as int)::text,2,'0') || lpad(cast(nation3winingrate2 as int)::text,2,'0') ranknationrate2, 
    cast(nationwiningrate3 as int)::text || lpad(cast(nation2winingrate3 as int)::text,2,'0') || lpad(cast(nation3winingrate3 as int)::text,2,'0') ranknationrate3, 
    cast(nationwiningrate4 as int)::text || lpad(cast(nation2winingrate4 as int)::text,2,'0') || lpad(cast(nation3winingrate4 as int)::text,2,'0') ranknationrate4, 
    cast(nationwiningrate5 as int)::text || lpad(cast(nation2winingrate5 as int)::text,2,'0') || lpad(cast(nation3winingrate5 as int)::text,2,'0') ranknationrate5, 
    cast(nationwiningrate6 as int)::text || lpad(cast(nation2winingrate6 as int)::text,2,'0') || lpad(cast(nation3winingrate6 as int)::text,2,'0') ranknationrate6, 
--    substring(sanrentanno from 2 for 1) rank2
	(case when substring(sanrentanno from 2 for 1) = '2' then 2 else 0 end) rank2
  from rec_race race, rec_race_waku2 waku2, rec_racer_arr racerarr
  where race.ymd >= '20120101' and race.ymd <= '20161231' 
    and sanrentanno not in ('特払','不成立','発売無') 
    and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno 
    and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno 
    order by race.ymd, race.sime  
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\tmp\test_24.arff' csv;

-----------------------
20200115
truncate rank_result_hity;
truncate rank_result_form_hity;
insert into rank_result_hity select * from rank_result where hity=1;
insert into rank_result_form_hity select * from rank_result_form where hity=1;




insert into rank_model values ('1001','all','entry','bayes',2190,30,'1and2and3','20180101~20191129',41);
insert into rank_model values ('1002','all','ranknationrate','bayes',2190,30,'1and2and3','20180101~20191129',42);
insert into rank_model values ('1003','all','entry','filter_bayes',2190,30,'1and2and3','20180101~20191129',43);
insert into rank_model values ('1004','all','ranknationrate','filter_bayes',2190,30,'1and2and3','20180101~20191129',44);


truncate rank_ext;
truncate rank_ext_hit;
truncate rank_ext_monthly;
truncate rank_ext_metric;

delete from rank_ext where description not in ('1001','1002','1003','1004');
delete from rank_ext_metric where description not in ('1001','1002','1003','1004');
delete from rank_ext_hit where description not in ('1001','1002','1003','1004');
delete from rank_ext_monthly where description not in ('1001','1002','1003','1004');


-----------------------
20200113
select count(*) from rec_race where alevelcount = -1;


-----------------------
20200112
drop table ranks_result;
drop table ranks_result_ptn;
drop table ranks_stat;
drop table ranks_stat_daily;
drop table ranks_stat_kumiban;
drop table ranks_stat_monthly;


-----------------------
20200106
select turn || '_' || race.racetype_simple pattern, count(*) cnt
from rec_race
where ymd >= '20120103' and ymd <= '20170629'
order by pattern


select avg(slope_monthly_income) from rank_ext_metric;

select avg(slope_monthly_income) 
from rank_ext_metric met, rank_ext ext
where ext.extkey = met.extkey
  and incomeamt > 0
;

-----------------------
20200105
copy (
select
  'exp03' exp, 
  ( ((indev_hitamt_rate) + (plus_month_rate) + (betdays_rate) + (slope_monthly_income)) / 4 )::numeric(7,2) score,
  *
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income, 
	  ext.*
	from
	  rank_model mod, rank_ext ext, rank_ext_metric met
	where ext.description = mod.description
	  and ext.extkey = met.extkey
	  and ext.hitrate > 0 and ext.hitrate < 1 
	  -- and ext.incomeamt > 0
	  and ext.betcnt > 200
	  -- and plus_month_rate > 0.5
	  -- and slope_monthly_income > 0
) tmp
) to 'F:\Dev\experiment\expr03\dbbackup\stat_tables\score_exp03.tsv' csv delimiter E'\t' header
; 



-- 모델별 rank1,2,3적중율에  모두 해당되는 레이스(cnt=3) 정보테이블
create table as rank123
select 
  ymd, jyocd, raceno, count(*) cnt
from rank_result res, rank1, rank2, rank3
where res.ymd >= '20190101' and res.ymd <= '20190630'
  and (
       (res.description = rank1.description and res.pattern = rank1.pattern)
    or (res.description = rank2.description and res.pattern = rank2.pattern)
    or (res.description = rank3.description and res.pattern = rank3.pattern)
  )
group by ymd, jyocd, raceno
order by ymd, jyocd, raceno
;
 

-- 모델별 rank1,2,3적중율 테이블 작성
drop table rank3;
create table rank3 as 
select
 * 
from (
select
  description, pattern, (hity + hitn) betcnt, hity, hitn, (hity::float / (hity+hitn)::float)::numeric(7,2) hitrate
from (
	select
	  description, pattern,
	  sum(case when substring(predict_rank123 from 3 for 1) = substring(result_rank123 from 3 for 1) then 1 else 0 end) hity,
	  sum(case when substring(predict_rank123 from 3 for 1) <> substring(result_rank123 from 3 for 1) then 1 else 0 end) hitn
	from rank_result
	where ymd >= '20170101' and ymd <= '20181231'
	group by description, pattern
) tmp
) tmp2
-- where hitrate > 0.7  -- rank1
-- where hitrate > 0.25 -- rank2
where hitrate > 0.20    -- rank3
order by hitrate desc;

-----------------------
20200103
truncate rank_filter;
insert into rank_filter
select 
  description, bettype, bet_kumiban, pattern, ranktype, waku,
  indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income,
  ( ((indev_hitamt_rate*1.5) + (plus_month_rate) + (betdays_rate) + (slope_monthly_income)) / 4 )::numeric(7,2) score
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  ext.*,
	  indev_hitamt_rate, plus_month_rate, betdays_rate, slope_monthly_income
	from
	  rank_model mod, rank_ext ext, rank_ext_metric met
	where ext.description = mod.description
	  and ext.extkey = met.extkey
	  and ext.hitrate > 0 and ext.hitrate < 1 
	  and ext.incomeamt > 0
	  and ext.betcnt > 200
	  and plus_month_rate > 0.5
	  and slope_monthly_income > 0
) tmp
;

copy (
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank_ext_score.tsv' csv delimiter E'\t' header


-----------------------
20200101
delete from rank_result where description in ('0083','0084','0085');
delete from rank_result_hity where description in ('0083','0084','0085');
delete from rank_result_form where description in ('0083','0084','0085');
delete from rank_result_form_hity where description in ('0083','0084','0085');


-- 모델별분포 전체
select stat.description, 
(substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 15)) id,
 sum(betamt) betamt, sum(hitamt) hitamt, sum(incomeamt) incomeamt, avg(hitrate)::numeric(7,2) avg_hitrate, avg(incomerate)::numeric(7,2) avg_incomerate
from rank_ext stat, rank_model mod
where stat.description = mod.description
group by  stat.description, id
order by stat.description, id;
-----------------------
20191231
select date_part('month', age('20190630'::date, '20170101'::date));
select cast('20190731'::date - '20170101'::date as int) / 30;
select count(distinct substring(ymd from 1 for 6)) from rec_race;

select (sum(nirentanprize) - sum(tansyoprize))/sum(1) from rec_race;

	select 
	  description, bettype, bet_kumiban, pattern, '', substring(predict_rank123 from 2 for 2) waku, 
	  sum(1) betcnt,
	  sum(hity) hitcnt,
	  sum(betamt) betamt,
	  sum(hitamt) hitamt,
	  sum(hitamt) - sum(betamt) incomeamt, 
	  (sum(hity)::float / sum(1)::float)::numeric(7,2) hitrate,
	  (sum(hitamt)::float / sum(betamt)::float)::numeric(7,2) incomerate,
	  count(distinct substring(ymd from 1 for 6)) bet_months,
	  count(distinct ymd) bet_days,
	  description || bettype || bet_kumiban || pattern || '' || substring(predict_rank123 from 2 for 2) keys
	from rank_result
	where description = '0003'
	  and ymd >= '20170101' and ymd <= '20170103'
	  and bettype = '1T'
	group by description, bettype, bet_kumiban, pattern, waku
	order by description, bettype, bet_kumiban, pattern, waku;

-----------------------
20191230
drop table rank_ext;
drop table rank_ext_hit;
drop table rank_ext_monthly;
drop table rank_ext_daily;
drop table rank_ext_metric;
drop table rank_ext_metric_monthly;



truncate rank_stat;
truncate rank_stat_metric;
truncate rank_stat_kumiban;
truncate rank_stat_monthly;
truncate rank_stat_daily;

-----------------------
20191228
select min(ymd) from rank_result;
select count(*) from rank_result;

select count(*) from rank_result where description = '0003';
-----------------------
20191226
select count(*) from rank_ext;

-----------------------
20191224
copy (
select 
  ( ((daysrate) * (stability) * (plus_days_rate)) / 3 )::numeric(7,2) score,
  *
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  (total_days::float / 730)::numeric(7,2) daysrate,
	  ( stat.incomeamt::float / met.max_hitamt::float)::numeric(7,2) stability,
	  met.plus_month_rate, met.plus_days_rate,
	  stat.*,
	  metm.avg_hitrate month_avg_hitrate, metm.dev_hitrate month_dev_hitrate, metm.avg_incomerate month_avg_incomerate, metm.min_incomerate month_min_incomerate, 
	  metm.max_incomerate month_max_incomerate, metm.dev_incomerate month_dev_incomerate,
	  met.avg_hitamt, met.dev_hitamt, met.max_hitamt, met.total_month, met.total_days
	from
	  rank_model mod, rank_ext stat, rank_ext_metric met, rank_ext_metric_monthly metm
	where stat.description = mod.description
	  and stat.description = met.description and stat.bettype = met.bettype and stat.bet_kumiban = met.bet_kumiban and stat.pattern = met.pattern and stat.waku = met.waku
	  and stat.description = metm.description and stat.bettype = metm.bettype and stat.bet_kumiban = metm.bet_kumiban and stat.pattern = metm.pattern and stat.waku = metm.waku
	  and stat.hitrate > 0 and stat.hitrate < 1 
	  and stat.incomeamt > 0
	  and plus_month_rate > 0.5
	  -- and met.total_days > 100
	  -- and met.max_hitamt < 5000
) tmp
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank_ext_score.tsv' csv delimiter E'\t' header
;


-----------------------
20191223
select count(*) from rank_ext_monthly;
select count(*) from rank_ext_monthly;
-----------------------
20191223
delete from rank_result_form where ranktype = 'form2t2_23';
select * from rank_ext where ranktype = 'form2t2_23';


-----------------------
20191222
-- rank_ext출력
copy (
select 
  *
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  met.plus_month_rate, met.plus_days_rate,
	  stat.*,
	  met.avg_hitamt, met.dev_hitamt, met.max_hitamt, met.total_month, met.total_days
	from
	  rank_model mod, rank_ext stat, rank_ext_metric met
	where stat.description = mod.description
	  and stat.description = met.description and stat.bettype = met.bettype and stat.bet_kumiban = met.bet_kumiban and stat.pattern = met.pattern and stat.waku = met.waku
	  and stat.hitrate > 0 and stat.hitrate < 1 
	  -- and stat.incomerate > 1
	  -- and met.total_days > 100
	  and met.max_hitamt < 5000
) tmp
where
  (incomeamt::float / max_hitamt::float) > 2.5
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank_ext.tsv' csv delimiter E'\t' header
;




select
  ymd, sime, jyocd, raceno, description, pattern,
  '3T' bettype, predict_rank123, result_rank123, 
  (bet_kumiban || '=') bet_kumiban,
  bet_odds, bet_oddsrank, 
  (result_kumiban || '=') result_kumiban,
  result_odds, result_oddsrank,
  sanrentanprize result_amt,
  (case when substring(predict_rank123 from 1 for 2) = substring(result_rank123 from 1 for 2) then 1 else 0 end) hity,
  (case when substring(predict_rank123 from 1 for 2) = substring(result_rank123 from 1 for 2) then 0 else 4 end) hitn,
  400 betamt,
  (case when substring(predict_rank123 from 1 for 2) = substring(result_rank123 from 1 for 2) then sanrentanprize else 0 end) hitamt,
  '' duplicate
from
(
	select 
	  res.*,
	  race.sanrentanprize
	from rank_result res, rec_race race
	where res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
	  and bettype = '2T'
	  and res.ymd >= '20170801' and res.ymd <= '20170801'
) result
order by ymd, sime;


drop table rank2_waku;
drop table rank2_waku_daily;
drop table rank2_waku_monthly;
drop table rank2_waku_hit;
drop table rank2_waku_metric;

select count(*) from rank_ext;
select count(*) from rank_ext_metric;


-----------------------
20191221
-- rank2_stat출력
copy (
select 
  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
  stat.*,
  met.plus_month_rate, met.plus_days_rate,
  met.avg_hitamt, met.dev_hitamt, met.max_hitamt, met.total_month, met.total_days
from
  rank_model mod, rank_stat stat, rank_stat_metric met
where stat.description = mod.description
  and stat.description = met.description and stat.bettype = met.bettype and stat.bet_kumiban = met.bet_kumiban and stat.pattern = met.pattern
  and stat.hitrate > 0 and stat.hitrate < 1 
order by mod.no
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank_stat.tsv' csv delimiter E'\t' header
;
-- rank2_waku출력
copy (
select 
  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
  stat.*,
  met.plus_month_rate, met.plus_days_rate,
  met.avg_hitamt, met.dev_hitamt, met.max_hitamt, met.total_month, met.total_days
from
  rank_model mod, rank2_waku stat, rank2_waku_metric met
where stat.description = mod.description
  and stat.description = met.description and stat.bettype = met.bettype and stat.bet_kumiban = met.bet_kumiban and stat.waku = met.waku
  and stat.hitrate > 0 and stat.hitrate < 1 
order by mod.no
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank2_waku.tsv' csv delimiter E'\t' header
;

-- rank_ext출력
copy (
select 
  *
from (
	select 
	  mod.no, mod.pattern_name, mod.attributes, mod.algorithm, 
	  (substring(mod.algorithm from 1 for 1) || '_' || substring(mod.attributes from 1 for 1) || '_' || substring(mod.pattern_name from 1 for 10)) id,
	  stat.*,
	  met.plus_month_rate, met.plus_days_rate,
	  met.avg_hitamt, met.dev_hitamt, met.max_hitamt, met.total_month, met.total_days
	from
	  rank_model mod, rank_ext stat, rank_ext_metric met
	where stat.description = mod.description
	  and stat.description = met.description and stat.bettype = met.bettype and stat.bet_kumiban = met.bet_kumiban and stat.pattern = met.pattern and stat.waku = met.waku
	  and stat.hitrate > 0 and stat.hitrate < 1 
	  and stat.incomerate > 1.05
	  and stat.daily_betamt > 20
) tmp
where
  (max_hitamt::float / incomeamt::float) < 0.5
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rankwaku\rank_ext.tsv' csv delimiter E'\t' header
;

drop table rank_stat_bettype;
drop table rank_stat_pattern;
drop table ranks_stat_bettype;
drop table ranks_stat_pattern;


-----------------------
20191220
drop function analyze_proc_odds(paramdescription character varying, parampattern1 character varying, parampattern2 character varying, paramfromymd character varying, paramtoymd character varying, paramoddsmin numeric, paramoddsmax numeric);
drop function analyze_proc(paramdescription character varying, parampattern1 character varying, parampattern2 character varying, paramfromymd character varying, paramtoymd character varying, paramorderby character varying);
drop table st_ptn_final                   ;
drop table stat_ml_kumiban_analyze        ;
drop table stat_ml_kumiban_linear_analyze ;
drop table stat_ml_kumiban_metric_analyze ;
drop table stat_ml_ptn_analyze            ;
drop table stat_ml_ptn_cnt                ;
drop table stat_ml_ptn_filtered           ;
drop table stat_ml_ptn_final              ;
drop table stat_ml_ptn_final_alltype      ;
drop table stat_ml_ptn_linear             ;
drop table stat_ml_ptn_linear_analyze     ;
drop table stat_ml_ptn_metric             ;
drop table stat_ml_ptn_metric_analyze     ;
drop table stat_ml_ptn_totally            ;
drop table stat_ml_ptn_totally_stmp       ;
drop table stat_ml_result                 ;
drop table stat_ml_result_ptn             ;
drop table stat_ml_result_ptn_analyze     ;
drop table stat_ml_result_rgr             ;
drop table stat_ml_result_weka            ;
drop table stat_ml_result_wekaptn         ;
drop table stmp_analyze_result            ;
drop table stmp_stat_ml_ptn_final         ;
drop table stmp_stat_ml_ptn_final_2018    ;
drop table tmp_final                      ;
drop table tmp_st_ptn_final               ;
drop table tmp_stat_ml_result             ;

select distinct description from rank_result order by description;
select distinct description from rank_stat order by description;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0015.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0016.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0017.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0020.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0021.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0022.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0041.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0042.tsv' csv delimiter E'\t' header;

copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0049.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0062.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0063.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0069.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0070.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0071.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0072.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0073.tsv' csv delimiter E'\t' header;

copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0079.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0080.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0081.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0082.tsv' csv delimiter E'\t' header;

copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0075.tsv' csv delimiter E'\t' header;
copy rank_result from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0077.tsv' csv delimiter E'\t' header;


-----------------------
20191219
delete from rank_result_entry where description in ('0081', '0082');
truncate rank_result;
insert into rank_result select * from rank_result_entry;
-- 

select
from rank_result res, rank_stat stat
where res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and stat.bettype = '1T' and stat.bet_kumiban = '1'
  
-- rank_result_rankrate 임포트
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0015.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0016.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0017.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0020.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0021.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0022.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0041.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0042.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0049.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0062.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0063.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0069.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0070.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0071.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0072.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0073.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0075.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0077.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0079.tsv' csv delimiter E'\t' header;
copy rank_result_rankrate from 'F:\Dev\experiment\expr02\dbbackup\rank_result\rank_result_0080.tsv' csv delimiter E'\t' header;

-----------------------
20191218
	select
	  res.*
	from rank_result_entry res,
	  (
		select 
		 *
		from rank_stat stat
		where bettype = '1T' and bet_kumiban = '1' 
		  and hitrate < 1 and hitrate > 0.7 
		  and daily_betamt > 100 
		order by description, pattern
	  ) stat
	where res.ymd >= '20180101' and res.ymd <= '20190731'
	  and stat.description = res.description and stat.pattern = res.pattern
	  and res.bettype = '2T' and res.bet_kumiban like '1%'
	order by ymd, sime
	;

copy (
select
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm, stat.*
from rank_stat stat, rank_model mod
where stat.description = mod.description
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\rank_stat_20191218.tsv' csv delimiter E'\t' header;


create table rank_result_tmp as select * from rank_result where description in ('0079','0080','0081','0082');
copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate,
  oddb.rank123 oddsrank123, oddb.rank213 oddsrank213 
from
  rank_result_tmp res left join oddsbefore_trend oddb on (res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno),
  rank_model mod, rank_metric met, rank_stat stat
where res.description = mod.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  -- and res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno
  and res.ymd >= '20180101' and res.ymd <= '20190731'
  and res.bettype = '1T' and res.bet_kumiban = '1'
  and stat.hitrate > 0 and stat.hitrate < 1 
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\1T\rank_result_1T-1_2018-19_3depth.tsv' csv delimiter E'\t' header
;

select distinct no from rank_model order by no;
delete from  rank_result_bak where description in ('0075','0077','0079','0080','0081','0082');
insert into rank_result_bak select * from rank_result where description in ('0075','0077','0079','0080','0081','0082');
truncate rank_result;
insert into rank_result select * from rank_result_bak;

select distinct description from rank_stat order by description;
create table rank_stat_kumiban_entry as select * from rank_stat_kumiban;
truncate rank_stat_kumiban;
insert into rank_stat_kumiban select * from rank_stat_kumiban_bak;
drop table rank_stat_kumiban_bak;

-----------------------
20191217
copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate,
  oddb.rank123 oddsrank123, oddb.rank213 oddsrank213 
from
  rank_model mod, rank_result_entry res, rank_metric_bak met, rank_stat_bak stat, oddsbefore_trend oddb
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno
  and res.ymd >= '20190101' and res.ymd <= '20190731'
  and res.bettype = '2T' and res.bet_kumiban = '12'
  and stat.hitrate > 0 and stat.hitrate < 1 
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\1T\rank_result_2T-12_2019.tsv' csv delimiter E'\t' header
;

-----------------------
20191216
truncate ranks_result;
truncate ranks_stat;
truncate ranks_metric;
truncate ranks_stat_kumiban;
truncate ranks_stat_monthly;
truncate ranks_stat_pattern;
truncate ranks_stat_daily;

insert into rank_result_entry select * from rank_result where description = '0076';
insert into rank_result_entry select * from rank_result where description = '0074';
insert into rank_stat_bak select * from rank_stat where description in ('0074','0076');
insert into rank_metric_bak select * from rank_metric where description in ('0074','0076');
insert into rank_stat_kumiban_bak select * from rank_stat_kumiban where description in ('0074','0076');
insert into rank_stat_monthly_bak select * from rank_stat_monthly where description in ('0074','0076');
insert into rank_stat_daily_bak select * from rank_stat_daily where description in ('0074','0076');

copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate
from
  rank_model mod, rank_result_entry res, rank_metric_bak met, rank_stat_bak stat
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd >= '20180101' and res.ymd <= '20190731'
  and res.bettype = '1T' and res.bet_kumiban = '2'
  and stat.hitrate > 0 and stat.hitrate < 1 and stat.betamt > 10000
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\1T\rank_result_1T-2_2018-2019.tsv' csv delimiter E'\t' header
;


-----------------------
20191215
create table rank_stat_bak as select * from rank_stat;
create table rank_metric_bak as select * from rank_metric;
create table rank_stat_kumiban_bak as select * from rank_stat_kumiban;
create table rank_stat_monthly_bak as select * from rank_stat_monthly;
create table rank_stat_daily_bak as select * from rank_stat_daily;

truncate rank_stat;
truncate rank_metric;
truncate rank_stat_kumiban;
truncate rank_stat_monthly;
truncate rank_stat_daily;


copy (select * from rank_model) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_model.tsv' csv delimiter E'\t' header; 
copy (select * from rank_result_entry) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_result_entry.tsv' csv delimiter E'\t' header; 
copy (select * from rank_stat) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_stat.tsv' csv delimiter E'\t' header; 
copy (select * from rank_metric) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_metric.tsv' csv delimiter E'\t' header; 
copy (select * from rank_stat_kumiban) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_stat_kumiban.tsv' csv delimiter E'\t' header; 
copy (select * from rank_stat_monthly) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_stat_monthly.tsv' csv delimiter E'\t' header; 
copy (select * from rank_stat_daily) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191215\rank_stat_daily.tsv' csv delimiter E'\t' header; 

-- 직전옺즈포함 (2019)
copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.hity, res.hitn, res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  -- stat.betcnt stat_betcnt, stat.hitcnt stat_hitcnt, stat.betamt stat_betamt, stat.hitamt stat_hitamt, 
  -- stat.incomeamt stat_incomeamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  -- stat.daily_betamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate,
  oddb.rank123 oddsrank123, oddb.rank213 oddsrank213 
from
  rank_model mod, rank_result_entry res, rank_metric_bak met, rank_stat_bak stat, oddsbefore_trend oddb
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno
  and res.ymd >= '20190101' and res.ymd <= '20190731'
  and res.bettype = '2T' and res.bet_kumiban = '12'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\1T\rank_result_2T-12_2019.tsv' csv delimiter E'\t' header
;

-- 직전옺즈제외(2018-2019)
copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  met.plus_month_rate, met.plus_days_rate
  -- stat.betcnt stat_betcnt, stat.hitcnt stat_hitcnt, stat.betamt stat_betamt, stat.hitamt stat_hitamt, 
  -- stat.incomeamt stat_incomeamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  --stat.daily_betamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
from
  rank_model mod, rank_result_entry res, rank_metric_bak met, rank_stat_bak stat
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd >= '20180101' and res.ymd <= '20190731'
  and res.bettype = '1T' and res.bet_kumiban = '2'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\1T\rank_result_1T-1_2018-2019.tsv' csv delimiter E'\t' header
;




copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  stat.bettype, stat.bet_kumiban, stat.pattern, stat.betcnt, stat.hitcnt, stat.betamt, stat.hitamt, stat.incomeamt, 
  stat.hitrate, stat.incomerate, stat.daily_betamt, stat.daily_hitamt, stat.daily_incomeamt, 
  met.plus_month_rate, met.plus_days_rate, met.plus_month, met.plus_days
from
  rank_model mod, rank_metric met, rank_stat stat
where stat.description = mod.description
  and stat.description = met.description and stat.bettype = met.bettype and stat.pattern = met.pattern and stat.bet_kumiban = met.bet_kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\kumiban\rank_stat_ext_2018-2019.tsv' csv delimiter E'\t' header;

drop table rank_result_nodupl;
drop table rank_stat_nodupl;
drop table rank_metric_nodupl;
drop table rank_stat_kumiban_nodupl;

copy (select * from rank_result where duplicate = '') to 'F:\Dev\experiment\expr02\dbbackup\rank_result_nodupl_20191215.tsv' csv delimiter E'\t' header
copy (select * from rank_stat) to 'F:\Dev\experiment\expr02\dbbackup\rank_stat_nodupl__20191215.tsv' csv delimiter E'\t' header;
copy (select * from rank_metric) to 'F:\Dev\experiment\expr02\dbbackup\rank_metric_nodupl_20191215.tsv' csv delimiter E'\t' header;
copy (select * from rank_stat_kumiban_nodupl) to 'F:\Dev\experiment\expr02\dbbackup\rank_stat_kumiban_nodupl_20191215.tsv' csv dedrop limiter E'\t' header;
copy (select * from rank_stat) to 'F:\Dev\experiment\expr02\dbbackup\rank_stat_20191215.tsv' csv delimiter E'\t' header;
copy (select * from rank_metric) to 'F:\Dev\experiment\expr02\dbbackup\rank_metric_20191215.tsv' csv delimiter E'\t' header;


insert into rank_result select * from rank_result_duplicate;

create table rank_stat_kumiban_nodupl as select * from rank_stat_kumiban;
create table rank_metric_nodupl as select * from rank_metric;
create table rank_stat_nodupl as select * from rank_stat;
create table rank_result_nodupl as select * from rank_result;

-- rank_stat 직전옺즈포함 (2019) 중복포함
copy (
select 
  mod.no, mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  stat.betcnt stat_betcnt, stat.hitcnt stat_hitcnt, stat.betamt stat_betamt, stat.hitamt stat_hitamt, 
  stat.incomeamt stat_incomeamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate
from
  rank_model mod, rank_metric met, rank_stat stat
where stat.description = mod.description
  and stat.description = met.description and stat.bettype = met.bettype and stat.pattern = met.pattern and stat.bet_kumiban = met.bet_kumiban
  and mod.attributes like 'entry'
) to 'F:\Dev\experiment\expr02\dbbackup\rank_result_.tsv' csv delimiter E'\t' header
;


-----------------------
20191214
select count(*) from rank_result where bettype='1T' and bet_kumiban = '1';
select count(*) from rank_stat where bettype='1T' and bet_kumiban = '1';

select count(distinct (raceno || timezone)) from  rec_race where alevelcount <> -1;
select count(distinct (turn || timezone || fixedentrance)) from rec_race;
select count(distinct (turn || raceno)) from rec_race;
select timezone, count(*) from rec_race group by timezone;
select femalecount, count(*) from rec_race group by femalecount;
select fixedentrance, count(*) from rec_race group by fixedentrance;
select substring(sime from 1 for 2) simehh, count(*) from rec_race group by simehh;


-----------------------
20191213
copy (select * from rank_result_bak_20191202) to 'F:\Dev\experiment\expr02\dbbackup\rank_result_noduplicate.bin' binary;
copy (select * from rank_model) to 'F:\Dev\experiment\expr02\dbbackup\rank_model.bin' binary;
copy (select * from rank_stat) to 'F:\Dev\experiment\expr02\dbbackup\rank_stat.bin' binary;

-----------------------
20191210
insert into rank_result select * from rank_result_duplicate;


copy (
select 
  mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.hity, res.hitn, res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  -- stat.betcnt stat_betcnt, stat.hitcnt stat_hitcnt, stat.betamt stat_betamt, stat.hitamt stat_hitamt, 
  stat.incomeamt stat_incomeamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  met.plus_month_rate, met.plus_days_rate,
  -- oddb.rank1 soddsrank1, oddb.rank2 soddsrank2, oddb.rank3 soddsrank3, oddb.rank4 soddsrank4, oddb.rank5 soddsrank5, oddb.rank6 soddsrank6, 
  oddb.rank123 oddsrank123, oddb.rank213 oddsrank213, oddb.rank314 oddsrank314, oddb.rank412 oddsrank412, oddb.rank512 oddsrank512, oddb.rank612 oddsrank612,
  racer.entry[1] entry1, racer.entry[2] entry2
from
  rank_model mod, rank_result res, rank_metric met, rank_stat stat, oddsbefore_trend oddb, rec_race race, rec_racer_arr racer
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.ymd = racer.ymd and res.jyocd = racer.jyocd and res.raceno = racer.raceno
  and res.ymd >= '20190101' and res.ymd <= '20190731'
  and mod.attributes like 'entry'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191210\rank_result_ext_20190101-20190731_entry_odds_metric.tsv' csv delimiter E'\t' header
;

-----------------------
20191208
truncate rank_result;
truncate rank_stat;
truncate rank_stat_daily;
truncate rank_stat_monthly;
truncate rank_stat_kumiban;
truncate rank_stat_bettype;
truncate rank_stat_pattern;
truncate rank_metric;


insert into rank_result select * from rank_result_bak_20191202;

copy (
select 
  mod.description, mod.pattern_name, mod.attributes, mod.algorithm,
  res.ymd, res.sime, res.jyocd, res.raceno, res.pattern, res.bettype, res.predict_rank123 predict123, res.result_rank123 result123,
  res.bet_kumiban, res.bet_odds, res.bet_oddsrank, res.result_kumiban, res.result_odds, res.result_oddsrank, 
  res.hity, res.hitn, res.betamt, res.hitamt, (res.hitamt - res.betamt) incomeamt,
  stat.betcnt stat_betcnt, stat.hitcnt stat_hitcnt, stat.betamt stat_betamt, stat.hitamt stat_hitamt, stat.incomeamt stat_incomeamt, stat.hitrate stat_hitrate, stat.incomerate stat_incomerate,
  oddb.odds1 sodds1, oddb.rank1 soddsrank1, oddb.odds2 sodds2, oddb.rank2 soddsrank2, 
  oddb.odds123 odds123, oddb.rank123 oddsrank123, oddb.odds213 odds213, oddb.rank213 oddsrank213
from
  rank_model mod, rank_result res, rank_metric met, rank_stat stat, oddsbefore_trend oddb, rec_race race, rec_racer_arr racer
where mod.description = res.description
  and res.description = met.description and res.bettype = met.bettype and res.pattern = met.pattern and res.bet_kumiban = met.bet_kumiban
  and res.description = stat.description and res.bettype = stat.bettype and res.pattern = stat.pattern and res.bet_kumiban = stat.bet_kumiban
  and res.ymd = oddb.ymd and res.jyocd = oddb.jyocd and res.raceno = oddb.raceno
  and res.ymd = race.ymd and res.jyocd = race.jyocd and res.raceno = race.raceno
  and res.ymd = racer.ymd and res.jyocd = racer.jyocd and res.raceno = racer.raceno
  and res.ymd >= '20190101' and res.ymd <= '20190731'
  and mod.attributes like 'ranknationrate%'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191210\rank_result_ext_20190101-20190731_ranknationrate.tsv' csv delimiter E'\t' header
;

  

;
-----------------------
20191203
-- bettype/pattern
select
from rank_stat stat, rank_model model, rank_

-----------------------
20191202
entry속성에 집중하기로 한다.
insert into rank_result_bak_20191202
select * from rank_result;

select distinct description from rank_result where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_result_duplicate where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_result where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat_monthly where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat_daily where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat_kumiban where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat_bettype where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_stat_pattern where description not in (select description from rank_model where attributes like '%entry%');
delete from rank_metric where description not in (select description from rank_model where attributes like '%entry%');

delete from ranks_result where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat_monthly where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat_daily where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat_kumiban where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat_bettype where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_stat_pattern where description not in (select description from rank_model where attributes like '%entry%');
delete from ranks_metric where description not in (select description from rank_model where attributes like '%entry%');
select count(*) from rank_result_duplicate;



-----------------------
201911201
	select 
	  paramCondition,
	  model.pattern_name,
	  model.attributes,
	  stat.*, 
	  metric.plus_month_rate,
	  metric.plus_days_rate,
	  total_month, plus_month, total_days, plus_days
	from rank_stat stat, rank_metric metric, rank_model model
	where stat.description = metric.description and stat.bettype = metric.bettype and stat.pattern = metric.pattern and stat.bet_kumiban = metric.bet_kumiban
	  and stat.description = model.description
	  and incomerate >= 1
	  and daily_betamt >=  50
	  and daily_incomeamt > 5
	  and plus_month_rate >= 0.5
	  and hitrate >= plus_days_rate
	order by bettype, bet_kumiban
;



select description, min(ymd), max(ymd) from rank_result group by description order by description;
select count(*) from rank_result_duplicate;
select count(*) from rank_result;

select description, count(*) from rank_stat group by description order by description;

-----------------------
20191129
select bettype, sanrentanno, count(*) cnt from rec_race
group by bettype, sanrentanno
order by bettype, cnt;


copy( select * from rank_result where description = '0013' and bettype = '1T' and bet_kumiban = '1' and pattern = '1_B1' and (ymd <= '20190720')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\csv_analyze\rank_result_13_1T_1_1_B1.tsv' csv delimiter E'\t' header; 


-----------------------
20191128
-- 필터 로직 템플릿

select
*
from
(	
	select 
	  ROW_NUMBER () OVER (PARTITION BY id 
	  ORDER BY std desc)  as rownum,
	  tmp.*
	from  
	(
		select
		  (stat.bettype || '_' || stat.bet_kumiban) id,
		 --  ((hitrate * incomerate * (betcnt / 1000) * (incomeamt / 1000) * plus_month_rate * plus_days_rate ) / 6) std, 
		 ((incomeamt)) std,
		  stat.* 
		from rank_stat stat, rank_metric metric, rank_model model
		where stat.description = metric.description and stat.bettype = metric.bettype and stat.pattern = metric.pattern and stat.bet_kumiban = metric.bet_kumiban
		  and stat.description = model.description
		order by std desc
	) tmp
) tbl
where tbl.rownum <= 10;

-----------------------
20191127

insert into rank_model values('0024','nopattern','nationlocalrate','bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0025','jyocd','nationlocalrate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0026','turn','nationlocalrate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0027','racetype','nationlocalrate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0028','raceno','nationlocalrate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0029','nopattern','entry','bayes',1825,1825,'1and2and3','20180101~20191020');
insert into rank_model values('0030','nopattern','ym','bayes',1825,1825,'1and2and3','20180101~20191020');
insert into rank_model values('0031','nopattern','entry','J45',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0032','turn','entry','J45',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0033','nopattern','nation3rate','J45',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0034','turn','nation3rate','J45',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0035','nopattern','entry','filter_bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0036','turn','entry','filter_bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0037','nopattern','nation2rate','bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0038','turn','nation2rate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0039','nopattern','nationrate','bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0040','turn','nationrate','bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0041','nopattern','ranknationrate','filter_bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0042','turn','ranknationrate','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0043','nopattern','entry','filter_bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0044','turn','entry','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0045','nopattern','narion3rate','filter_bayes',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0046','turn','narion3rate','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0047','jyocd','entry','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0048','jyocd','narion3rate','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0049','jyocd','ranknationrate','filter_bayes',1460,30,'1and2and3','20180101~20191020');
insert into rank_model values('0050','nopattern','ranknationrate','J48',730,30,'1and2and3','20180101~20191020');
insert into rank_model values('0051','turn','ranknationrate','J48',1460,360,'1and2and3','20180101~20191020');
insert into rank_model values('0052','jyocd','ranknationrate','J48',1825,730,'1and2and3','20180101~20191020');

-----------------------
20191126
select local3rate1 from rec_race where ymd = '20130101';

select * from rank_stat_kumiban 
where betcnt > 300 and incomeamt > 0
order by bettype, bet_kumiban, description;

  select 
    'nopattern' pattern, 
    race.ymd, 
    lpad(nation3winingrate1::int::text, 2,'0') || lpad(local3winingrate1::int::text, 2, '0'), 
    lpad(nation3winingrate2::int::text, 2,'0') || lpad(local3winingrate2::int::text, 2, '0'), 
    lpad(nation3winingrate3::int::text, 2,'0') || lpad(local3winingrate3::int::text, 2, '0'), 
    lpad(nation3winingrate4::int::text, 2,'0') || lpad(local3winingrate4::int::text, 2, '0'), 
    lpad(nation3winingrate5::int::text, 2,'0') || lpad(local3winingrate5::int::text, 2, '0'), 
    lpad(nation3winingrate6::int::text, 2,'0') || lpad(local3winingrate6::int::text, 2, '0'), 
	substring(sanrentanno from 1 for 1) rank1, 
	substring(sanrentanno from 2 for 1) rank2, 
	substring(sanrentanno from 3 for 1) rank3 
  from rec_race race, rec_race_waku2 waku2
  where race.ymd >= '20180101' and race.ymd <= '20191020' 
    and sanrentanno not in ('特払','不成立','発売無') 
    and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno 
    order by pattern, race.ymd, race.sime  


select * from rank_result where description = '0006' and ymd > '20190201';

-----------------------
20191122
select
  daily.description description,
  daily.bettype bettype, 
  daily.pattern pattern, 
  daily.bet_kumiban bet_kumiban,
  (sum((case when monthly.incomeamt >= 0 then 1 else 0 end))::float / count(monthly.incomeamt)::float)::numeric(7,2) plus_month_rate  -- 흑자월수 비율
  -- sum((case when daily.incomeamt >= 0 then 1 else 0 end)) / count(daily.incomeamt) plus_days_rate,  -- 흑자일수 비율
  -- sum((case when monthly.incomeamt >= 0 then 1 else 0 end)) plus_month, -- 흑자월수
  -- sum((case when monthly.incomeamt < 0 then 1 else 0 end)) minus_month, -- 적자월수
  -- sum((case when daily.incomeamt >= 0 then 1 else 0 end)) plus_days, -- 흑자일수
  -- sum((case when daily.incomeamt < 0 then 1 else 0 end)) minus_days -- 적자일수
from rank_stat_daily daily, rank_stat_monthly monthly
where daily.description = monthly.description 
  and daily.bettype = monthly.bettype 
  and daily.pattern = monthly.pattern 
  and daily.bet_kumiban = monthly.bet_kumiban
  and daily.description = '0012'
group by daily.description, daily.bettype, daily.bet_kumiban, daily.pattern
order by description, bettype, bet_kumiban, pattern
;
insert into rank_metric
select
  daily.description description,
  daily.bettype bettype, 
  daily.pattern pattern, 
  daily.bet_kumiban bet_kumiban,
  (monthly.plus_cnt::float / monthly.total_cnt::float)::numeric(7,2) plus_month_rate, -- 흑자월수 비율
  (daily.plus_cnt::float / daily.total_cnt::float)::numeric(7,2) plus_days_rate,  -- 흑자일수 비율
  monthly.total_cnt total_month, -- 총월수
  monthly.plus_cnt plus_month,  -- 흑자월수
  monthly.minus_cnt minus_month,  -- 적자월수
  daily.total_cnt total_days, -- 총일수
  daily.plus_cnt plus_days,  -- 흑자일수
  daily.minus_cnt minus_days  -- 적자일수
from 
(
	select
	  description,
	  bettype, 
	  pattern, 
	  bet_kumiban,
	  sum((case when incomeamt >= 0 then 1 else 0 end)) plus_cnt, -- 흑자일수
	  sum((case when incomeamt < 0 then 1 else 0 end)) minus_cnt, -- 적자일수
	  sum(1) total_cnt -- 총일수
	from rank_stat_daily
	where description = '0012'
	group by description, bettype, bet_kumiban, pattern
	order by description, bettype, bet_kumiban, pattern
) daily, 
(
	select
	  description,
	  bettype, 
	  pattern, 
	  bet_kumiban,
	  sum((case when incomeamt >= 0 then 1 else 0 end)) plus_cnt, -- 흑자월수
	  sum((case when incomeamt < 0 then 1 else 0 end)) minus_cnt, -- 적자월수
	  sum(1) total_cnt -- 총월수
	from rank_stat_monthly
	where description = '0012'
	group by description, bettype, bet_kumiban, pattern
	order by description, bettype, bet_kumiban, pattern
) monthly
where daily.description = monthly.description 
  and daily.bettype = monthly.bettype 
  and daily.pattern = monthly.pattern 
  and daily.bet_kumiban = monthly.bet_kumiban
order by description, bettype, bet_kumiban, pattern
;


-----------------------
20191121

-- 패턴 통계
truncate rank_stat_bettype;
insert into rank_stat_bettype
select 
  description, 
  pattern, 
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, pattern
order by description, pattern;

-- 승식별 통계
truncate rank_stat_bettype;
insert into rank_stat_bettype
select 
  description, 
  bettype, 
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, bettype
order by description, bettype;

-- 구미방별 통계
truncate rank_stat_kumiban;
insert into rank_stat_kumiban
select 
  description, 
  bettype, 
  bet_kumiban,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, bettype, bet_kumiban
order by description, bettype, bet_kumiban;



-- 패턴/승식/구미방별/ 통계
truncate rank_stat;
insert into rank_stat
select 
  description, 
  bettype, 
  pattern, 
  bet_kumiban,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, bettype, pattern, bet_kumiban
order by description, bettype, pattern, bet_kumiban;

-- 패턴/승식/구미방별/월별통계
truncate rank_stat_monthly;
insert into rank_stat_monthly
select 
  description, 
  bettype, 
  pattern, 
  bet_kumiban,
  substring(ymd from 1 for 6) ym,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 30 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 30 as int) daily_hitamt,
  cast( sum(hitamt) / 30 as int) - cast( sum(betamt) / 30 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, bettype, pattern, bet_kumiban, ym
order by description, bettype, pattern, bet_kumiban, ym;

-- 패턴/승식/구미방별/일별통계
truncate rank_stat_daily;
insert into rank_stat_daily
select 
  description, 
  bettype, 
  pattern, 
  bet_kumiban,
  ymd,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 1 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 1 as int) daily_hitamt,
  cast( sum(hitamt) / 1 as int) - cast( sum(betamt) / 1 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
group by description, bettype, pattern, bet_kumiban, ymd
order by description, bettype, pattern, bet_kumiban, ymd;


insert into rank_stat select * from rank_stat_kumiban;

select distinct description from rank_stat_kumiban order by description;

-----------------------
20191118
-- 구미방별 수익성
select 
  description, 
  bettype, 
  bet_kumiban, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  sum(betamt) sum_betamt,
  sum(hitamt) sum_hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( sum(betamt) / 657 as int) daily_avg_betamt, -- 20180101~20191020
  cast( sum(hitamt) / 657 as int) daily_avg_hitamt
from rank_model_result
group by description, bettype, bet_kumiban
order by description, bettype, bet_kumiban
;

-- 패턴별 수익성
select 
  description, 
  bettype, 
  pattern, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  sum(betamt) sum_betamt,
  sum(hitamt) sum_hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( sum(betamt) / 657 as int) daily_avg_betamt, -- 20180101~20191020
  cast( sum(hitamt) / 657 as int) daily_avg_hitamt
from rank_model_result
group by description, bettype, pattern
order by description, bettype, pattern
;

-- 모델/패턴별/구미방별 통계테이블 작성
truncate rank_stat_kumiban;
insert into rank_stat_kumiban
select 
  description, 
  bettype, 
  pattern, 
  bet_kumiban,
  sum(1) betcnt,
  sum(hity) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_result
where ymd >= '20180101' and ymd <= '20190720' 
and description in ('0003')
group by description, bettype, pattern, bet_kumiban
order by description, bettype, pattern, bet_kumiban;

-- 모델 요약 통계테이블
select 
  description, 
  sum(betcnt) betcnt,
  sum(hitcnt) hitcnt,
  sum(betamt) betamt,
  sum(hitamt) hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( cast(sum(hitcnt) as float) / cast(sum(betcnt) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  cast( sum(betamt) / 565 as int) daily_betamt, -- 20180101~20190720
  cast( sum(hitamt) / 565 as int) daily_hitamt,
  cast( sum(hitamt) / 565 as int) - cast( sum(betamt) / 565 as int) daily_incomeamt
from rank_stat_kumiban
where 
  incomerate > 1.2 and
  daily_betamt > 50
group by description
order by description
;

  
-----------------------
20191119
insert into rank_result select * from rank_model_result;
drop table rank_model_result;


-----------------------
20191117
copy (
select * from rank_model_result
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\tmp\20191118\rank_model_result.tsv' csv delimiter E'\t' header;


update rank_model_result set betamt = 100;

-- 랭크모델 구미방별 투표결과의 추이를 확인한다.
select 
  description, 
  bettype, 
  -- substring(predict_rank123 from 1 for 1) rank1, 
  --bet_kumiban, 
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast( sum(betamt) as float) as numeric(7,2)) incomerate,
  sum(betamt) sum_betamt,
  sum(hitamt) sum_hitamt,
  sum(hitamt) - sum(betamt) incomeamt, 
  cast( sum(betamt) / count(distinct ymd) as int) daily_avg_betamt,
  cast( sum(hitamt) / count(distinct ymd) as int) daily_avg_hitamt
from rank_model_result
group by description, bettype --, bet_kumiban
order by description, bettype -- , bet_kumiban
;




select description, count(*) from rank_model_result group by description;

-- 기본데이터 각 구미방별 당첨횟수
select '1T' bettype, tansyono kumiban, count(*) cnt from rec_race where tansyono not in ('特払','不成立','発売無') group by bettype, kumiban order by cnt desc
select '2T' bettype, nirentanno kumiban, count(*) cnt from rec_race where nirentanno not in ('特払','不成立','発売無') group by bettype, kumiban order by cnt desc
select '3T' bettype, sanrentanno kumiban, count(*) cnt from rec_race where sanrentanno not in ('特払','不成立','発売無') group by bettype, kumiban order by cnt desc
;
 123,213,314,412,512,612 


-----------------------
20191112
select * from rec_race where 
-----------------------
20191110
C:/Dev/workspace/Oxygen/pod_boatrace_test/experiment/expr02/make_model_bayesnet.bat C:/Dev/workspace/Oxygen/pod_boatrace_test/experiment/expr02/model_arff/215_rank1.arff C:/Dev/workspace/Oxygen/pod_boatrace_test/experiment/expr02/model_release/215/215_rank1.model C:/Dev/workspace/Oxygen/pod_boatrace_test/experiment/expr02/model_evaluation/215_rank1.eval

select count(distinct ymd) from rec_race_waku2 where nation3winingrate1 <= 0.1 ;


-----------------------
20191106
copy (
select * from rec_racer 
where entry::text like '405%'
order by entry, ymd, jyocd, raceno
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\player_sample.tsv' csv delimiter E'\t' header;


-----------------------
20191026, 20191027
copy (
select 
   -- racer3winingrate1, racer3winingrate2, racer3winingrate3, racer3winingrate4, racer3winingrate5, racer3winingrate6, 
   -- nation2winingrate1, nation2winingrate2, nation2winingrate3, nation2winingrate4, nation2winingrate5, nation2winingrate6, 
   -- entry[1] entry, nation3winingrate1, nation3winingrate2, nation3winingrate3, nation3winingrate4, nation3winingrate5, nation3winingrate6, 
   nation3winingrate1, nation3winingrate2, nation3winingrate3, nation3winingrate4, nation3winingrate5, nation3winingrate6, 
   -- nationwiningrate1, nationwiningrate2, nationwiningrate3, nationwiningrate4, nationwiningrate5, nationwiningrate6, 
   -- entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
	( case substring(sanrentanno from 1 for 1)
	  when '1' then '1' 
	  when '2' then '2' 
	  when '3' then '3' 
	  when '4' then '4' 
	  when '5' then '5' 
	  when '6' then '6' 
	  else 'else' end ) 
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win stat
where race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno 
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno 
  and race.ymd = stat.ymd and race.jyocd = stat.jyocd and race.raceno = stat.raceno 
  and race.ymd >= '20160101' and race.ymd <= '20181231'
  and sanrentanno not in ('特払','不成立','発売無') 
  and race.jyocd = '18'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr02\tmp_arff\rank1_jyocd18_nation3rate_3years.arff' csv
;

select distinct ymd from rec_race where wakulevellist = '';

-----------------------
20191025
-- 특정 속성별 구미방의 적중율, 수익률 , 배당률 통계
select
  tmp1.attr,
  tmp1.tansyono, 
  tmp2.cnt_all, tmp1.cnt_tansyono, 
  cast(cast(tmp1.cnt_tansyono as float) / cast(tmp2.cnt_all as float) as numeric(7,2)) hitrate,
  cast(cast(tmp1.sum_tansyoprize as float) / cast( (tmp2.cnt_all * 100) as float) as numeric(7,2)) incomerate,
  avg_prize, 
  devpop_prize,
  mod_prize,
  cast(cast(tmp1.sum_tansyoprize as float) / cast(tmp2.sum_allprize as float) as numeric(7,2)) prizerate,
  tmp1.sum_tansyoprize, 
  tmp2.sum_allprize
from
	(select 
	  turn attr, 
	  tansyono, count(tansyono) cnt_tansyono, sum(tansyoprize) sum_tansyoprize, 
	  cast(avg(tansyoprize) as int) avg_prize,
	  cast(stddev_pop(tansyoprize) as int) devpop_prize,
	  mode() within group (order by tansyoprize) mod_prize
	from rec_race
	where tansyono not in ('特払','不成立','発売無') 
	  and tansyono in ('1','2','3') 
	group by 
	   turn, 
	  tansyono
	order by 
	   turn, 
	  tansyono
	) tmp1,
	(select 
	   turn attr,
	  count(tansyono) cnt_all, sum(tansyoprize) sum_allprize
	from rec_race
	where tansyono not in ('特払','不成立','発売無') 
	 group by turn
	 order by turn
	) tmp2
where tmp1.attr = tmp2.attr
order by 
  tmp1.attr, 
  tmp1.tansyono
;

-----------------------
20191024
-- 장별 []승 구미방들의 적중율, 수익률
copy (
select 
  nationwiningrate1, nationwiningrate2, nationwiningrate3, nationwiningrate4, nationwiningrate5, nationwiningrate6, 
	( case sanrentanno 
	  when '123' then '123' 
	  when '132' then '132' 
	  when '213' then '213' 
	  when '231' then '231' 
	  when '312' then '312' 
	  when '321' then '321' 
	  else 'else' end ) 
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2
where race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno 
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno 
  and race.ymd >= '20100101' and race.ymd <= '20181231'
  and sanrentanno not in ('特払','不成立','発売無') 
  and race.jyocd = '13'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr01\3T_123-321_nationrate_jyo13.arff' csv
;



select
  tmp1.jyocd, tmp1.sanrentanno, 
  tmp1.cnt_sanrentanno, tmp2.cnt_all, 
  cast(cast(tmp1.cnt_sanrentanno as float) / cast(tmp2.cnt_all as float) as numeric(7,2)) hitrate,
  tmp1.sum_sanrentanprize, tmp2.sum_allprize, 
  cast(cast(tmp1.sum_sanrentanprize as float) / cast( (tmp2.cnt_all * 100) as float) as numeric(7,2)) incomerate
from
(select 
  jyocd, sanrentanno, count(sanrentanno) cnt_sanrentanno, sum(sanrentanprize) sum_sanrentanprize
from rec_race
where sanrentanno not in ('特払','不成立','発売無') 
  and sanrentanno in ('123','132','213','231','312','321') 
group by jyocd, sanrentanno
order by jyocd, sanrentanno
) tmp1,
(select 
  jyocd, count(sanrentanno) cnt_all, sum(sanrentanprize) sum_allprize
from rec_race
where sanrentanno not in ('特払','不成立','発売無') 
group by jyocd
order by jyocd
) tmp2
where tmp1.jyocd = tmp2.jyocd
order by tmp1.jyocd, tmp1.sanrentanno
;

-----------------------
20191023

select 
  ymd, jyocd, raceno, entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6
from rec_racer_arr

-- [1,2,3]착 선수 예측용 arff
copy (
select 
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
	( case substring(sanrentanno from 2 for 1)
	  when '1' then '1' 
	  else 'else' end ) 
from rec_race race, rec_racer_arr racerarr
where race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno 
  and race.ymd >= '20100101' and race.ymd <= '20181231'
  and sanrentanno not in ('特払','不成立','発売無') 
  -- and race.jyocd = '03'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\experiment\expr01\rank1_entry.arff' csv
;

-- 장별 출전선수 합계
select
  jyocd, sum(cnt) sum_cnt
select
  jyocd, count(distinct entry) cnt
from rec_racer
group by jyocd order by jyocd
;

-- 장별 선수별 출전횟수
select
  jyocd, entry, count(*) cnt
from rec_racer
group by jyocd, entry
order by jyocd, cnt desc;

-- 장별 단승 구미방들의 적중율, 수익률
select
  tmp1.jyocd, tmp1.tansyono, 
  tmp1.cnt_tansyono, tmp2.cnt_all, 
  cast(cast(tmp1.cnt_tansyono as float) / cast(tmp2.cnt_all as float) as numeric(7,2)) hitrate,
  tmp1.sum_tansyoprize, tmp2.sum_allprize, 
  cast(cast(tmp1.sum_tansyoprize as float) / cast( (tmp2.cnt_all * 100) as float) as numeric(7,2)) incomerate
from
(select 
  jyocd, tansyono, count(tansyono) cnt_tansyono, sum(tansyoprize) sum_tansyoprize
from rec_race
where tansyono not in ('特払','不成立','発売無') 
group by jyocd, tansyono
order by jyocd, tansyono
) tmp1,
(select 
  jyocd, count(tansyono) cnt_all, sum(tansyoprize) sum_allprize
from rec_race
where tansyono not in ('特払','不成立','発売無') 
group by jyocd
order by jyocd
) tmp2
where tmp1.jyocd = tmp2.jyocd
order by tmp1.jyocd, tmp1.tansyono
;

select
  tmp1.jyocd, tmp1.tansyono, 
  tmp1.cnt_tansyono, tmp2.cnt_all, 
  cast(cast(tmp1.cnt_tansyono as float) / cast(tmp2.cnt_all as float) as numeric(7,2)) hitrate,
  tmp1.sum_tansyoprize, tmp2.sum_allprize, 
  cast(cast(tmp1.sum_tansyoprize as float) / cast( (tmp2.cnt_all * 100) as float) as numeric(7,2)) incomerate
from
(select 
  jyocd, tansyono, count(tansyono) cnt_tansyono, sum(tansyoprize) sum_tansyoprize
from rec_race
where tansyono not in ('特払','不成立','発売無') 
group by jyocd, tansyono
order by jyocd, tansyono
) tmp1,
(select 
  jyocd, count(tansyono) cnt_all, sum(tansyoprize) sum_allprize
from rec_race
where tansyono not in ('特払','不成立','発売無') 
group by jyocd
order by jyocd
) tmp2
where tmp1.jyocd = tmp2.jyocd
order by tmp1.jyocd, tmp1.tansyono
;




-----------------------
20190918
-- 단독구미방 모델 성능확인
copy ( 
  select 
	entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6, 
	( case nirentanno 
	  when '21' then '21' 
	  else 'else' end ) 
  from rec_race race, rec_racer_arr racerarr
  where race.ymd >= '20100101' and race.ymd <= '20181231' 
    and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno 
    and nirentanno not in ('特払','不成立','発売無') 
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\20190918\214_2T_21_entry2-6.arff' with encoding 'UTF8' csv 
;


-----------------------
20190905
copy (
select 
  race.jyocd, 
  race.raceno, 
  race.turn, 
  race.alevelcount,
  levelrank,
  nationwiningrank,
  bet_odds,
  bet_oddsrank,
  (case when (bet_oddsrank - result_oddsrank) >= -1 and (bet_oddsrank - result_oddsrank) <= 1  then 1
       else 0 end) as gapoddsrank
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku, stat_ml_result result
where nirentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd = result.ymd and race.jyocd = result.jyocd and race.raceno = result.raceno
  and race.ymd >= '20190101' and race.ymd <= '20190631' 
  and nirentanno in ('21')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrankgap2_bayes.2T.21.arff' csv;

copy (
select 
  race.jyocd, 
  race.raceno, 
  race.turn, 
  nationwiningrate1,nationwiningrate2,nationwiningrate3,nationwiningrate4,nationwiningrate5,nationwiningrate6,
  racerwiningrate1,racerwiningrate2,racerwiningrate3,racerwiningrate4,racerwiningrate5,racerwiningrate6,  
  bet_odds,
  bet_oddsrank,
  bet_oddsrank - result_oddsrank oddsrankgap
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku, stat_ml_result result
where nirentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd = result.ymd and race.jyocd = result.jyocd and race.raceno = result.raceno
  and race.ymd >= '20190101' and race.ymd <= '20190631' 
  and nirentanno in ('21')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrankgap_regr.2T.21.arff' csv;

-----------------------
20190905
copy (
select 
  race.sanrentanno, 
  race.jyocd, 
  race.raceno, race.turn, 
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
  nationwiningrate1,nationwiningrate2,nationwiningrate3,nationwiningrate4,nationwiningrate5,nationwiningrate6,
  racerwiningrate1,racerwiningrate2,racerwiningrate3,racerwiningrate4,racerwiningrate5,racerwiningrate6,  
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
  race.sanrentanpopular oddsrank
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku
where sanrentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd >= '20140101' and race.ymd <= '20181231' 
  and sanrentanno in ('123','132','213','231','312','321')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrank_entry_regr2.3T.2014-2018.arff' csv;


copy (
select 
  race.sanrentanno, 
  race.jyocd, 
  race.raceno, 
  race.turn, 
  nationwiningrate1,nationwiningrate2,nationwiningrate3,nationwiningrate4,nationwiningrate5,nationwiningrate6,
  racerwiningrate1,racerwiningrate2,racerwiningrate3,racerwiningrate4,racerwiningrate5,racerwiningrate6,  
  levelrank,
  nationwiningrank,
  bet_oddsrank,
  bet_oddsrank - result_oddsrank oddsrankgap
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku, stat_ml_result result
where sanrentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd = result.ymd and race.jyocd = result.jyocd and race.raceno = result.raceno
  and race.ymd >= '20190101' and race.ymd <= '20190631' 
  and sanrentanno in ('123','132','213','231','312','321')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrankgap_regr2.3T.2019.arff' csv;

-----------------------
20190904
copy (
select 
  race.sanrentanno, 
  race.jyocd, 
  race.raceno, race.turn, 
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
  case when race.sanrentanpopular < 20 then race.sanrentanpopular else -1 end oddsrank
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku
where sanrentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd >= '20170101' and race.ymd <= '20181231' 
  and sanrentanno in ('123','132','213','231','312','321')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrank_entry_regr.3T.2017-2018.arff' csv;


copy (
select 
  race.sanrentanno, 
  race.jyocd, 
  race.raceno, race.turn, 
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
  case when bet_oddsrank < 20 then bet_oddsrank else -1 end bet_odsrank,
  case when bet_oddsrank - result_oddsrank <> 0 then 1 else 0 end oddsrankgap
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku, stat_ml_result result
where sanrentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd = result.ymd and race.jyocd = result.jyocd and race.raceno = result.raceno
  and race.ymd >= '20190101' and race.ymd <= '20190831' 
  and sanrentanno in ('123','132','213','231','312','321')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\oddsrankgap_regr.3T.2019.arff' csv;


select bet_oddsrank, count(*) 
from stat_ml_result
where bettype = '3T' and substring(ymd from 1 for 4) = '2019'
group by bet_oddsrank
order by bet_oddsrank
;

copy (
select *, hitamt - betamt incomeamt
from stat_ml_result 
where ymd >= '20190101' and ymd <= '20190631'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\tmp\stat_ml_result.20190101-20190631.tsv' csv delimiter E'\t' header;

-----------------------
20190903

copy (
select *, hitamt - betamt incomeamt
from stat_ml_result 
where ymd >= '20190101' and ymd <= '20190631'
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\tmp\stat_ml_result.20190101-20190631.tsv' csv delimiter E'\t' header;


-----------------------
20190831
투표시 regression적용 실험
classifier로 구미방예상한후 regression예상 수익률과 적중률을 고려하여 투표시켜본다.

regression_make_arff.bat 208_3T_123-321_regr 20100101 20131231
regression_make_model_multi.bat 208_3T_123-321_regr  20100101 20131231

select count (*) from tmp_rec 
where sanrentanno in ('特払','不成立','発売無') ;


copy (
select 
  race.nirentanno, 
  race.jyocd, 
  race.raceno, race.turn, 
  entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6,
  nationwiningrate1,nationwiningrate2,nationwiningrate3,nationwiningrate4,nationwiningrate5,nationwiningrate6,
  racerwiningrate1,racerwiningrate2,racerwiningrate3,racerwiningrate4,racerwiningrate5,racerwiningrate6,  
  levelrank,
  nationwiningrank,
  race.nirentanprize
  case when race.nirentan
from rec_race race, rec_racer_arr racerarr, rec_race_waku2 waku2, stat_waku_win swaku
where nirentanno not in ('特払','不成立','発売無') 
  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = swaku.ymd and race.jyocd = swaku.jyocd and race.raceno = swaku.raceno
  and race.ymd >= '20150101' and race.ymd <= '20181231' 
  and nirentanno in ('12','13','21','31')
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\regression_test\2T_regr.arff' csv;

select distinct alevelcount
from rec_race;

-----------------------
20190825
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth1.v4.2018.tsv' csv delimiter E'\t' header;

-----------------------
20190824
-- 새 패턴유닛 실험  v5
\c boatstat
truncate stmp_stat_ml_ptn_final;
\c boatstat2
truncate stmp_stat_ml_ptn_final;
\c boatstat3
truncate stmp_stat_ml_ptn_final;
\c boatstat4
truncate stmp_stat_ml_ptn_final;

\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190824\output_depth1.v4.2017.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190824\output_depth2.v5.2017.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190824\output_depth2.v5.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth2.v4.2018-2.tsv' csv delimiter E'\t' header;

\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth2.v4.2018-0.tsv' csv delimiter E'\t' header;



-----------------------
20190823
-- 새 패턴유닛 실험  v4
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth1.v4.2018.tsv' csv delimiter E'\t' header;

\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth2.v4.2018.incomplete.tsv' csv delimiter E'\t' header;

\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth3.v4.2018-1.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190823\output_depth3.v4.2018-2.tsv' csv delimiter E'\t' header;

-----------------------
20190820
-- 새 패턴유닛 실험  v3
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth1.v3.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v3.2018-1.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v3.2018-2.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v3.2018-3.tsv' csv delimiter E'\t' header;


\c boatstat1
truncate stmp_stat_ml_ptn_final;
\c boatstat2
truncate stmp_stat_ml_ptn_final;
\c boatstat3
truncate stmp_stat_ml_ptn_final;
\c boatstat4
truncate stmp_stat_ml_ptn_final;


-- 새 패턴유닛 실험  v2
\c boatstat1
truncate stmp_stat_ml_ptn_final;
\c boatstat2
truncate stmp_stat_ml_ptn_final;
\c boatstat3
truncate stmp_stat_ml_ptn_final;
\c boatstat4
truncate stmp_stat_ml_ptn_final;

\c boatstat1
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth1.v2.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v2.2018-1.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v2.2018-2.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190820\output_depth2.v2.2018-3.tsv' csv delimiter E'\t' header;


-- depth1,2,3 연도별 재생성 후속작업
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2014') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth2.2014.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2015') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth2.2015.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2014') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth3.2014.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2015') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth3.2015.tsv' csv delimiter E'\t' header;
 

-----------------------
20190819
\c boatstat3
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_entry1.2018.tsv' csv delimiter E'\t' header;
\c boatstat4
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_entry2.2018.tsv' csv delimiter E'\t' header;


-- depth1,2,3 연도별 재생성
\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2014-2018.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2018.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2017') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2017.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2016') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2016.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2015') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2015.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2014') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth1.2014.tsv' csv delimiter E'\t' header;

\c boatstat1
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth2.2018.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2017') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth2.2017.tsv' csv delimiter E'\t' header;
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2016') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth2.2016.tsv' csv delimiter E'\t' header;

\c boatstat2
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2018') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth3.2018.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2017') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth3.2017.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final where yyyy = '2016') to 
  'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_depth3.2016.tsv' csv delimiter E'\t' header;


-----------------------
20190818
-- 20190818 entry1방식에 대한 manual finalize를 위해 년도를 추가
  ddl.sql참고
truncate stmp_stat_ml_ptn_final;
insert into stmp_stat_ml_ptn_final 
  select * from tmp_final where yyyy in ('2017', '2018');

-- 2014~2018년도분 final을 백업
copy (select * from tmp_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_entry1.2014-2018.tsv' csv delimiter E'\t' header;

출력오류 재생성
\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_entry2.2014.tsv' csv delimiter E'\t' header;


전 db에 신규 stat_ml_result를 전개한다.
copy (select * from stat_ml_result) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190818\stat_ml_result.new.tsv' csv delimiter E'\t' header;
copy stat_ml_result from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190818\stat_ml_result.new.tsv' csv delimiter E'\t' header;

boatstat1, boatstat2에 각각 entry1, entry2의 output을 전개한다.
  -> C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190818\readme.txt 参考

-----------------------
20190817
-- 구미방별 투표결과의 연도별/월별 수익성 추이를 확인한다.
select bettype, bet_kumiban, result_kumiban
substring(ymd from 1 for 4) timeline, 
-- substring(ymd from 1 for 6) timeline,
  sum(1) betcnt, sum(hity) hitcnt, sum(hitamt) - sum(betamt) incomeamt,
  cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
  cast( cast(sum(hitamt) as float) / cast(sum(betamt) as float) as numeric(7,2)) incomerate 
from stat_ml_result
-- where bettype = '1T' and bet_kumiban = '1'
group by bettype, bet_kumiban, timeline
order by bettype, bet_kumiban, timeline;


-- 구미방별 **복수** 투표결과의 연도별/월별 수익성 추이를 확인한다.
select 
 *
--  ,cast( cast(sum(hity) as float) / cast(sum(1) as float) as numeric(7,2)) hitrate,
--  ,cast( cast(sum(hitamt) as float) / cast(sum(betamt) as float) as numeric(7,2)) incomerate 
from
(
	select bettype, bet_kumiban, result_kumiban, 
	substring(race.ymd from 1 for 1) timeline, 
	-- substring(ymd from 1 for 6) timeline,
	  sum(100) betamt, 
	  sum(1) betcnt, sum(hity) hitcnt, sum(hitamt) - sum(betamt) incomeamt, 
	  sum(case when hity = 1 then hitamt-100 else result_amt-100 end) possibleamt,
	from stat_ml_result stat, rec_race race
	where bettype = '3T' and bet_kumiban = '213'
	  and race.ymd = stat.ymd and race.jyocd = stat.jyocd and race.raceno = stat.raceno 
	group by bettype, bet_kumiban, result_kumiban, timeline
	order by bettype, bet_kumiban, result_kumiban, timeline
) tmp
where possibleamt >= incomeamt
;

-----------
stat_ml_result에 result_amt컬럼 추가 
create table tmp_stat_ml_result as
select * from stat_ml_result;

insert into stat_ml_result
select 
  r.ymd, r.sime, r.jyocd, r.raceno,
  s.description, s.bettype, s.bet_kumiban, s.bet_odds, s.bet_oddsrank,
  s.result_kumiban, s.result_odds, s.result_oddsrank,
  case s.bettype when '1T' then r.tansyoprize
                 when '2T' then r.nirentanprize
                 when '2F' then r.nirenhukuprize
                 when '3T' then r.sanrentanprize
                 when '3F' then r.sanrenhukuprize
  end result_amt,
  s.hity, s.hitn, s.betamt, s.hitamt
from tmp_stat_ml_result s, rec_race r
where r.ymd = s.ymd and r.jyocd = s.jyocd and r.raceno = s.raceno;

copy (select * from stat_ml_result
-----------
  
insert into stat_ml_result
select
 
 case bettype when '1T' then tansyo


copy ( 
  select 
	race.jyocd, race.turn, race.raceno, race.alevelcount, race.racetype_simple,
	substring(wakulevellist from 1 for 11) level1234,
	nationwiningrate1, nationwiningrate2, nationwiningrate3, nationwiningrate4,
	result_kumiban 
  from rec_race race, stat_ml_result result, rec_race_waku waku, rec_race_waku2 waku2
  where race.ymd >= '20130101' and race.ymd <= '20181231' 
    and bettype = '3T' and bet_kumiban = '123'
    and sanrentanno not in ('特払','不成立','発売無') 
    and race.ymd = result.ymd and race.jyocd = result.jyocd and race.raceno = result.raceno 
    and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno 
    and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno 
    and substring(wakulevellist from 1 for 11) <> ''
    and result_kumiban <> ''
  ) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\20190817\yntest4.arff' with encoding 'UTF8' csv 
;

select distinct substring(wakulevellist from 1 for 8) level123
from rec_race;


\c boatstat0
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry2.2014.tsv' csv delimiter E'\t' header;
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry2.2015.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry2.2016.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry1.2014.tsv' csv delimiter E'\t' header;

copy output_entry2*.csv output_entry2.2014-2018.tsv

-----------------------
20190816
--entry년도별 2015,2016,2017 생성 / entry2 2008년도 생성
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry-depth1.tsv' csv delimiter E'\t' header;


-----------------------
20190815
--boatstat4에서 output_final_entry 분석중
\c boatstat4
truncate stmp_stat_ml_ptn_final_2018;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_entry.2018.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry.tsv' csv delimiter E'\t' header;

--boatstat3에서 output_final_depth3 분석중
\c boatstat3
truncate stmp_stat_ml_ptn_final_2018;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3.2018.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3.tsv' csv delimiter E'\t' header;

--boatstat2에서 output_final_nation2-motor2 분석중
\c boatstat2
truncate stmp_stat_ml_ptn_final_2018;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_nation2-motor2.2018.tsv' csv delimiter E'\t' header;


\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry2.2018-1.tsv' csv delimiter E'\t' header;
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry2.2018-2.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry1.2015.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry1.2016.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190816\output_entry1.2017.tsv' csv delimiter E'\t' header;

  \c boatstat2
  copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3-2.tsv' csv delimiter E'\t' header;
  \c boatstat3
  copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3-3.tsv' csv delimiter E'\t' header;
  \c boatstat4
  copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3.2018.tsv' csv delimiter E'\t' header;
  \c boatstat1
  copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth3-1.tsv' csv delimiter E'\t' header;

\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth2.2018.tsv' csv delimiter E'\t' header;


\c boatstat
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190815\output_final_depth2.tsv' csv delimiter E'\t' header;

output_weka_pattern.bat db:0 all C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/20190815/output_depth2.2018.properties



  아래 실행전에  실수로 지워버렸다.
  \c boatstat3
  copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth3-3.2018.tsv' csv delimiter E'\t' header;

-- 패턴유닛 리뉴얼



-----------------------
20190814
--boatstat에서 depth1 analyze 준비
\c boatstat
truncate stmp_stat_ml_ptn_final;
truncate stmp_stat_ml_ptn_final_2018;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth1.2018.tsv' csv delimiter E'\t' header;


-- depth3에 대한 2018년도 final생성
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth3.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth3-2.2018.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth3-4.2018.tsv' csv delimiter E'\t' header;

-- entry에 대한 2018년도 final생성
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_entry.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_entry2.2018.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_entry3.2018.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_entry4.2018.tsv' csv delimiter E'\t' header;


-- final의 2018년 패턴명-값별 투표회수를 일람한다.
select bettype, kumiban, pattern_name, pattern_value, betcnt
from stmp_stat_ml_ptn_final_2018
order by betcnt desc, bettype, kumiban, pattern_name, pattern_value;

\c boatstat1
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2018-2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth2.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth2.2018.tsv' csv delimiter E'\t' header;

\c boatstat1
truncate  stmp_stat_ml_ptn_final;
truncate  stmp_stat_ml_ptn_final_2018;
\c boatstat2
truncate  stmp_stat_ml_ptn_final;
truncate  stmp_stat_ml_ptn_final_2018;

\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth2-1.2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth2-2.2018.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth2-3.2018.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth2-4.2018.tsv' csv delimiter E'\t' header;

\c boatstat
truncate  stmp_stat_ml_ptn_final;
\c boatstat1
truncate  stmp_stat_ml_ptn_final;
\c boatstat2
truncate  stmp_stat_ml_ptn_final;
\c boatstat3
truncate  stmp_stat_ml_ptn_final;
\c boatstat4
truncate  stmp_stat_ml_ptn_final;

\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth1.2015.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth1.2016.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth1.2017.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190814\output_final_depth1.2018.tsv' csv delimiter E'\t' header;

-----------------------
20190813

-- levelrank13의 패턴값 수정완료.
\c boatstat
update stmp_stat_ml_ptn_final set pattern_value = substring(pattern_value from 1 for 2) || '-' || substring(pattern_value from 3 for 2)
where pattern_name = 'level13';
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;

depth1기준으로 디비1-4에서 각각 기간이 다른 final을 생성했다.
\c boatstat1
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2015-2018.tsv' csv delimiter E'\t' header;
\c boatstat2
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2016-2018.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2017-2018.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2018-2018.tsv' csv delimiter E'\t' header;

boatstat1에 전개
copy stmp_stat_ml_ptn_final_2015 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2015-2018.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2016 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2016-2018.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2017 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2017-2018.tsv' csv delimiter E'\t' header;
copy stmp_stat_ml_ptn_final_2018 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190813\output_final_depth1.2018-2018.tsv' csv delimiter E'\t' header;

-----------------------
20190812
\c boatstat1;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
copy stat_ml_ptn_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1.tsv' csv delimiter E'\t' header;
copy stat_ml_kumiban_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1.tsv' csv delimiter E'\t' header;


\c boatstat2
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_entry.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_entry.tsv' csv delimiter E'\t' header;
\c boatstat3
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth3-1.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth3-1.tsv' csv delimiter E'\t' header;
\c boatstat4
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth3-2.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth3-2.tsv' csv delimiter E'\t' header;
\c boatstat1
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth2.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth2.tsv' csv delimiter E'\t' header;


-----------------------
20190811
select bettype, kumiban, max(ymd) from stat_ml_ptn_linear group by bettype, kumiban;


-- stat_ml_ptn_final_alltype에 모든 mltype의 final이 inport되어있는 상태에서
-- 각 mytype, bettype, kumiban별로 수익금액이 큰순으로 150개씩 추출한다. 
select *
from (
  select 
    row_number() over (partition by mltype, bettype, kumiban order by incomeamt desc) as r,
	stat_ml_ptn_final_alltype.*
  from stat_ml_ptn_final_alltype
) x
where x.r <= 100;

oputput_weka_pattern.sql 임시수정했다.

delete from stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
insert into stat_ml_ptn_final_alltype (select 'depth1', * from stmp_stat_ml_ptn_final);
delete from stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth2.tsv' csv delimiter E'\t' header;
insert into stat_ml_ptn_final_alltype (select 'depth2', * from stmp_stat_ml_ptn_final);
delete from stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;
insert into stat_ml_ptn_final_alltype (select 'depth3', * from stmp_stat_ml_ptn_final);
delete from stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry.tsv' csv delimiter E'\t' header;
insert into stat_ml_ptn_final_alltype (select 'entry', * from stmp_stat_ml_ptn_final);



copy tmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth2.tsv' csv delimiter E'\t' header;
copy tmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;
copy tmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry.tsv' csv delimiter E'\t' header;


\c boatstat;
copy stat_ml_ptn_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1-1.tsv' csv delimiter E'\t' header;
copy stat_ml_ptn_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1-2.tsv' csv delimiter E'\t' header;
copy stat_ml_ptn_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1-3.tsv' csv delimiter E'\t' header;
copy stat_ml_ptn_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1-4.tsv' csv delimiter E'\t' header;
copy stat_ml_kumiban_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1-1.tsv' csv delimiter E'\t' header;
copy stat_ml_kumiban_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1-2.tsv' csv delimiter E'\t' header;
copy stat_ml_kumiban_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1-3.tsv' csv delimiter E'\t' header;
copy stat_ml_kumiban_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1-4.tsv' csv delimiter E'\t' header;

copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\analyze_depth1.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190811\kumiban_analyze_depth1.tsv' csv delimiter E'\t' header;

-----------------------
20190810

\c boatstat1;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth2.tsv' csv delimiter E'\t' header;
\c boatstat2;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry.tsv' csv delimiter E'\t' header;
\c boatstat3;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;
\c boatstat4;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;
\c boatstat3;
delete from stmp_stat_ml_ptn_final where bettype not in ('1T','2T', '2F');
\c boatstat4;
delete from stmp_stat_ml_ptn_final where bettype in ('1T','2T', '2F');


\c boatstat1;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\analyze_depth1-1.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\kumiban_analyze_depth1-1.tsv' csv delimiter E'\t' header;

\c boatstat2;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\analyze_depth1-2.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\kumiban_analyze_depth1-2.tsv' csv delimiter E'\t' header;

\c boatstat3;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\analyze_depth1-3.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\kumiban_analyze_depth1-3.tsv' csv delimiter E'\t' header;

\c boatstat4;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\analyze_depth1-4.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\220190811\kumiban_analyze_depth1-4.tsv' csv delimiter E'\t' header;


\c boatstat1;
copy (select * from stat_ml_ptn_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\analyze_depth1.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\kumiban_analyze_depth1.tsv' csv delimiter E'\t' header;

\c boatstat2;
copy (select * from stat_ml_ptn_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\analyze_depth2.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\kumiban_analyze_depth2.tsv' csv delimiter E'\t' header;

\c boatstat3;
copy (select * from stat_ml_ptn_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\analyze_depth3.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\kumiban_analyze_depth3.tsv' csv delimiter E'\t' header;

\c boatstat4;
copy (select * from stat_ml_ptn_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\analyze_entry.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze where iscustom='n') to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\20190810\kumiban_analyze_entry.tsv' csv delimiter E'\t' header;


select bettype, kumiban, avg(hitamt_mod)
from stmp_stat_ml_ptn_final
where hitamt > 0
group by bettype, kumiban;

\c boatstat;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
\c boatstat1;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
\c boatstat2;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
\c boatstat3;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
\c boatstat4;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;

-----------------------
20190809
\c boatstat1;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth1.tsv' csv delimiter E'\t' header;
\c boatstat2;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth2.tsv' csv delimiter E'\t' header;
\c boatstat3;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;
\c boatstat4;
truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_entry.tsv' csv delimiter E'\t' header;



마스터 DB 정리
参考：https://qiita.com/rice_american/items/ceae28dad13c3977e3a8
pg_dump -h localhost -p 55432 -U postgres boatstat2 > boatstat2.dump.20200830
drop database boar;
vacuum full;

drop table rec_fame_rank3_after;
drop table rec_fame_rank3_before;
drop table rec_odds_after;
drop table rec_odds_before;
drop table rec_waku_recent;
drop table stat_ml_kumiban_analyze_depth2;
drop table stat_ml_kumiban_analyze_depth3;
drop table stat_ml_multiresult;
drop table stat_ml_ptn_analyze_depth2;
drop table stat_ml_ptn_analyze_depth3;
drop table stat_ml_ptn_daily;
drop table stat_racer_waku;
drop table stat_waku_recent;
drop table stmp_analyze_result;
drop table stmp_odds_comp;
drop table stmp_ptn_names_over95;
drop table stmp_ptn_values_over95;
drop table stmp_rec_race;
drop table stmp_stat_ml_ptn_final_depth1;
drop table stmp_stat_ml_ptn_final_depth2;
drop table stmp_stat_ml_ptn_final_depth3;
drop table stmp_stat_ml_ptn_final_entry;
drop table test;
drop table tmp_key;
drop table tmp_print_csv;
drop table tmp_stat_ml_ptn_daily;
drop table tmp_stat_ml_ptn_final;

create database boatstat1 with template boatstat owner postgres;
create database boatstat2 with template boatstat owner postgres;
create database boatstat3 with template boatstat owner postgres;
create database boatstat4 with template boatstat owner postgres;





copy (select * from stat_ml_ptn_analyze_depth2) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\analyze_depth2.20190720.tsv' csv delimiter E'\t' header;

copy (select * from stat_ml_kumiban_analyze_depth2) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\kumiban_analyze_depth2.20190720.tsv' csv delimiter E'\t' header;

copy (select * from stmp_stat_ml_ptn_final_depth3) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\output_final_depth3.tsv' csv delimiter E'\t' header;


copy (select * from stat_ml_ptn_analyze) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze_entry.20190809.tsv' csv delimiter E'\t' header;

copy (select * from stat_ml_kumiban_analyze) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_kumiban_analyze_entry.20190809.tsv' csv delimiter E'\t' header;

copy (select * from stmp_stat_ml_ptn_final) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_depth2.tsv' csv delimiter E'\t' header;


-----------------------
20190808

-- final의 패턴명별 평균수익성을을 확인한다.
select bettype, kumiban, pattern_name, sum(betcnt) betcnt, sum(hitcnt) hitcnt, sum(incomeamt) incomeant,
    cast(avg(hitrate) as numeric(7,2)) avg_hitrate, 
	cast(avg(incomerate) as numeric(7,2)) avg_incomerate, 
	cast(avg(minus_days_rate) as numeric(7,2)) avg_minus_days_rate,
	cast(avg(linear_incomeamt_slope) as numeric(7,2)) avg_linear_incomeamt_slope
from stmp_stat_ml_ptn_final
group by bettype, kumiban, pattern_name
order by bettype, kumiban, pattern_name;

-- final의 구미방별별 평균수익성을을 확인한다.
select bettype, kumiban, sum(betcnt) betcnt, sum(hitcnt) hitcnt, sum(incomeamt) incomeant,
    cast(avg(hitrate) as numeric(7,2)) avg_hitrate, 
	cast(avg(incomerate) as numeric(7,2)) avg_incomerate, 
	cast(avg(minus_days_rate) as numeric(7,2)) avg_minus_days_rate,
	cast(avg(linear_incomeamt_slope) as numeric(7,2)) avg_linear_incomeamt_slope
from stmp_stat_ml_ptn_final
group by bettype, kumiban
order by bettype, kumiban;

copy (select * from stat_ml_ptn_analyze) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze_depth1.20190808.tsv' csv delimiter E'\t' header;

copy (select * from stat_ml_kumiban_analyze) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_kumiban_analyze_depth1.20190808.tsv' csv delimiter E'\t' header;

copy (select * from stmp_stat_ml_ptn_final) 
to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_entry-depth1.tsv' csv delimiter E'\t' header;

truncate stmp_stat_ml_ptn_final;
copy stmp_stat_ml_ptn_final 
from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_entry.tsv' csv delimiter E'\t' header;

truncate tmp_stat_ml_ptn_final;
copy tmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_entry.tsv' csv delimiter E'\t' header;

-----------------------
20190807
copy tmp_stat_ml_ptn_final from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_depth1.tsv' csv delimiter E'\t' header;

copy (select * from stmp_stat_ml_ptn_final) to 
'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_depth1.tsv' csv delimiter E'\t' header;

copy (select * from stmp_stat_ml_ptn_final_entry) to 
'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stmp_stat_ml_ptn_final_entry.tsv' csv delimiter E'\t' header;



-----------------------
20190806
truncate stmp_stat_ml_ptn_final;
insert into stmp_stat_ml_ptn_final
select * from stmp_stat_ml_ptn_final_entry;

delete from stmp_stat_ml_ptn_final 
where pattern_name in ('entry4','entry5','entry6');

insert into stmp_stat_ml_ptn_final_entry
select * from stmp_stat_ml_ptn_final;

 select pattern_name, pattern_value, bettype, kumiban, sum(betamt), sum(hitamt), sum(hitamt) - sum(betamt) incomeamt
 from stmp_stat_ml_ptn_final
 where pattern_name = 'entry1'
 group by pattern_name, pattern_value, bettype, kumiban
 order by pattern_name, pattern_value, incomeamt desc;


-- stat_ml_result의 전체 평균 수익성
  select 
    bettype, bet_kumiban, 
    sum(hity) hity,
    sum(hitn) hitn,
    sum(betamt) betamt,
    sum(hitamt) hitamt,
    sum(hitamt) - sum(betamt) incomeamt,
    cast( cast(sum(hity) as float) / (cast(sum(hity) + sum(hitn) as float)) as numeric(7,2))  hitrate,  
    cast( cast(sum(hitamt) as float) / cast(sum(betamt) as float) as numeric(7,2)) incomerate
  from stat_ml_result
  group by bettype, bet_kumiban;

-- stmp_stat_ml_ptn_final의 entry패턴별 수익성
select 
  tmp.*, 
  hitamt - betamt incomeamt,
  cast( (cast(hitcnt as float)/ cast(betcnt as float)) as numeric(7,2)) hitrate, 
  cast( (cast(hitamt as float)/ cast(betamt as float)) as numeric(7,2)) incomerate
from
(
  select bettype, kumiban, pattern_name,  sum(betcnt) betcnt, sum(hitcnt) hitcnt, sum(betamt) betamt, sum(hitamt) hitamt
  from stmp_stat_ml_ptn_final
  group by bettype, kumiban, pattern_name
) tmp
order by bettype, kumiban, pattern_name;
-----------------------
20190805
delete from stmp_stat_ml_ptn_final
where pattern_name not like 'entry%'

insert into stmp_stat_ml_ptn_final_depth1
select * from stmp_stat_ml_ptn_final;

select distinct entry[1] entry1, count(*) cnt
from rec_racer_arr arr
group by entry1
order by entry1
;

-----------------------
20190804
insert into stmp_stat_ml_ptn_final_depth2
select * from stmp_stat_ml_ptn_final;

-----------------------
20190803
-- 구미방별 finalize조건값들의 평균치
select 
  bettype, kumiban, cast(avg(betcnt) as numeric(7,2)) betcnt, cast(avg(hitrate) as numeric(7,2)) hitrate, cast(avg(incomerate) as numeric(7,2)) incomerate, 
  cast(avg(minus_days_rate) as numeric(7,2)) minus_days_rate, cast(avg(linear_incomeamt_slope) as numeric(10,5)) linear_incomeamt_slope, cast(avg(recover_plus_rate) as numeric(7,2)) recover_plus_rate
from stmp_stat_ml_ptn_final
where incomerate > 100
group by bettype, kumiban 
order by bettype, kumiban;



copy (select * from stmp_stat_ml_ptn_final_depth2) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\final_before_recover\stmp_stat_ml_ptn_final_depth2.tsv' csv delimiter E'\t' header;

-----------------------
20190801
copy (
	select race.ymd, race.jyocd, race.raceno, race.turn, race.racetype_simple, 
		entry[1] entry1, entry[2] entry2, entry[3] entry3, entry[4] entry4, entry[5] entry5, entry[6] entry6, 
		nirentanprize
	from rec_race race, rec_racer_arr racerarr
	where race.ymd >= '20170101' and race.ymd <= '20171231'
	  and race.ymd = racerarr.ymd and race.jyocd = racerarr.jyocd and race.raceno = racerarr.raceno
	order by race.ymd
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\tmp\2T12.csv' csv;


select distinct bettype, kumiban from stat_ml_kumiban_analyze;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\finalize_and_analyze\stat_ml_ptn_analyze.depth3.stopped.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\finalize_and_analyze\stat_ml_kumiban_analyze.depth3.stopped.tsv' csv delimiter E'\t' header;
-----------------------
20190731
select pattern_name, bettype, kumiban, count(*) cnt
from stmp_stat_ml_ptn_final_depth2
where incomerate > 100
group by pattern_name, bettype, kumiban
order by cnt desc, bettype, kumiban;

truncate stat_ml_ptn_analyze;
truncate stat_ml_kumiban_analyze;

select iscustom, count(*) from stat_ml_kumiban_analyze group by iscustom;
delete from stat_ml_kumiban_analyze where iscustom not in ('y', 'n');

delete from stat_ml_ptn_analyze where iscustom not in ('y', 'n');
select iscustom, count(*) from stat_ml_ptn_analyze group by iscustom;
delete from stat_ml_ptn_analyze where iscustom not in ('y', 'n');

select bettype, kumiban, pattern_name, condition
from stat_ml_ptn_analyze
group by bettype, kumiban, pattern_name, condition
order by bettype, kumiban, pattern_name, condition;

insert into stat_ml_ptn_final_depth3 select * from stmp_stat_ml_ptn_final;
insert into stat_ml_ptn_analyze_depth2 select * from stat_ml_ptn_analyze;
insert into stat_ml_kumiban_analyze_depth2 select * from stat_ml_kumiban_analyze;

drop table stat_ml_ptn_final_depth12;
drop table stat_ml_ptn_analyze_depth12;
drop table stat_ml_ptn_analyze_depth3;
drop table stat_ml_ptn_linear_analyze_depth12;

-----------------------
20190729

insert into stat_ml_ptn_final
select * from stmp_stat_ml_ptn_final
where hit_bet_slope_rate = 1;


select
  distinct 10 on(bettype, kumiban) bettype, kumiban, bettype, kumiban, pattern_name, pattern_value, betcnt, incomeamt, hitrate, incomerate, 
  hitamt_bias_rate, hit_bet_slope_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate,
from stmp_stat_ml_ptn_final
order by incomeamt desc;
  

-----------------------
20190727
delete from stat_ml_ptn_final;
insert into stat_ml_ptn_final
  select * from stmp_stat_ml_ptn_final where incomerate > 150;
  

delete from stmp_ptn_names_over95;

insert into stmp_ptn_names_over95
select 
  description, bettype, kumiban, pattern_name, avg(incomerate) incomerate
from stmp_stat_ml_ptn_final
where incomerate > 95
group by description, bettype, kumiban, pattern_name
order by bettype, kumiban, pattern_name
;

delete from stmp_ptn_values_over95;

insert into stmp_ptn_values_over95
select 
  description, bettype, kumiban, pattern_name, pattern_value, incomerate
from stmp_stat_ml_ptn_final
where incomerate > 95
group by description, bettype, kumiban, pattern_name, pattern_value, incomerate
order by bettype, kumiban, pattern_name, pattern_value
;

select 
  description, bettype, kumiban, pattern_name, count(*) cnt
from stmp_stat_ml_ptn_final
where incomerate > 95
group by description, bettype, kumiban, pattern_name
;





select
  distinct on(bettype, kumiban) bettype, kumiban, 
  betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent
from 
( 
  select
    bettype, kumiban,
    cast( (cast(betcnt as float) * (cast(incomeamt as float) / 10) * cast(incomerate as float) * cast(hitrate as float) / cast((minus_days_rate*10)+1 as int)) / 10000 as bigint) total,   
    betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent, 
    betcount_daily,
    incomeamt, incomerate, hitrate,
    pattern_cnt_avg,
    hitamt_bias_rate,
    minus_changed_count,
    plus_changed_count,
    minus_days_rate
  from stat_ml_kumiban_analyze
  where incomerate > 105
  order by bettype, kumiban, total desc, betcnt desc, hitrate desc, incomerate desc
  ) tmp
order by bettype, kumiban, total desc;


insert into stat_ml_ptn_filtered
select
  a.bettype,
  a.kumiban,
  a.pattern_name,
  a.betcount_daily,
  a.betamt,
  a.incomeamt,
  a.hitrate,
  a.incomerate,
  a.totalrate,
  a.linear_hitrate_slope,
  a.linear_incomerate_slope,
  a.linear_incomeamt_slope,
  a.range_oddsrank[1],
  a.range_oddsrank[2],
  a.range_odds[1],
  a.range_odds[2],
  f.pattern_value,
  f.betamt ptn_betamt,
  f.incomeamt ptn_incomeamt,
  f.hitrate ptn_hitrate,
  f.incomerate ptn_incomerate,
  f.totalrate ptn_totalrate,
  f.days_bet ptn_days_bet,
  f.days_plus_rate ptn_days_plus_rate,
  f.linear_hitrate_slope ptn_hitrate_slope,
  f.linear_incomerate_slope ptn_incomerate_slope,
  f.linear_incomeamt_slope ptn_incomeamt_slope
from stat_ml_ptn_analyze a, stat_ml_ptn_final f
where a.description = f.description and a.pattern_name = f.pattern_name 
  and (f.totalrate >= a.range_totalrate[1] and f.totalrate <= a.range_totalrate[2])
  and (f.hitrate >= a.range_hitrate[1] and f.hitrate <= a.range_hitrate[2])
  and (f.incomerate >= a.range_incomerate[1] and f.incomerate <= a.range_incomerate[2])
  and a.isfinal = 'y'
order by a.bettype, a.kumiban, a.pattern_name, f.pattern_value
;

-----------------------
20190724
select
  bettype, kumiban, 
  
  betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent, incomeamt
from stat_ml_kumiban_analyze
where incomeamt > 1
order by bettype, kumiban, betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent;


select count(*) from stat_ml_ptn_final;
select count(*) from stat_ml_ptn_analyze;
select count(*) from stat_ml_kumiban_analyze;

copy (select * from stmp_stat_ml_ptn_final) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\finalize_and_analyze\stmp_stat_ml_ptn_final.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_ptn_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\finalize_and_analyze\stat_ml_ptn_analyze.tsv' csv delimiter E'\t' header;
copy (select * from stat_ml_kumiban_analyze) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\finalize_and_analyze\stat_ml_kumiban_analyze.tsv' csv delimiter E'\t' header;

-----------------------
20190723

-----------------------
20190722
delete from stat_ml_ptn_final where bettype = '1T' and kumiban = '2';
delete from stat_ml_ptn_analyze where bettype = '1T' and kumiban = '2';
delete from stat_ml_kumiban_analyze where bettype = '1T' and kumiban = '2';


select 
  bettype, kumiban, betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent, count(*)
from stat_ml_kumiban_analyze
group by bettype, kumiban, betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent
order by bettype, kumiban, betcnt_percent, hitrate_percent, incomerate_percent, minus_days_percent;

-----------------------
20190721
copy (select * from zen_filter) to 'H:\!!DevBackup\tables\zen_filter.bin' binary;
copy (select * from zen_overall) to 'H:\!!DevBackup\tables\zen_overall.bin' binary;
copy (select * from zen_overall_real) to 'H:\!!DevBackup\tables\zen_overall_real.bin' binary;
copy (select * from zen_pattern) to 'H:\!!DevBackup\tables\zen_pattern.bin' binary;
copy (select * from zen_race) to 'H:\!!DevBackup\tables\zen_race.bin' binary;
copy (select * from zen_result) to 'H:\!!DevBackup\tables\zen_result.bin' binary;
copy (select * from zen_result_overall) to 'H:\!!DevBackup\tables\zen_result_overall.bin' binary;
copy (select * from zen_result_overall_real) to 'H:\!!DevBackup\tables\zen_result_overall_real.bin' binary;
copy (select * from zen_result_real) to 'H:\!!DevBackup\tables\zen_result_real.bin' binary;
copy (select * from zen_result_stat) to 'H:\!!DevBackup\tables\zen_result_stat.bin' binary;
copy (select * from zen_result_stat_ml) to 'H:\!!DevBackup\tables\zen_result_stat_ml.bin' binary;
copy (select * from zen_result_stat_real) to 'H:\!!DevBackup\tables\zen_result_stat_real.bin' binary;
copy (select * from zen_stat) to 'H:\!!DevBackup\tables\zen_stat.bin' binary;

copy (select * from ntile_deviation) to 'H:\!!DevBackup\tables\ntile_deviation.bin' binary;
copy (select * from ntile_fame_rank3) to 'H:\!!DevBackup\tables\ntile_fame_rank3.bin' binary;
copy (select * from ntile_race_waku) to 'H:\!!DevBackup\tables\ntile_race_waku.bin' binary;
copy (select * from ntile_race_waku2) to 'H:\!!DevBackup\tables\ntile_race_waku2.bin' binary;
copy (select * from ntile_waku_win) to 'H:\!!DevBackup\tables\ntile_waku_win.bin' binary;

drop table zen_filter;
drop table zen_overall;
drop table zen_overall_real;
drop table zen_pattern;
drop table zen_race;
drop table zen_result;
drop table zen_result_overall;
drop table zen_result_overall_real;
drop table zen_result_real;
drop table zen_result_stat;
drop table zen_result_stat_ml;
drop table zen_result_stat_real;
drop table zen_stat;
drop table ntile_deviation;
drop table ntile_fame_rank3;
drop table ntile_race_waku;
drop table ntile_race_waku2;
drop table ntile_waku_win;

-----------------------
20190720
select
  bettype, kumiban, totalrate, incomerate
--  bettype, kumiban, percentile_disc(0.1) within group (order by totalrate desc) mod -- 3分位値
from stmp_stat_ml_ptn_final
where incomerate > 100
--group by bettype, kumiban
order by bettype, kumiban, totalrate desc
;


-----------------------
20190718
select
  final.*
from stmp_stat_ml_ptn_final final,
  (
	select description, bettype, kumiban, pattern_name, pattern_value, hitrate
	from stmp_stat_ml_ptn_final final
	where hitrate >= 25 and hitrate <= 100
  ) ht,
  (
	select description, bettype, kumiban, pattern_name, pattern_value, betcnt
	from stmp_stat_ml_ptn_final final
	where betcnt >= 200 and betcnt <= 10000
  ) bt, 
  (
	select description, bettype, kumiban, pattern_name, pattern_value, incomerate
	from stmp_stat_ml_ptn_final final
	where incomerate >= 110 and incomerate <= 10000
  ) it,
  (
	select description, bettype, kumiban, pattern_name, pattern_value, minus_days_rate
	from stmp_stat_ml_ptn_final final
	where minus_days_rate >= 0 and minus_days_rate <= 0.05
  ) mt
where final.description = '204_1T_1-3' and final.bettype = '1T' and final.kumiban = '3'
  and final.description = ht.description and final.bettype = ht.bettype and final.kumiban = ht.kumiban
    and final.pattern_name = ht.pattern_name and final.pattern_value = ht.pattern_value
  and final.description = bt.description and final.bettype = bt.bettype and final.kumiban = bt.kumiban
    and final.pattern_name = bt.pattern_name and final.pattern_value = bt.pattern_value
  and final.description = it.description and final.bettype = it.bettype and final.kumiban = it.kumiban
    and final.pattern_name = it.pattern_name and final.pattern_value = it.pattern_value
  and final.description = mt.description and final.bettype = mt.bettype and final.kumiban = mt.kumiban
    and final.pattern_name = mt.pattern_name and final.pattern_value = mt.pattern_value
order by final.minus_days_rate asc, final.hitrate desc, final.betcnt desc, final.incomerate desc
;

select bettype, kumiban, pattern_name, pattern_value
from stmp_stat_ml_ptn_final final
where final.description = paramDescription and final.bettype = paramBettype and final.bet_kumiban = paramKumiban
  and hitrate >= paramArrHitRate[1] and hitrate <= paramArrHitRate[2]
  and incomerate >= paramArrIncomeRate[1] and incomerate <= paramArrIncomeRate[2]
  and hitamt_bias_rate >= paramArrBiasRate[1] and hitamt_bias_rate <= paramArrBiasRate[2]
  and minus_days_rate >= paramArrMinusDaysRate[1] and minus_days_rate <= paramArrMinusDaysRate[2]
  and betcnt >= paramArrBetCount[1] and betcnt <= paramArrBetCount[2]
  
select bettype, kumiban, pattern_name, pattern_value, hitrate
from stmp_stat_ml_ptn_final final
where final.description = paramDescription and final.bettype = paramBettype and final.bet_kumiban = paramKumiban
  and hitrate >= paramArrHitRate[1] and hitrate <= paramArrHitRate[2]
  and incomerate >= paramArrIncomeRate[1] and incomerate <= paramArrIncomeRate[2]
  and hitamt_bias_rate >= paramArrBiasRate[1] and hitamt_bias_rate <= paramArrBiasRate[2]
  and minus_days_rate >= paramArrMinusDaysRate[1] and minus_days_rate <= paramArrMinusDaysRate[2]
  and betcnt >= paramArrBetCount[1] and betcnt <= paramArrBetCount[2]


select
  final.*
from stmp_stat_ml_ptn_final final
where final.description = '203_2T_12-31' and final.bettype = '2T' and final.kumiban = '2T'
  and final.description = ht.description and final.bettype = ht.bettype and final.kumiban = ht.kumiban
    and final.pattern_name = ht.pattern_name and final.pattern_value = ht.pattern_value
order by minus_days_rate asc, betcnt desc, hitrate desc, incomerate desc
;

-----------------------
20190717
select distinct bettype, kumiban, betcnt_limit, count(*) cnt from stat_ml_ptn_final
group by bettype, kumiban, betcnt_limit
order by bettype, kumiban, betcnt_limit;s

copy (
select 
 bettype, kumiban, pattern_name, pattern_value, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, 
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  linear_incomeamt_slope
from stat_ml_ptn_final
order by bettype, kumiban, pattern_name, pattern_value
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.csv' csv delimiter E'\t' header;

copy (
select 
 (bettype || '_' || kumiban) bettype_kumiban, pattern_name, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, 
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  linear_incomeamt_slope,
  case when incomerate <= 100 then 0
       when incomerate > 100 and incomerate <= 150 then 100
       when incomerate > 150 and incomerate <= 200 then 150
       when incomerate > 200 and incomerate <= 250 then 200
       when incomerate > 250 and incomerate <= 299 then 250
       else cast(incomerate as int) / 100 * 100
  end classes
from stat_ml_ptn_final
order by bettype, kumiban, pattern_name, pattern_value
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.arff' csv;

-----------------------
20190716
copy (
select 
  bettype, kumiban, pattern_name, betcount_daily, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, 
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  range_oddsrank[1] range_oddsrank, range_odds[1] range_odds, range_incomerate[1] range_incomerate, 
  range_biasrate[2] range_biasrate, range_minusdaysrate[2] range_minusdaysrate, max_minuschangedcount, range_betcntlimit[1] range_betcntlimit
from stat_ml_ptn_analyze
order by bettype, kumiban, pattern_name
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze.csv' csv delimiter E'\t' header;

select distinct cast(incomerate as int) / 100 * 100 classes from stat_ml_ptn_analyze order by classes;
copy (
select 
  (bettype || '_' || kumiban) bettype_kumiban, pattern_name, betcount_daily, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, 
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  range_oddsrank[1] range_oddsrank, range_odds[1] range_odds, range_incomerate[1] range_incomerate, 
  range_biasrate[2] range_biasrate, range_minusdaysrate[2] range_minusdaysrate, max_minuschangedcount, range_betcntlimit[1] range_betcntlimit,
  case when incomerate <= 100 then 0
       when incomerate > 100 and incomerate <= 150 then 100
       when incomerate > 150 and incomerate <= 200 then 150
       when incomerate > 200 and incomerate <= 250 then 200
       when incomerate > 250 and incomerate <= 299 then 250
       else cast(incomerate as int) / 100 * 100
  end classes
from stat_ml_ptn_analyze
order by bettype_kumiban, pattern_name
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze.arff' csv;


copy (
select 
  bettype, kumiban, betcount_daily, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, pattern_cnt_avg,
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  range_oddsrank[1] range_oddsrank, range_odds[1] range_odds, range_incomerate[1] range_incomerate, 
  range_biasrate[2] range_biasrate, range_minusdaysrate[2] range_minusdaysrate, max_minuschangedcount, range_betcntlimit[1] range_betcntlimit
from stat_ml_kumiban_analyze
order by bettype, kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_kumiban_analyze.tsv' csv delimiter E'\t' header;

copy (
select 
  (bettype || '_' || kumiban) bettype_kumiban, betcount_daily, betcnt, hitcnt, betamt, hitamt, incomeamt,
  hitrate, incomerate, totalrate, pattern_cnt_avg,
  hitamt_bias_rate, minus_days, plus_days, minus_changed_count, plus_changed_count, minus_days_rate, 
  range_oddsrank[1] range_oddsrank, range_odds[1] range_odds, range_incomerate[1] range_incomerate, 
  range_biasrate[2] range_biasrate, range_minusdaysrate[2] range_minusdaysrate, max_minuschangedcount, range_betcntlimit[1] range_betcntlimit,
  case when incomerate <= 100 then 0
       when incomerate > 100 and incomerate <= 150 then 100
       when incomerate > 150 and incomerate <= 200 then 150
       when incomerate > 200 and incomerate <= 250 then 200
       when incomerate > 250 and incomerate <= 299 then 250
       else cast(incomerate as int) / 100 * 100
  end classes
from stat_ml_kumiban_analyze
order by bettype_kumiban
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_kumiban_analyze.arff' csv;

-----------------------
select distinct
  case when incomerate <= 100 then 0
       when incomerate > 100 and incomerate <= 150 then 100
       when incomerate > 150 and incomerate <= 200 then 150
       when incomerate > 200 and incomerate <= 250 then 200
       when incomerate > 250 and incomerate <= 299 then 250
       else cast(incomerate as int) / 100 * 100
  end classes
from stat_ml_ptn_analyze
order by classes;
{paramKumiban=12, 
paramPercentMinusDaysRate=0.1, 
paramPercentBetCnt=0.7, 
paramBettype=2T, 
paramPercentHitRate=0.7, 
paramPercentIncomeRate=0.7, 
paramDescription=203_2T_12-31}

20190715
truncate  stat_ml_result_ptn;
truncate  stat_ml_ptn_cnt;
truncate  stat_ml_ptn_linear;
truncate  stat_ml_ptn_totally;
truncate  stat_ml_ptn_totally_stmp;
truncate  stat_ml_ptn_metric;
truncate  stmp_stat_ml_ptn_final;
truncate  stat_ml_ptn_final;


truncate  stat_ml_result_ptn_analyze;
truncate  stat_ml_ptn_linear_analyze;
truncate  stat_ml_ptn_metric_analyze;
truncate  stat_ml_ptn_analyze;
truncate  stat_ml_kumiban_linear_analyze;
truncate  stat_ml_kumiban_metric_analyze;
truncate  stat_ml_kumiban_analyze;

select
  bettype, kumiban,
  cast( avg(betcnt*8)  as numeric(7,2)) avg_betcnt,
  cast( avg(hitamt)  as numeric(7,2)) avg_hitamt,
  cast( avg(incomeamt) as numeric(7,2)) avg_incomeamt, 
  cast( avg(hitrate)  as numeric(7,2)) avg_hitrate,
  cast( avg(incomerate)  as numeric(7,2)) avg_incomerate,
  cast( avg(hitamt_bias_rate)  as numeric(7,2)) avg_hitamt_bias_rate, 
  cast( avg(minus_days_rate)  as numeric(7,2)) avg_minus_days_rate, 
  cast( avg(minus_changed_count)  as numeric(7,2)) avg_minus_changed_count
from 
  stat_ml_ptn_analyze_depth12
group by bettype, kumiban
order by bettype, kumiban;

select 
  description, bettype, kumiban, ymd, sime, jyocd, raceno, 
  count(pattern_name) pattern_count,
  (sum(hitamt_nolinear) / count(pattern_name)) hitamt
from stat_ml_ptn_linear_analyze linear
where bettype = '2T' and kumiban = '12'
group by description, bettype, kumiban, ymd, sime, jyocd, raceno
order by description, bettype, kumiban, ymd, sime, jyocd, raceno
;




truncate  stat_ml_ptn_final;
truncate  stat_ml_ptn_linear_analyze;
truncate  stat_ml_ptn_analyze;

insert into stat_ml_ptn_final select * from stat_ml_ptn_final_depth12;
insert into stat_ml_ptn_linear_analyze select * from stat_ml_ptn_linear_analyze_depth12;
insert into stat_ml_ptn_analyze select * from stat_ml_ptn_analyze_depth12;

-----------------------
20190714

select * from (
select 'depth12' depth, kumiban
  ,cast(avg(val) as numeric(7,2)) betcnt 
  ,cast(avg(val2) as numeric(7,2)) hitrate
  ,cast(avg(val3) as numeric(7,2)) incomerate
  ,cast(avg(val6) as numeric(7,2)) hitamt_bias_rate
  ,cast(avg(val5) as numeric(7,2)) incomeamt
  ,cast(avg(val4) as numeric(7,2)) minus_days_rate
  ,cast(avg(val7) as numeric(7,2)) minus_changed_count
from (
  select kumiban, avg(betcnt) val, avg(hitrate) val2, avg(incomerate) val3, avg(minus_days_rate) val4
    , avg(incomeamt) val5, avg(hitamt_bias_rate) val6, avg(minus_changed_count) val7
  from stat_ml_ptn_final_depth12 where  incomerate > 110 group by kumiban order by kumiban
) tmp1 group by kumiban 
union
select 'depth3' depth, kumiban
  ,cast(avg(val) as numeric(7,2))  betcnt
  ,cast(avg(val2) as numeric(7,2)) hitrate
  ,cast(avg(val3) as numeric(7,2)) incomerate
  ,cast(avg(val6) as numeric(7,2)) hitamt_bias_rate
  ,cast(avg(val5) as numeric(7,2)) incomeamt
  ,cast(avg(val4) as numeric(7,2)) minus_days_rate
  ,cast(avg(val7) as numeric(7,2)) minus_changed_count
from (
  select kumiban, avg(betcnt) val, avg(hitrate) val2, avg(incomerate) val3, avg(minus_days_rate) val4
    , avg(incomeamt) val5, avg(hitamt_bias_rate) val6, avg(minus_changed_count) val7
  from stat_ml_ptn_final_depth3 where incomerate > 110 group by kumiban order by kumiban
)tmp2 group by kumiban
) tmp3 order by kumiban, depth;


-----------------------
20190711

insert into stat_ml_ptn_final_depth12 select * from stat_ml_ptn_final;
insert into stat_ml_ptn_linear_analyze_depth12 select * from stat_ml_ptn_linear_analyze;
insert into stat_ml_ptn_analyze_depth12 select * from stat_ml_ptn_analyze;
copy ( select * from stat_ml_ptn_final_depth12
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.depth12.bin' binary;
copy ( select * from stat_ml_ptn_linear_analyze_depth12
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_linear_analyze.depth12.bin' binary;
copy ( select * from stat_ml_ptn_analyze_depth12
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze.depth12.bin' binary;


insert into stat_ml_ptn_final_depth3 select * from stat_ml_ptn_final;
insert into stat_ml_ptn_linear_analyze_depth3 select * from stat_ml_ptn_linear_analyze;
insert into stat_ml_ptn_analyze_depth3 select * from stat_ml_ptn_analyze;
copy ( select * from stat_ml_ptn_final_depth3
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.depth3.bin' binary;
copy ( select * from stat_ml_ptn_linear_analyze_depth3
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_linear_analyze.depth3.bin' binary;
copy ( select * from stat_ml_ptn_analyze_depth3
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze.depth3.bin' binary;

-----------------------
20190710
select bettype, kumiban,
  sum(betcnt) / 120 daily_betcnt, 
  sum(incomeamt) sum_incomeamt, 
  cast(avg(hitrate) as numeric(7,2)) avg_hitrate, 
  cast(avg(incomerate) as numeric(7,2)) avg_incomerate, 
  cast(avg(minus_changed_count) as numeric(7,2)) avg_minus_changed_count, 
  cast(avg(minus_days_rate) as numeric(7,2)) avg_minu_days_rate
from stat_ml_ptn_analyze
-- where minus_days_rate <= 0.05
group by bettype, kumiban
order by bettype, kumiban;


select count(*) cnt from stat_ml_ptn_final_depth12;
select count(*) cnt from stat_ml_ptn_final_depth3;

select count(*) cnt from stat_ml_ptn_final_depth12 
  where bettype in ('2T', '3T') and
        minus_changed_count <= 0 and incomerate >= 110 and minus_days_rate <= 0.05;
select count(*) cnt from stat_ml_ptn_final_depth3
  where minus_changed_count <= 0 and incomerate >= 110 and minus_days_rate <= 0.05;

select bettype, sum(betcnt)
from stat_ml_ptn_final_depth3
group by bettype;

insert into stat_ml_ptn_final_depth3 select * from stat_ml_ptn_final;
insert into stat_ml_ptn_final select * from stat_ml_ptn_final_depth3;

copy stat_ml_ptn_final_depth12 from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.20190709.depth12.betcnt50.bin' binary;
-----------------------
20190707
truncate stat_ml_ptn_analyze_bak;
insert into stat_ml_ptn_analyze_bak 
 select * from stat_ml_ptn_analyze;

copy (
select * from stat_ml_ptn_final
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_final.20190709.depth12.betcnt50.bin' binary;
copy (
select * from stat_ml_ptn_analyze
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_analyze.bin' binary;
copy (
select * from stat_ml_ptn_linear_analyze
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_linear_analyze.bin' binary;

copy stat_ml_ptn_linear_analyze from 'C:\Dev\workspace\Oxygen\pod_boatrace_test\wekamodels\copy_files\stat_ml_ptn_linear_analyze.bin' binary;
-- 중복패턴명 찾기

select distinct (tmp1.pattern_name || '::' || tmp2.pattern_name) ptn
from 
( select *
  from stat_ml_ptn_analyze 
) tmp1,
( select *
  from stat_ml_ptn_analyze
) tmp2
where tmp1.bettype = '1T' and tmp1.kumiban = '2'
  and tmp1.pattern_name <> tmp2.pattern_name
  and tmp1.bettype = tmp2.bettype
  and tmp1.kumiban = tmp2.kumiban
  and tmp1.totalrate = tmp2.totalrate
  and tmp1.linear_betamt_slope = tmp2.linear_betamt_slope
  and tmp1.linear_hitamt_slope = tmp2.linear_hitamt_slope
  and tmp1.linear_incomeamt_slope = tmp2.linear_incomeamt_slope
  and tmp1.hitamt_sum_under = tmp2.hitamt_sum_under
  and tmp1.hitamt_sum_over = tmp2.hitamt_sum_over
order by ptn
;



select * from
(
select
  'stat_ml_ptn_analyze' tbl,
  bettype, 
  kumiban,
  (case when incomerate > 100 then 'winner' else 'looser' end) ttype,  
  cast( avg(hitrate) as numeric(7,2)) avg_hitrate, 
  cast( avg(betcnt)  as numeric(7,2)) avg_betcnt,
  cast( avg(hitamt_bias_rate)  as numeric(7,2)) avg_hitamt_bias_rate, 
  cast( mode() within group (order by hit_bet_slope_rate)  as numeric(7,2)) mod_hit_bet_slope_rate, 
  cast( avg(hit_bet_slope_rate)  as numeric(7,2)) avg_hit_bet_slope_rate, 
  cast( stddev(hit_bet_slope_rate) as numeric(7,2)) dev_hit_bet_slope_rate, 
  cast( avg(linear_incomeamt_slope) as numeric(7,7)) avg_linear_incomeamt_slope 
from stat_ml_ptn_analyze
group by tbl, bettype, kumiban, ttype
union
select
  'stat_ml_ptn_final' tbl,
  bettype, 
  kumiban,
  (case when incomerate > 100 then 'winner' else 'looser' end) ttype,  
  cast( avg(hitrate) as numeric(7,2)) avg_hitrate, 
  cast( avg(betcnt)  as numeric(7,2)) avg_betcnt,
  cast( avg(hitamt_bias_rate)  as numeric(7,2)) avg_hitamt_bias_rate, 
  cast( mode() within group (order by hit_bet_slope_rate)  as numeric(7,2)) mod_hit_bet_slope_rate, 
  cast( avg(hit_bet_slope_rate)  as numeric(7,2)) avg_hit_bet_slope_rate, 
  cast( stddev(hit_bet_slope_rate) as numeric(7,2)) dev_hit_bet_slope_rate, 
  cast( avg(linear_incomeamt_slope) as numeric(7,7)) avg_linear_incomeamt_slope 
from stat_ml_ptn_final
group by tbl, bettype, kumiban, ttype
) tmp1
order by bettype, kumiban, ttype, tbl;

select * from stat_ml_ptn_final where bettype = '2T' and kumiban = '12' and pattern_name = 'nationrank12_femalecount'
order by pattern_value;

-----------------------
20190706
select 
  cast(regr_slope(col1, no) as numeric(7,7)) linear_betamt_slope,
  cast(regr_slope(col2, no) as numeric(7,7)) linear_hitamt_slope,
  cast(regr_slope(col3, no) as numeric(7,7)) linear_incomeamt_slope,
  cast(regr_slope(col4, no) as numeric(7,7)) linear_hitrate_slope
from test;

drop table test;
create table test (no int, col1 int, col2 int, col3 int, col4 int);
copy test from 'C:\Dev\workspace\Oxygen\pod_boatrace\weka\test.csv' csv delimiter E'\t' header ;
-----------------------
20190705
select array_length(string_to_array(pattern_name, '_')) depth, avg(betcnt)
from stat_ml_ptn_analyze
where bettype = '3T' and kumiban = '123'
;

-----------------------
20190704

select * from stat_ml_ptn_analyze
where 
  incomerate > 100
  and hitrate > 30;
  
select * from stat_ml_ptn_linear 
where pattern_value = '2A1-B1-A1';

select count(*) from stat_ml_result_ptn;
select count(*) from stat_ml_ptn_cnt;
select count(*) from stat_ml_ptn_linear;
select count(*) from stat_ml_ptn_linear_bak;
select count(*) from stat_ml_ptn_totally;
select count(*) from stat_ml_ptn_metric;
select count(*) from stat_ml_ptn_stat_

select count(*) from stat_ml_result_ptn_analyze;
select count(*) from stat_ml_ptn_linear_analyze;
select count(*) from stat_ml_ptn_metric_analyze;

select count(*) from stat_ml_ptn_final;
select count(*) from stat_ml_ptn_analyze;
select count(*) from stat_ml_kumiban_analyze;


truncate  stat_ml_ptn_linear_bak;

-----------------------
20190624
select date_part('day',age('20121231', '20120101'));
select '20131231'::date - '20120101'::date;

-----------------------
20190623
select 
  bettype, bet_kumiban, bet_oddsrank, sum(betamt), sum(hitamt)
from stat_ml_result_2
group by bettype, bet_kumiban, bet_oddsrank
order by bettype, bet_kumiban, bet_oddsrank;
  
  
copy (
select
  final.bettype, final.bet_kumiban,
  race.jyocd, 
  race.turn, 
  race.raceno, 
  race.racetype_simple, 
  race.alevelcount alcount,
  substring(race.wakulevellist from 1 for 5) wakulevel12,
  final.hity
from rec_race race, stat_ml_result stat
 where final.description = 'multi_week_103_2T_1241_entry' and final.ymd >= '20150101' and final.ymd <= '20190510'
 and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno

-----------------------
select *, 100 as betamt_nolinear from stat_ml_ptn_linear
where description = 'multi_week_103_2T_1241_entry' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '43';

select *, 100 as betamt_nolinear from stat_ml_ptn_linear
where description = '108_2T_12--13_entry_multi' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '33';

select * from stat_ml_ptn_final 
where description = '108_2T_12--13_entry_multi'
  and bettype = '2T' and kumiban = '12'  and pattern_name = 'jyocd_racetype' order by incomerate desc;

select * from stat_ml_ptn_final 
where description = '107_1T_1-6_entry_multi'
  and bettype = '1T' and kumiban = '2'  and pattern_name = 'turn_raceno_level12' order by incomerate desc;
  
select * from stat_ml_ptn_final 
where description = '110_3T_123--22_entry_multi'
  and bettype = '3T' and kumiban = '123'  and pattern_name = 'turn_raceno' order by incomerate desc;


select * from stat_ml_ptn_final where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno' order by incomerate desc;

select * from stat_ml_result_ptn_analyze where bettype = '2T' and bet_kumiban = '12' and pattern_name = 'turn_raceno' order by ymd, sime;

select * from stat_ml_ptn_linear_analyze  where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno' order by ymd, sime;

select * from stat_ml_ptn_metric_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno';

select * from stat_ml_ptn_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno';

select * from stat_ml_ptn_final where bettype = '2T' and kumiban = '13' and pattern_name = 'turn_alcount_level13' order by description, incomerate desc;

select * from stat_ml_result_ptn_analyze where bettype = '2T' and bet_kumiban = '12' and pattern_name = 'turn_alcount_level12' order by ymd, sime;

select * from stat_ml_ptn_linear_analyze  where bettype = '2T' and kumiban = '12' and pattern_name = 'racetype_level12' order by description, ymd, sime;

select * from stat_ml_ptn_metric_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_alcount_level12';

select * from stat_ml_ptn_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_alcount_level12';

delete from stat_ml_ptn_analyze 
where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno_alcount' 
and isfinal = 'n' and iscustom = 'n'; 




select analyze_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'racetype_level12', 'race.racetype_simple || substring(race.wakulevellist from 1 for 5)',
  array['20190101', '20190430'], 
  array[1,100], -- oddsrank 0,1000 3,4
  array[1,100], -- odds 0,1000
  array[0,100], -- totalrate 0,100  
  array[20,100], -- hitrate 0,100
  array[100,1000], -- incomerate 100, 1000
  0.8, array[0,10], -- bias percent, biasrate 0, 5
  'n', -- isfinal
  'n'  -- iscustom
);

select bettype, kumiban, betcount_daily, betamt, incomeamt, hitrate, incomerate, totalrate, hitamt_bias_rate::text,
linear_hitrate_slope::text, linear_incomerate_slope::text, linear_incomeamt_slope::text,
range_oddsrank::text, range_odds::text, range_totalrate::text, range_hitrate::text, range_incomerate::text, range_biasrate::text, description, pattern_name
from stat_ml_ptn_analyze
where bettype = '2T' and kumiban = '12' and pattern_name = 'racetype_level12'
and isfinal = 'n' and iscustom = 'n'
order by updatetime desc, bettype, kumiban;

--------------------------------
20190620
delete from  stat_ml_result where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_result_ptn where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_cnt where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_linear where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_totally where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_metric where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_final where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_linear_analyze where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_metric_analyze where description <> 'multi_week_103_2T_1241_entry';
delete from  stat_ml_ptn_analyze where description <> 'multi_week_103_2T_1241_entry';

select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '14', 'turn_alcount_level14', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 2) || substring(race.wakulevellist from 10 for 2)', 100, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '14', 'turn_alcount_level14', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 2) || substring(race.wakulevellist from 10 for 2)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '31', 'turn_alcount_level13', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 2) || substring(race.wakulevellist from 7 for 2)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '13', 'turn_alcount_level13', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 2) || substring(race.wakulevellist from 7 for 2)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '21', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '14', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '13', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'jyocd_turn', 'race.jyocd || race.turn', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'jyocd_raceno', 'race.jyocd || race.raceno', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'raceno_level12', 'race.raceno || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');

select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'turn_level12', 'race.turn || substring(race.wakulevellist from 1 for 5)', 30, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'racetype_level12', 'race.racetype_simple || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');

--------------------------------
20190619
make_result_multi 2T nirentan multi_6month_73_2T_12_entry_2014-2019 "73_2T_12_" 20150101 20190430
select output_weka_pattern('multi_6month_73_2T_12_entry_2014-2019', '2T', '12', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');

select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'turn_alcount_level12', 'race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5)', 50, 0.8, '20150101', '20181231');

select output_weka_pattern('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno', 'turn || race.raceno', 100, 0.8, '20150101', '20181231');




select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', 'turn || race.raceno', 100, 0.8, '20150101', '20181231');
select * from stat_ml_ptn_final where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno' order by incomerate desc;

select create_stat_ml_result_ptn_analyze('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', 'turn || race.raceno', '20190101', '20190430');
select * from stat_ml_result_ptn_analyze where bettype = '2T' and bet_kumiban = '12' and pattern_name = 'turn_raceno' order by ymd, sime;

select create_stat_ml_ptn_linear_analyze('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', array[1,1000], array[1,1000], array[0,100], array[0,100], array[100,1000]);
select * from stat_ml_ptn_linear_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno' order by ymd, sime;

select create_stat_ml_ptn_metric_analyze('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', 0.8);
select * from stat_ml_ptn_metric_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno';

select create_stat_ml_ptn_analyze('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno',
			array[1,1000], array[1,1000], array[0,100], array[0,100], array[100,1000], array[0,100], 'n', 'n');
select * from stat_ml_ptn_analyze where bettype = '2T' and kumiban = '12' and pattern_name = 'turn_raceno';

--------------------------------
20190618
	select create_stat_ml_ptn_linear_analyze('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', 
			array['20190101', '20190430'], array[1,1000], array[1,1000], array[0,100], array[0,100], array[100,1000]);
	
	perform create_stat_ml_ptn_metric(paramDescription, paramBettype, paramKumiban, paramPatternName, paramMetricBiasPercent);
	
	perform create_stat_ml_ptn_analyze(paramDescription, paramBettype, paramKumiban, paramPatternName, 
			paramArrOddsRank, paramArrOdds, paramArrTotalRate, paramArrHitRate, paramArrIncomeRate, paramArrBiasRate, paramIsFinal, paramIsCustom);
	

select date_part('day',age('2012-04-30', '2012-04-01'));
select age('2010-04-01', '2012-03-05');
--------------------------------
20190617
select description, bettype, kumiban, pattern_name, count(*) from stat_ml_ptn_linear linear
group by description, bettype, kumiban, pattern_name;

where linear.description = '107_1T_1-6_entry_multi' and linear.bettype = '1T' and linear.kumiban = '1' and linear.pattern_name = 'jyocd_raceno';


--------------------------------
20190616
  percentile_disc(0.5) within group (order by nirentanprize) center, -- 中央値
  mode() within group (order by nirentanprize) mod, --最頻値
  percentile_disc(0.25) within group (order by nirentanprize) mod35, -- 2分位値
  percentile_disc(0.75) within group (order by nirentanprize) mod75, -- 3分位値
  stddev (nirentanprize) deviation, -- 標準偏差
  variance (nirentanprize) vari -- 分散標本

select 
  percentile_disc(0.90) within group (order by hitamt_nolinear) mod90 -- 80%値
from stat_ml_ptn_linear
--where description = 'multi_week_103_2T_1241_entry' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '43' and hitamt_nolinear > 0;
where description = '108_2T_12--13_entry_multi' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '33' and hitamt_nolinear > 0;


select 
  sum(case when hitamt_nolinear <= 710 then hitamt_nolinear else 0 end) sum_normal,
  sum(case when hitamt_nolinear > 710 then hitamt_nolinear else 0 end) sum_biased
from stat_ml_ptn_linear
--where description = 'multi_week_103_2T_1241_entry' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '43' and hitamt_nolinear > 0;
where description = '108_2T_12--13_entry_multi' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '33' and hitamt_nolinear > 0;

select 
  cast(regr_slope(betamt, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_betamt_slope,
  cast(regr_slope(hitamt, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_hitamt_slope,
  cast(regr_slope(incomeamt, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_incomeamt_slope,
  cast(regr_slope(hitrate, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_hitrate_slope,
  cast(regr_slope(incomerate, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_incomerate_slope
from stat_ml_ptn_linear
--where description = 'multi_week_103_2T_1241_entry' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '43';
where description = '108_2T_12--13_entry_multi' and bettype = '2T' and kumiban = '12'  and pattern_name = 'turn_raceno' AND PATTERN_VALUE = '33';


      select * from stat_ml_ptn_cnt
      where description = '108_2T_12--13_entry_multi' and bettype = '2T' and kumiban = '21' and pattern_name = 'turn_raceno'
        and pattern_cnt >= 100;

select count(*) from stat_ml_result_ptn where description = 'multi_week_103_2T_1241_entry';
select count(*) from stat_ml_ptn_cnt where description = 'multi_week_103_2T_1241_entry';
select count(*) from stat_ml_ptn_linear where description = 'multi_week_103_2T_1241_entry';
select count(*) from stat_ml_ptn_daily where description = 'multi_week_103_2T_1241_entry';
select count(*) from stat_ml_ptn_totally where description = 'multi_week_103_2T_1241_entry';
select * from stat_ml_ptn_totally where description = 'multi_week_103_2T_1241_entry';

delete from stat_ml_result where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_result_ptn where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_ptn_linear where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_ptn_metric where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_ptn_totally where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_ptn_final where description = 'multi_week_103_2T_1241_entry';

delete from stat_ml_result_ptn where description = 'multi_week_103_2T_1241_entry';
delete from stat_ml_result_ptn where description = 'multi_week_103_2T_1241_entry';


truncate stat_ml_result_ptn;
truncate stat_ml_ptn_cnt;
truncate stat_ml_ptn_linear;
truncate stat_ml_ptn_totally;
truncate stat_ml_ptn_metric;
truncate stat_ml_ptn_final;
truncate stat_ml_result_ptn_analyze;
truncate stat_ml_ptn_linear_analyze;
truncate stat_ml_ptn_metric_analyze;
truncate stat_ml_ptn_analyze;

multi_week_103_2T_1241_entry
108_2T_12--13_entry_multi

select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno_alcount', 'turn || race.raceno || alevelcount', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '21', 'turn_raceno_alcount', 'turn || race.raceno || alevelcount', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '21', 'turn_raceno', 'turn || race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno', 'turn || race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_raceno', 'race.jyocd || race.raceno', 100, 0.8, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_racetype', 'race.jyocd || race.racetype_simple', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_alcount', 'race.jyocd || race.alevelcount', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'a1count_a2count_b2count', 'turn || a1count || a2count || b2count', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd', 'race.jyocd', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_turn', 'race.jyocd || turn', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '21', 'jyocd', 'race.jyocd', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'raceno', 'race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '21', 'raceno', 'race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'turn_raceno_level12', 'turn || race.raceno || substring(race.wakulevellist from 1 for 5)', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'raceno_level12', 'race.raceno || substring(race.wakulevellist from 1 for 5)', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'raceno_level12', 'race.raceno || substring(race.wakulevellist from 1 for 5)', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_raceno_a1count', 'race.jyocd || race.raceno || a1count', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_raceno_alcount', 'race.jyocd || race.raceno || alevelcount', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '13', 'jyocd_raceno_alcount', 'race.jyocd || race.raceno || alevelcount', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('108_2T_12--13_entry_multi', '2T', '12', 'jyocd_racetype', 'race.jyocd || race.racetype_simple', 100, 0.9, '20150101', '20181231');

select output_weka_pattern('110_3T_123--22_entry_multi', '3T', '123', 'turn_raceno', 'turn || race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('110_3T_123--22_entry_multi', '3T', '123', 'jyocd', 'race.jyocd', 100, 0.9, '20150101', '20181231');


select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '2', 'jyocd', 'race.jyocd', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '1', 'jyocd_raceno', 'race.jyocd || race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '2', 'jyocd_raceno', 'race.jyocd || race.raceno', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '1', 'jyocd_turn_raceno', 'race.jyocd || turn || race.raceno', 50, 0.9, '20150101', '20181231');
select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '1', 'turn_raceno_level12', 'turn || race.raceno || substring(race.wakulevellist from 1 for 5)', 100, 0.9, '20150101', '20181231');
select output_weka_pattern('107_1T_1-6_entry_multi', '1T', '2', 'turn_raceno_level12', 'turn || race.raceno || substring(race.wakulevellist from 1 for 5)', 100, 0.9, '20150101', '20181231');

select create_stat_ml_result_ptn('multi_week_103_2T_1241_entry', '2T', '12', 'jyocd_raceno', 'turn || race.raceno', '20150101', '20181231');
select create_stat_ml_ptn_cnt('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno');
select create_stat_ml_ptn_linear('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno', 100); -- bet minimum
select create_stat_ml_ptn_daily('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno');
select create_stat_ml_ptn_totally('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno');
select create_stat_ml_ptn_metric('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno', 0.9);  -- hitamt_nolinear bias percentage limit
select create_stat_ml_ptn_final('multi_week_103_2T_1241_entry', '2T', '12', 'turn_raceno');

select create_stat_ml_result_ptn('108_2T_12--13_entry_multi', '2T', '31', 'turn_raceno', 'turn || race.raceno', '20150101', '20181231');
select create_stat_ml_ptn_cnt('108_2T_12--13_entry_multi', '2T', '31', 'turn_raceno');
select create_stat_ml_ptn_linear('108_2T_12--13_entry_multi', '2T', '31', 'turn_raceno', 100);
select create_stat_ml_ptn_daily('108_2T_12--13_entry_multi', '2T', '31', 'turn_raceno');
select create_stat_ml_ptn_totally('108_2T_12--13_entry_multi', '2T', '31', 'turn_raceno');

--------------------------------
20190615
select count( distinct (race.turn || race.raceno || a1count::text || a2count::text || b1count::text || b2count::text) )
from rec_race_metric metric, rec_race race
where race.ymd = metric.ymd and race.jyocd = metric.jyocd and race.raceno = metric.raceno;

create table rec_race_bak as
select * from rec_race;


select 
  ymd, jyocd, raceno, level,
  (select sum(case lvl when 'A1' then 1 else 0 end) from unnest(level) as dt(lvl)) as a1count 
from rec_racer_arr
where ymd >= '20180101' and ymd <= '20181231';


--------------------------------
20190614
select
  pattern_value, max_betamt, max_hitamt, max_income
from 
(
	select 
	  pattern_value, max(betamt) max_betamt, max(hitamt) max_hitamt, (max(hitamt) - max(betamt)) max_income
	  -- slope, variance
	from stat_ml_ptn_linear
	group by pattern_value
	order by max_income desc
) tmp
where tmp.max_betamt > 5000
order by max_income desc;

select pattern_value, count(*) cnt from stat_ml_ptn_linear
group by pattern_value
order by cnt desc;

select (max(hitamt) - max(betamt)) max_income from stat_ml_ptn_linear;

select * from stat_ml_ptn_linear
order by pattern_value, ymd, sime;

select count(*) from stat_ml_ptn_linear;

select * from stat_ml_ptn_analyze where iscustom = 'n';

--------------------------------
20190613
select 
  pattern_value, max(betamt), max(hitamt) 
from stat_ml_ptn_linear;


--------------------------------
20190609
select 
  final.bettype, final.bet_kumiban, final.ymd, final.jyocd, final.raceno, final.bet_odds, final.bet_oddsrank, final.result_odds, final.result_oddsrank, final.hity, final.hitn,
  final.betamt, final.hitamt, (final.hitamt - final.betamt) incomeamt,
  final.betrate, final.hitrate, final.incomerate, final.totalrate
from stat_ml_ptn_linear linear, stat_ml_result_ptn final. stat_ml_ptn_final final
where linear.ymd = final.ymd and linear.jyocd = final.jyocd and linear.raceno = final.raceno and linear.sime = final.sime
  and linear.bettype = final.bettype and linear.kumiban = final.kumiban and linear.pattern_name = final.pattern_name and linear.pattern_value = final.pattern_value
order by final.ymd, final.sime;


delete from stat_ml_result where ymd <= '20141231';
delete from stat_ml_result_ptn where ymd <= '20141231';


delete from stat_ml_ptn_analyze 
where pattern_name = 'turn_alcount_level12' 
and isfinal = 'n'; 

select analyze_weka_pattern('turn_alcount_level12',
  array['20190101', '20190430'], 
  array[0,1000], -- oddsrank 0,1000
  array[0,1000], -- odds 0,1000
  array[0,100], -- totalrate 0,100  
  array[0,100], -- hitrate 0,100
  array[100,1000], -- incomerate 100, 1000
  'n' -- isfinal
);

select bettype, kumiban, yyyy, mm, betcount_daily, betamt, incomeamt, hitrate, incomerate,
range_oddsrank::text, range_odds::text, range_totalrate::text, range_hitrate::text, range_incomerate::text, description, pattern_name
from stat_ml_ptn_analyze
where pattern_name = 'turn_alcount_level12'
and yyyy in ( '2019')
-- and yyyy in ('2019', '2018')
-- and ismonthly = 'y'
and isfinal = 'n'
order by updatetime desc, bettype, kumiban, yyyy, mm;


select * from stat_ml_result_ptn 
where ymd = '20199119
      final.bettype,
      final.kumiban,
      final.pattern_name,
      cast(365/99 as int) betcount_daily,
      sum(final.betcnt) betcnt,
      sum(final.hity) hitcnt,

select linear.ymd || linear.jyocd || linear.raceno from stat_ml_ptn_linear linear;

    select
      final.bettype bettype,
      final.bet_kumiban kumiban,
      final.pattern_name pattern_name,
      cast(365/99 as int) betcount_daily,
      sum(1) betcnt,
      sum(final.hity) hitcnt,
      sum(final.betamt) betamt, 
      sum (final.hitamt) hitamt, 
      sum (final.hitamt) - sum(final.betamt) incomeamt,
      cast( (cast(sum(final.hity) as float)/ cast(sum(1) as float) *100) as numeric(7,2)) hitrate, 
      cast( (cast(sum (final.hitamt) as float)/ cast(sum(final.betamt) as float) *100) as numeric(7,2)) incomerate, 
      cast(avg(final.totalrate) as numeric(7,2)) totalrate,
      cast(regr_slope(linear.hitrate, (linear.ymd || linear.sime)::bigint) * 1000000 as numeric(19,2)) linear_hitrate_slope,
      cast(regr_slope(linear.incomerate, (linear.ymd || linear.sime)::bigint) * 1000000 as numeric(19,2)) linear_incomerate_slope,
      cast(regr_slope(linear.incomeamt, (linear.ymd || linear.sime)::bigint) * 1000000 as numeric(19,2)) linear_incomeamt_slope 
    from stat_ml_ptn_linear linear, stat_ml_result_ptn final. stat_ml_ptn_final final
    where final.ymd >= '20190101' and final.ymd <= '20190430'
      and linear.ymd = final.ymd and linear.jyocd = final.jyocd and linear.raceno = final.raceno and linear.sime = final.sime
      and linear.pattern_name = final.pattern_name
      and linear.pattern_value = final.pattern_value
      and linear.pattern_name = final.pattern_name
      and linear.pattern_value = final.pattern_value
    group by final.bettype, final.bet_kumiban, final.pattern_name
;
  
  (
    select
      description, bettype, kumiban, pattern_name, pattern_value, 
      cast(regr_slope(hitrate, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_hitrate_slope,
      cast(regr_slope(incomerate, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_incomerate_slope,
      cast(regr_slope(incomeamt, (ymd || sime)::bigint) * 10000000 as numeric(19,5)) linear_incomeamt_slope 
    from stat_ml_ptn_linear
    group by description, bettype, kumiban, pattern_name, pattern_value
  ) linear_stat
  
;

    select 
      final.*
    from stat_ml_result_ptn final. stat_ml_ptn_final final
    where final.description = final.description and final.pattern_name = final.pattern_name and final.pattern_value = final.pattern_value
      and final.ymd >= '20190101' and final.ymd <= '20190430'
      and final.bet_oddsrank >= 0 and final.bet_oddsrank <= 1000
      and final.bet_odds >= 1 and final.bet_odds <= 1000
      and totalrate >= 0 and totalrate <= 1000
      and hitrate >= 0 and hitrate <= 100
      and incomerate >= 100 and incomerate <= 1000
    order by final.ymd, final.sime;
    
    
    select 
      'turn_alcount_level12' pattern_name,
       race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5) as pattern_value,
       count(*) cnt
    from stat_ml_result stat
	where final.ymd >= '20140101' and final.ymd <= '20181231'
	  and final.bettype = '2T' and final.bet_kumiban = '12'
	order by cnt desc
;
    
		truncate stat_ml_result_ptn;
		insert into stat_ml_result_ptn
		select
		   final.*,
		   'turn_alcount_level12' pattern_name,
		   race.turn || race.alevelcount || substring(race.wakulevellist from 1 for 5) as pattern_value
		from stat_ml_result final. rec_race race
		where race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
	      and final.bettype = '2T' and final.bet_kumiban = '12';
	  
	  select 
	    *
	  from tmp_stat_ml_result_ptn final.tn
	  where final.tn.pattern_name = 'turn_alcount_level12'
	    and final.tn.pattern_value = '23B1-A1'
	    and final.tn.ymd >= '20140101' and final.tn.ymd <= '20181231'
	    and final.tn.bettype = '2T' and final.tn.bet_kumiban = '12'
	  order by final.tn.ymd, final.tn.sime
;

--------------------------------
20190604

select 
  weka.bettype,
  weka.bet_kumiban,
  pattern_name,
  sum(weka.hity) sum_hity,
  sum(weka.hitn) sum_hitn,
  ( sum(weka.hity) / (sum(weka.hity) + sum(weka.hitn)) ) * 100 hit_rate,  
  sum(weka.betamt) sum_betamt,
  sum(weka.hitamt) sum_hitamt,
  (sum(weka.hitamt) / sum(weka.betamt)) * 100 income_rate,
  sum(weka.hitamt) - sum(weka.betamt) balance
from stat_ml_result_wekaptn wekaptn, stat_ml_result_weka weka
where weka.ymd = wekaptn.ymd 
  and weka.jyocd = wekaptn.jyocd
  and weka.raceno = wekaptn.raceno
  and weka.bettype = wekaptn.bettype
  and weka.bet_kumiban = wekaptn.bet_kumiban
group by weka.bettype, weka.bet_kumiban, pattern_name
order by balance desc
;

select
  ymd, jyocd, raceno, bettype, cnt
from
(select 
  ymd, jyocd, raceno, bettype, count(*) cnt
 from stat_ml_result_weka weka
 group by ymd, jyocd, raceno, bettype
 order by ymd, jyocd, raceno, bettype
) tmp
where tmp.cnt > 1
;

--------------------------------
20190603
copy (
  select * from stat_ml_result_wekaptn
) to 'C:\Dev\workspace\Oxygen\pod_boatrace_test\export\stat_ml_result_wekaptn.csv' with csv header;


delete from stat_ml_result_weka where bettype = '2T';
delete from stat_ml_result_wekaptn where bettype = '2T';
--------------------------------
select
from stat_ml_ptn_analyze anal, stat_ml_ptn_final final
where anal.description


select count(*) from stat_ml_ptn_analyze;
select count(*) from stat_ml_result_ptn;
select count(*) from stat_ml_ptn_final;

select description, pattern_name, count(*) 
from stat_ml_result_ptn
group by description, pattern_name;

select description, pattern_name, count(*) 
from stat_ml_ptn_final
group by description, pattern_name;

select
  substring(final.ymd from 1 for 4) yyyy, 
  substring(final.ymd from 5 for 2) mm,
  cast(avg(final.bet_oddsrank) as numeric(7,2)) avg_oddsrank, 
  cast(stddev(final.bet_oddsrank) as numeric(7,2)) devi_oddsrank,
  cast(avg(final.bet_odds) as numeric(7,2)) avg_odds, 
  cast(stddev(final.bet_odds) as numeric(7,2)) devi_odds,
  cast(avg(final.totalrate) as numeric(7,2)) avg_totalrate, 
  cast(stddev(final.totalrate) as numeric(7,2)) stddev_totalrate,
  cast(avg(final.hitrate) as numeric(7,2)) avg_hitrate, 
  cast(stddev(final.hitrate) as numeric(7,2)) stddev_hitrate,
  cast(avg(final.incomerate) as numeric(7,2)) avg_incomerate, 
  cast(stddev(final.incomerate) as numeric(7,2)) stddev_incomerate
from stat_ml_result_ptn final. stat_ml_ptn_final final
where final.ymd >= '20190101' and final.ymd <= '20190331'
  and final.description = final.description and final.pattern_name = final.pattern_name and final.pattern_value = final.pattern_value
  and final.description = 'multi_6month_65_1T_1_entry_2014-2019' and final.pattern_name = 'turn_racetype_level1'
  and (  
    (totalrate >= 0 and totalrate <= 100) and
    (hitrate >= 0 and hitrate <= 100) and 
    (incomerate >= 100 and incomerate <= 10000)
  )
group by yyyy, mm
order by yyyy, mm
;  

select bettype, kumiban, yyyy, mm, betcount_daily, incomeamt, hitrate, incomerate,
range_oddsrank::text, range_odds::text, range_totalrate::text, range_hitrate::text, range_incomerate::text, description, pattern_name
from stat_ml_ptn_analyze
where isfinal = 'y' and ismonthly = 'n';

select * from stat_ml_result_ptn
where description = 'multi_6month_65_1T_1_entry_2014-2019'
order by ymd desc
;
-------------
truncate stat_ml_ptn_final;
truncate stat_ml_ptn_analyze;

select distinct description from stat_ml_result;

delete from stat_ml_ptn_analyze 
where description = 'multi_6month_65_1T_1_entry_2014-2019' and pattern_name = 'turn_raceno_level12' 
and isfinal = 'n' 
 --and ismonthly = 'y'
;

select analyze_weka_pattern('multi_6month_65_1T_1_entry_2014-2019', 'turn_raceno_level12', 
  'y', -- ismonthly 
  array['20180101', '20190331'], 
  array[0,1000], -- oddsrank 0,1000
  array[1,1000], -- odds 0,1000
  array[0,100], -- totalrate 0,100  
  array[0,100], -- hitrate 0,100
  array[100,1000], -- incomerate 100, 1000
  'n' -- isfinal
);

select bettype, kumiban, yyyy, mm, betcount_daily, betamt, incomeamt, hitrate, incomerate,
range_oddsrank::text, range_odds::text, range_totalrate::text, range_hitrate::text, range_incomerate::text, description, pattern_name
from stat_ml_ptn_analyze
where description = 'multi_6month_65_1T_1_entry_2014-2019' and pattern_name = 'turn_raceno_level12'
and yyyy in ('2018', '2019')
-- and yyyy in ('2019', '2018')
-- and ismonthly = 'y'
and isfinal = 'n'
order by updatetime desc, yyyy, mm;

--------------

select distinct description, pattern_name
from stat_ml_ptn_final;

select 
  (race.jyocd || '_' || race.turn || '_' || substring(race.wakulevellist from 1 for 5)) ptn,
  substring(final.ymd from 1 for 4) y, 
  avg(bet_odds) avgodds, 
  stddev(bet_odds) deviodds,
  avg(bet_oddsrank) avgoddsrank, 
  stddev(bet_oddsrank) devioddsrank
from stat_ml_result final. rec_race race, stat_ml_ptn_final final
where race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
  and race.ymd >= '20180101' and race.ymd <= '20190419'
  and final.description = 'multi_6month_77_3T_123_entry_2014-2019'
  and final.bet_kumiban = '123' 
  and final.hity = 1
  and final.description = final.description 
  and final.pattern_value = (race.jyocd || '_' || race.turn || '_' || substring(race.wakulevellist from 1 for 5))
  and final.incomerate >= 90
group by ptn, y
order by ptn, y
;

--------------------------------------------------------
from stat_ml_result_pth final. rec_odds odds
where final.ymd >= '20170101' and final.ymd <= '20181231'   
  and odds.ymd = final.ymd and odds.jyocd = final.jyocd and odds.raceno = final.raceno 
  and odds.bettype = final.bettype and final.bet_kumiban = 

--------------------------------------------------------
패턴 적용한 시뮬레이션 결과 보기

select
  'multi_6month_65_1T_1_entry_2014-2019' description,
  'turn_raceno_level12' pattern_name,
  yyyy,
--  yyyymm,
  kumiban, betcnt, (hitamt - betamt) incomeamt, cast( (cast(hitcnt as float)/ cast(betcnt as float) *100) as numeric(7,2)) hitrate, cast( (cast(hitamt as float)/ cast(betamt as float) *100) as numeric(7,2)) incomerate, hitcnt, betamt, hitamt
from
(
select
  bet_kumiban kumiban,
  substring(final.ymd from 1 for 4) yyyy,
--  substring(final.ymd from 1 for 6) yyyymm,
  sum(1) betcnt, sum(hity) hitcnt, sum(betamt) betamt, sum ( hitamt ) hitamt 
from stat_ml_result final. rec_race race
where race.ymd >= '20180101' and race.ymd <= '20190419'
  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
  
  -- and final.bet_oddsrank >= 1 and final.bet_oddsrank <= 200
  --and final.bet_odds >= 5 and final.bet_odds <= 500
  
  and final.description = 'multi_6month_65_1T_1_entry_2014-2019'
  and (bet_kumiban ||race.turn || race.raceno || substring(race.wakulevellist from 1 for 5)) in
  (
  select kumiban || pattern_value from stat_ml_ptn_final
  where 
    description = 'multi_6month_65_1T_1_entry_2014-2019'
    and pattern_name = 'turn_raceno_level12'
    and (
         (kumiban = '1' and betrate >= 0 and betcnt >= 0 and hitrate <= 100 and incomerate >= 110 and totalrate >= 0 and stable_years_count >= 1 
      -- and incomerate_slope >= -1.000 ) 
    )
  order by kumiban, pattern_value
  )
group by kumiban
, yyyy
-- , yyyymm
) tmp
;

--------------------------------------------------------

select
  avg(tansyoprize) avg, stddev(tansyoprize) devi, mode() within group (order by tansyoprize) mod
from stat_ml_result final. rec_race race
where race.ymd >= '20180101' and race.ymd <= '20181231'
  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno 
  and final.description = 'multi_6month_68_1T_1234_goodall_2015-2018'
  and bet_kumiban = '1'
  and final.hity = 1
---------------------------

select
  kumiban, betcnt, hitcnt, betamt, hitamt,
  (hitamt - betamt) incomeamt,
  cast( (cast(hitcnt as float)/ cast(betcnt as float) *100) as numeric(7,2)) hitrate,
  cast( (cast(hitamt as float)/ cast(betamt as float) *100) as numeric(7,2)) incomerate
from
(
select
  bet_kumiban kumiban,
  sum(1) betcnt, 
  sum(hity) hitcnt, 
  sum(betamt) betamt, 
  sum ( hitamt ) hitamt 
from stat_ml_result final. rec_race race
where race.ymd >= '20190101' and race.ymd <= '20190228'
  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno 
  and final.description = 'multi_1month_62_1T_123456_entry_2017-2018'
  and (final.bet_kumiban || race.turn || '_' || race.raceno) in 
    (
		select kumiban || pattern_value from stat_ml_ptn_final
		where 
		  description = 'multi_1month_62_1T_123456_entry_2017-2018'
		  and pattern_name = 'turn_raceno'
		  and (
		       (kumiban = '1' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		    or (kumiban = '2' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		    or (kumiban = '3' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		    or (kumiban = '4' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		    or (kumiban = '5' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		    or (kumiban = '6' and betrate >= 0.0 and hitrate >= 0 and incomerate >= 0 and monthly_plus_rate >= 0 and stable_years_count >= 2) 
		  )
		order by kumiban, pattern_value
    )
group by kumiban
) tmp
;
---------------------------


create table stat_ml_result_bak_20190415 as
select * from stat_ml_result;


select * from analyze_proc('24_1T_123456_entry_20171231', 'race.racetype_simple', 'substring(nationwiningrank from 2 for 1)', '20180101', '20181231', 'incomerate desc, hitrate desc');

select * from analyze_proc('39_1T_123456_goodall_20171231', 'turn', 'race.raceno', '20180101', '20181231', 'incomerate desc, hitrate desc');

select * from analyze_proc_odds('37_1T_2_entry_20171231', 'race.jyocd', '1', '20180101', '20181231', 2, 10);
 
select distinct substring(racerwiningrank from 1 for 2) racerrank12, count(*) cnt 
from final.race
group by racerrank12
order by cnt desc
;

--race.turn||''_''||race.raceno


select 
  description, bettype, 
  jyocd, 
  kumiban,
  betamt_total,
  hitamt_total,
  cast( (cast(hitcnt_total as float)/ cast(betcnt_total as float) *100) as numeric(7,2)) hitrate,
  cast( (cast(hitamt_total as float)/ cast(betamt_total as float) *100) as numeric(7,2)) incomerate,
  (hitamt_total - betamt_total) balance
from (
	select 
	  description,
	  bettype,
	  race.jyocd jyocd,
	  bet_kumiban kumiban, 
	  sum ( 1 ) betcnt_total,
	  sum ( hity ) hitcnt_total,
	  sum ( 100 ) betamt_total,
	  sum ( case hity when 1 then (result_odds * 100) else 0 end ) hitamt_total
	from stat_ml_result final. rec_race race
	where race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
	  and final.description = '33_1T_1_rank_20171231'
	group by description, bettype, race.jyocd, kumiban
	order by description, bettype, race.jyocd, kumiban
) tmp;

select count(*) from stat_ml_result;
select count(*) from rec_race 
where racetype like '%予選%'

copy (
  select distinct ymd dymd from rec_odds order by dymd desc
) to 'C:\tmp\tmp.csv' with csv header


select count(*) from stat_ml_multiresult

select count(*) from rec_odds;
select (distinct ymd) dymd from rec_racer where tansyopopular = 0 order by dymd



select max(ymd) from wrwaku_fame_rank3;

select ymd, jyocd, raceno, array_agg(entry)
from (
  select * from rec_racer order by ymd, jyocd, raceno, waku
) tmp
group by ymd, jyocd, raceno

select count(distinct (jyocd || racetype)) from rec_race;

select count(distinct nationwiningrank) from rec_race;

select min(nationwiningrate1), max(nationwiningrate1) from rec_race_waku2;

select count(distinct (
substring(nationwiningrate1::text from 1 for 1) || 
substring(nationwiningrate2::text from 1 for 1) || 
substring(nationwiningrate3::text from 1 for 1) || 
substring(nationwiningrate4::text from 1 for 1) 
substring(nationwiningrate5::text from 1 for 1) || 
substring(nationwiningrate6::text from 1 for 1) 
) ) from rec_race_waku2;

select
substring(nationwiningrate1::text from 1 for 1) || 
substring(nationwiningrate2::text from 1 for 1) || 
substring(nationwiningrate3::text from 1 for 1) || 
substring(nationwiningrate4::text from 1 for 1) || 
substring(nationwiningrate5::text from 1 for 1) || 
substring(nationwiningrate6::text from 1 for 1) 
from rec_race_waku2;

select nationwiningrate1::text || nationwiningrate2::text from rec_race_waku2;

select count(*) from rec_race_waku2;
copy (
  select * from stat_ml_multiresult
  where description = '70_2F_12oddsrank1-4else_multi'
) to 'C:\weka_training\tmp\export\stat_ml_multiresult.70_2F_12oddsrank1-4else_multi.csv' with csv header
;

select 
  kumiban, 
  (case 

copy (
select
  count(*)
from 
(
select 
  count(*)
from rec_race race, rec_race_waku waku, rec_race_waku2 waku2, rec_race_gap rgap, final.race_gap sgap, final.waku_win wakuwin, wrwaku_fame_rank3 rank3, final.race final.
where race.ymd >= '20120101' and race.ymd <= '20161231'
  and nirenhukuno not in ('特払','不成立','発売無')
  and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = rgap.ymd and race.jyocd = rgap.jyocd and race.raceno = rgap.raceno
  and race.ymd = wakuwin.ymd and race.jyocd = wakuwin.jyocd and race.raceno = wakuwin.raceno
  and race.ymd = sgap.ymd and race.jyocd = sgap.jyocd and race.raceno = sgap.raceno
  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
  and race.ymd = rank3.ymd and race.jyocd = rank3.jyocd and race.raceno = rank3.raceno
  and (nirenhukuno || nirenhukupopular) = '121'
) tmp
) to 'C:/weka_training/70-3_2F_12oddsrank1-4else.arff' with encoding 'UTF8' csv;

select count(*) from stmp_odds_comp;
-- オッズ比較テーブル生成
insert into stmp_odds_comp
select
  race.ymd, race.jyocd, race.raceno, '2F' bettype, b.kumiban kumiban, b.odds bodds, b.rank brank, a.odds aodds, a.rank arank,
  (b.rank - a.rank) rankchange,
  (b.odds - a.odds) oddschange
from rec_race race, rec_odds_before b, rec_odds_after a
where race.ymd >= '20120101'
  and race.ymd = b.ymd and race.jyocd = b.jyocd and race.raceno = b.raceno
  and race.ymd = a.ymd and race.jyocd = a.jyocd and race.raceno = a.raceno
  and a.bettype = b.bettype and a.kumiban = b.kumiban
  and a.bettype = '2F' and b.rank in (1,2,3,4)
order by ymd, jyocd, raceno, kumiban
;


select count(*) from stat_ml_result;

select distinct racetype from rec_race;

select nirenhukupopular, count(*) from rec_race order by nirenhukupopular;


select count(*) from rec_race race where race.ymd >= '20180101' and race.ymd <= '20181231';

update rec_race set racekey = 'random' where ymd >= '20180101' 

insert into stmp_rec_race
select 
  *, '66_2T_12rank1-else_train'
from rec_race race
where race.ymd >= '20100101' and race.ymd <= '20171231' and nirentanno <> '12'
  -- and nirentanpopular = 1 
  and racekey <> 'ml_test'
order by random() limit 27181
;

racetypeに'ml_test' -> MLテスト用データ　２万件設定しておく
select racekey into tmp_key
from rec_race where ymd >= '20100101' and ymd <= '20171231' order by random() limit 20000;

drop table tmp_key;
update rec_race set racekey = 'random' where racekey in (select racekey from tmp_key);
select racekey into tmp_key from rec_race where ymd >= '20110101' and ymd <= '20171231'
order by random() limit 50000;

update rec_race set racekey = ymd || jyocd || to_char(raceno, 'FM00');

select * into tmp_rec_race where

copy (
select * from ref_jyo_final.where bettype = '2F'
) to 'C:\weka_training\boatfinal.analysis\racetype_final.csv' with csv header;

update stmp_rec_race set description = '65_2F_12else_train' where description = '60_2F_12else_train';

select distinct substring(ymd from 1 for 4) yyyy, count(*) cnt from wrwaku_fame_rank3 group by yyyy order by yyyy;

truncate ref_jyo_final.

insert into ref_jyo_stat
select
  'racetype_final., 
  '1T' bettype, tmp1.jyocd, tmp1.tansyono, tmp1.racetype, 
  cnt2 betcnt, cnt1 hitcnt, prz2 betamt, prz1 hitamt,
  (cast(cnt1 as float) / cast(cnt2 as float) * 100) hitrate,
  (cast(prz1 as float) / cast(prz2 as float) * 100) incomerate,
  (prz1 - prz2) balance
from 
  (select 
    distinct racetype, jyocd, tansyono, count(*) cnt1, sum(tansyoprize) prz1
  from rec_race race
  where ymd >= '20100101' and ymd <= '20171231'
  group by jyocd, tansyono,  racetype ) tmp1,
  (select 
    distinct racetype, jyocd, count(*) cnt2, (count(*) * 100) prz2
  from rec_race race
  where ymd >= '20110101' and ymd <= '20171231'
  group by jyocd, racetype ) tmp2
where tmp1.jyocd = tmp2.jyocd and tmp1.racetype = tmp2.racetype
order by jyocd, bettype, balance desc, incomerate desc
;


truncate stmp_rec_race;

delete from stmp_rec_race where description = 'ml_test';

select count(*) from stmp_rec_race where description = '65_2T_12else_train';

insert into stmp_rec_race
select *, '60_2F_12else_train'
from rec_race
where ymd >= '20110101' and ymd <= '20171231' and nirenhukuno <> '12'
order by random() limit 73626
;

insert into stmp_rec_race
select *, '64-1_2F_12else_train'
from rec_race
where racekey not in (select racekey from stmp_rec_race where description = 'ml_test')
  and nirenhukuno = '12';

insert into stmp_rec_race 
select *, 'ml_test'
from rec_race race
order by random() limit 10000;

---------------------
select avg(cnt) from
(select ymd, count(*) cnt from rec_race group by ymd) tmp;

update rec_race set turn = '6' where turn = '0';

select * into tmp_rec_race from rec_race;

select count(*) from tmp_rec_race;

insert into rec_race
select 
  *, 
  ( case 
    when racetype = '予選' then '予選'
    when racetype in ('一般戦', '一般') then '一般'
    when racetype in ('準優勝戦', '準優勝') then '準優勝戦'
    when racetype = '優勝戦' then '優勝戦'
    when racetype in ('予選特選', '予選特賞') then '予選特'
    when racetype like '%選抜%' then '選抜'
    when racetype in ('特選', '特賞') then '特'
    else 'else' end ) racetype_simple, 
    ymd || jyocd || to_char(raceno, 'FM00') racekey
from tmp_rec_race;

select to_char(raceno, '00') from tmp_rec_race;

select max(ymd) from rec_race;
select max(ymd) from rec_race_waku2;
select max(ymd) from rec_race_gap;
select max(ymd) from final.waku_win;
select max(ymd) from final.race_gap;
select max(ymd) from wrwaku_fame_rank3;

delete from rec_race_waku2 where substring(ymd from 1 for 4) = '2019';


select distinct description from stmp_rec_race;

select hityn, count(*) cnt 
from stat_ml_result 
where description = '60-1_2F_12else_50000.SimpleLogistic'
group by hityn;

select count(*) from stat_ml_result where description = '60-1_2F_12else_50000.SimpleLogistic';

update stmp_rec_race set description = '62-1_3F_123-124else_50000' where description = '61-2_3F_123-124else_50000';

insert into stmp_rec_race
select *, '63-1_3T_123-132else_40000'
from rec_race 
where ymd >= '20100101' and ymd <= '20151231' and sanrentanno not in ('123','124','132')
order by random() limit 10119
;

select count(*) from zen_result_stat_ml;

------------
select count(*)
from stmp_rec_race 
where ymd >= '20100101' and ymd <= '20151231' and description = '63-1_3T_123-132else_40000'

select sanrentanno, count(*) cnt
from rec_race 
where ymd >= '20100101' and ymd <= '20151231' 
-- and sanrentanno in ( '123', '124', '125', '126'   )
group by sanrentanno order by cnt desc

select 
	( case nirentanno
	  when '12' then nirentanno || substring(nationwiningrank from 2 for 1)
	  when '13' then nirentanno || substring(nationwiningrank from 3 for 1)
	  when '14' then nirentanno || substring(nationwiningrank from 4 for 1)
--	  when '15' then nirentanno || substring(nationwiningrank from 5 for 1)
--	  when '23' then nirentanno || substring(nationwiningrank from 2 for 1)
--	  when '16' then nirentanno || substring(nationwiningrank from 6 for 1)
	  else nirentanno end ) ptn, 
  count(*) cnt,
  sum(nirentanprize) prize
from rec_race
group by ptn order by ptn




select 
	( case nirenhukuno
	  when '12' then nirenhukuno || substring(nationwiningrank from 2 for 1)
	  when '13' then nirenhukuno || substring(nationwiningrank from 3 for 1)
	  when '14' then nirenhukuno || substring(nationwiningrank from 4 for 1)
--	  when '15' then nirenhukuno || substring(nationwiningrank from 5 for 1)
--	  when '23' then nirenhukuno || substring(nationwiningrank from 2 for 1)
--	  when '16' then nirenhukuno || substring(nationwiningrank from 6 for 1)
	  else nirenhukuno end ) ptn, 
  count(*) cnt,
  sum(nirenhukuprize) prize
from rec_race
group by ptn order by ptn



select nirentanno, count(*) cnt, sum(nirentanprize) prize
from rec_race group by nirentanno order by cnt desc;

----------------------------------
20190114
select nirentanno, cnt(nirentanno) cnt, sum

オッズランク別に的中率・回収率を比較してみる
copy (
select 
  nirentanpopular, nirentanno, count(nirentanno) cnt, sum(nirentanprize) sum, min(nirentanprize) min , max(nirentanprize) max, avg(nirentanprize) avg, 
  percentile_disc(0.5) within group (order by nirentanprize) center, -- 中央値
  mode() within group (order by nirentanprize) mod, --最頻値
  percentile_disc(0.25) within group (order by nirentanprize) mod35, -- 2分位値
  percentile_disc(0.75) within group (order by nirentanprize) mod75, -- 3分位値
  stddev (nirentanprize) deviation, -- 標準偏差
  variance (nirentanprize) vari -- 分散標本
from rec_race race
where 
  race.ymd >= '20100101' and race.ymd <= '20181231'
group by nirentanpopular, nirentanno 
order by nirentanpopular, nirentanno
) to 'C:\weka_training\boatfinal.analysis\oddsrank_based_prize.csv' with csv header
;

----------------------------------
rec_odds_rank10, rec_fame_waku, rec_fame, final.deviation, ntile_deviation, ntile_fame_rank3は用途廃棄する

select * into delete_rec_odds_rank10 from rec_odds_rank10;
drop table delete_rec_odds_rank10;

select * into delete_rec_fame from rec_fame;
drop table rec_fame;

select * into delete_rec_fame_waku fromrec_fame_wakurec_fame;
drop table rec_fame_waku;

truncate rec_odds;
truncate rec_fame_rank3;
insert into rec_odds select * from rec_odds_after;
insert into rec_fame_rank3 select * from rec_fame_rank3_after;


copy (
select 
  after.jyocd, after.raceno, after.bettype, after.kumiban,
  after.odds a_odds, my.odds m_odds, bank.odds b_odds,
  after.rank a_rank, my.rank m_rank, bank.rank b_rank
from tmp_odds_after after, tmp_odds_before my, tmp_odds_bank bank
where after.ymd = my.ymd and after.jyocd = my.jyocd and after.raceno = my.raceno and after.bettype = my.bettype and after.kumiban = my.kumiban
  and after.ymd = bank.ymd and after.jyocd = bank.jyocd and after.raceno = bank.raceno and after.bettype = bank.bettype and after.kumiban = bank.kumiban
) to 'C:\weka_training\boatfinal.analysis\odds_difference.odds.csv' with csv header
;

copy (
select 
  after.jyocd, after.raceno, 
  after.win1_rank1_waku a_wr11, my.win1_rank1_waku m_wr11, bank.win1_rank1_waku b_wr11, 
  after.win1_rank2_waku a_wr12, my.win1_rank2_waku m_wr12, bank.win1_rank2_waku b_wr12, 
  after.win1_rank3_waku a_wr13, my.win1_rank3_waku m_wr13, bank.win1_rank3_waku b_wr13, 
  after.win2_rank1_waku a_wr21, my.win2_rank1_waku m_wr21, bank.win2_rank1_waku b_wr21, 
  after.win2_rank2_waku a_wr22, my.win2_rank2_waku m_wr22, bank.win2_rank2_waku b_wr22, 
  after.win2_rank3_waku a_wr23, my.win2_rank3_waku m_wr23, bank.win2_rank3_waku b_wr23, 
  after.win3_rank1_waku a_wr31, my.win3_rank1_waku m_wr31, bank.win3_rank1_waku b_wr31, 
  after.win3_rank2_waku a_wr32, my.win3_rank2_waku m_wr32, bank.win3_rank2_waku b_wr32, 
  after.win3_rank3_waku a_wr33, my.win3_rank3_waku m_wr33, bank.win3_rank3_waku b_wr33
from tmp_rank3_after after, tmp_rank3_before my, tmp_rank3_bank bank
where after.ymd = my.ymd and after.jyocd = my.jyocd and after.raceno = my.raceno
  and after.ymd = bank.ymd and after.jyocd = bank.jyocd and after.raceno = bank.raceno
) to 'C:\weka_training\boatfinal.analysis\odds_difference.fame.csv' with csv header
;


delete from rec_odds where ymd >= '20190110' and ymd <= '20190112';
delete from rec_fame_rank3 where ymd >= '20190110' and ymd <= '20190112';

select * into tmp_odds_before from rec_odds where ymd >= '20190110' and ymd <= '20190112';
select * into tmp_rank3_before from rec_fame_rank3 where ymd >= '20190110' and ymd <= '20190112';

select * into tmp_odds_bank from rec_odds where ymd >= '20190110' and ymd <= '20190112';
select * into tmp_rank3_bank from rec_fame_rank3 where ymd >= '20190110' and ymd <= '20190112';

select * into tmp_odds_after from rec_odds where ymd >= '20190110' and ymd <= '20190112';
select * into tmp_rank3_after from rec_fame_rank3 where ymd >= '20190110' and ymd <= '20190112';

insert into rec_fame_rank3_before select * from rec_fame_rank3_ori;
drop table rec_fame_rank3_ori;
insert into rec_fame_rank3_after select * from rec_fame_rank3;
truncate rec_fame_rank3;
insert into rec_fame_rank3 select * from rec_fame_rank3_before;

insert into rec_odds_after select * from rec_odds;
insert into rec_odds_before select * from rec_odds_ori;
drop table rec_odds_ori;
truncate rec_odds;
insert into rec_odds select * from rec_odds_before;

drop table tmp_odds_after;
drop table tmp_rank3_bank;


-- rec_raceにhomeyn1~6カラムを追加 20190112
drop table tmp_rec_race_waku;
select * into tmp_rec_race_waku from rec_race_waku;
truncate rec_race_waku;

-- rec_race_wakuにhomeyn1~6カラムを追加 20190112
select * into tmp_rec_race_waku from rec_race_waku;
insert into rec_race_waku select *, 'N','N','N','N','N','N' from tmp_rec_race_waku;
drop table tmp_rec_race_waku;
truncate rec_race_waku;


copy (
  select * from rec_odds
) to 'C:\weka_training\boatfinal.rec_odds.csv' with csv;

copy (
  select * from rec_fame_rank3
) to 'C:\weka_training\boatfinal.rec_fame_rank3.csv' with csv;

select * into rec_odds_ori from rec_odds;
select * into rec_fame_rank3_ori from rec_fame_rank3;



select jyocd, nirentanno, count(nirentanno) cnt, sum(nirentanprize) sum
from rec_race race
where race.ymd >= '20110101' and race.ymd <= '20151231'
group by jyocd, nirentanno
order by jyocd, sum desc
;

select * into final.waku_win_ori from final.waku_win;
select * into final.race_ori from final.race;


select
 nirenhukuno, count(*) cnt, sum(nirenhukuprize)
from rec_race_1414
group by nirenhukuno
order by cnt desc;

drop table rec_race_1414;
select race.*
into rec_race_1414
	from
	  rec_race race, final.race final. rec_race_waku waku, rec_race_waku2 waku2, final.race_gap gap,
	  wrwaku_fame_rank3 famerank
	where race.ymd >= '20100101' and race.ymd <= '20161231'
	  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
	  and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
	  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
	  and race.ymd = gap.ymd and race.jyocd = gap.jyocd and race.raceno = gap.raceno
	  and race.ymd = famerank.ymd and race.jyocd = famerank.jyocd and race.raceno = famerank.raceno
	  and famerank.wr11122122 = '1414'
	order by race.ymd, race.sime
;

select *
from ( 
	select 
	  wr11122122 wrwaku , count(nirenhukuno) cnt, sum(nirenhukuprize) prize
	from wrwaku_fame_rank3 rank3, rec_race race, final.waku_win final.
	where race.ymd = rank3.ymd and race.jyocd = rank3.jyocd and race.raceno = rank3.raceno
	  and race.ymd = final.ymd and race.jyocd = final.jyocd and race.raceno = final.raceno
	  and race.ymd >= '20100101' and race.ymd <= '20161231'
	group by wrwaku, nirenhukuno
	order by cnt desc
	)tmp
where cnt >= 400;

select execute_all_boatfinal.(
'20100101', '20161231', 7, '20170101', '20171231', 1, '2F', 'nirenhuku',  'wr11122122', 'win3_rank1_waku', 400,
0.1, 1, 0.85, 999, 1.1, 999, 'incomerate desc', 2, 'C:\weka_training\boatfinal.result\');

20181231
-------
select count(*) from stat_ml_result;
select distinct description from stat_ml_result;
copy (select * from stat_ml_result) to 'C:\weka_training\bak\stat_ml_result.20181231.csv' with csv;



20181227
-------
select generate_boatfinal.('20100101', '20161231', '2F', 'nirenhuku', 'wrwaku', 'substring(nationwiningrank from 1 for 2)', 50, 0.1, 1, 1.01, 9, 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\generate_boatfinal.\');
select generate_boatfinal.('20100101', '20161231', '2F', 'nirenhuku', 'wrwaku', 'race.jyocd', 50, 0.1, 1, 1.01, 9, 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\generate_boatfinal.\');
select generate_boatfinal.('20100101', '20161231', '2F', 'nirenhuku', 'wrwaku', 'race.raceno', 50, 0.1, 1, 1.01, 9, 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\generate_boatfinal.\');
select generate_boatfinal.('20100101', '20161231', '2F', 'nirenhuku', 'wrwaku', 'race.jyocd', 50, 0.1, 1, 0.9, 1, 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\generate_boatfinal.\');

select generate_boatfinal.('20100101', '20161231', '2F', 'nirenhuku', 'wrwaku', 'wrwaku', 200, 0.1, 1, 1.01, 9, 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\generate_boatfinal.\');

select * from stat_ml_result where description = 'final.001';

select * from stat_ml_result where description = 'final.001' order by ymd;


select distinct substring(ymd from 1 for 4) from rec_race_gap;


20181222
-------
--wrwaku111221ー２連複組番ー支持率(11,12,21)の分布
select 
  wrwaku, nirenhukuno, count(*) cnt,
  cast(avg(win1_rank1_famerate)  as numeric(5,2)) avg_win1_rank1_famerate, 
  cast(mode() within group (order by win1_rank1_famerate) as numeric(5,2)) mode_win1_rank1_famerate, 
  cast(avg(win1_rank2_famerate) as numeric(5,2)) avg_win1_rank2_famerate, 
  cast(mode() within group (order by win1_rank2_famerate) as numeric(5,2)) mode_win1_rank2_famerate, 
  cast(avg(win2_rank1_famerate) as numeric(5,2)) avg_win2_rank1_famerate, 
  cast(mode() within group (order by win2_rank1_famerate) as numeric(5,2)) mode_win2_rank1_famerate, 
  cast(avg(race.nirenhukuprize) as int) avgprize
from wrwaku_fame_rank3 rank3, rec_race race 
where race.ymd = rank3.ymd and race.jyocd = rank3.jyocd and race.raceno = rank3.raceno
  -- and rank3.wrwaku in ('141','414')
group by wrwaku, nirenhukuno order by wrwaku, nirenhukuno, cnt desc;

最終オッズと結果オッズの差はどれぐらい？
select nirenhukuprize, (odds.odds * 100) odds
from rec_race race, rec_odds odds
where substring(race.ymd from 1 for 4) = '2017'
and race.ymd = odds.ymd and race.jyocd = odds.jyocd and race.raceno = odds.raceno
and odds.bettype = '2F' and odds.kumiban = nirenhukuno
order by race.ymd, race.jyocd, race.raceno;


20181218
-------
select 
  (win1_rank1_waku || win1_rank2_waku || win2_rank1_waku) wrwaku, nirenhukuno, count(*) cnt
from rec_fame_rank3 rank3, rec_race race 
where race.ymd >= '20120101' -- because of final.waku_win it start from here
  and race.ymd = rank3.ymd and race.jyocd = rank3.jyocd and race.raceno = rank3.raceno
  and (win1_rank1_waku || win1_rank2_waku || win2_rank1_waku) in ('141','414')
group by wrwaku, nirenhukuno order by cnt desc;


select 
  (win1_rank1_waku || win1_rank2_waku || win2_rank1_waku) wrwaku, count(*) cnt
from rec_fame_rank3 
where ymd >= '20120101' -- because of final.waku_win it start from here
group by wrwaku order by cnt desc;

select distinct description from stat_ml_result;

select kumiban, count(*) cnt
from rec_race race, stat_ml_result ml
where 
  race.ymd >= '20160101' and race.ymd <= '20171231'
  and race.ymd = ml.ymd and race.jyocd = ml.jyocd and race.raceno = ml.raceno
  and race.tansyono = ml.kumiban
  and race.tansyoprize > 100
group by kumiban
order by kumiban
;

select kumiban, count(*) cnt
from rec_race race, stat_ml_result ml
where 
  race.ymd >= '20160101' and race.ymd <= '20171231'
  and race.ymd = ml.ymd and race.jyocd = ml.jyocd and race.raceno = ml.raceno
  and race.tansyoprize > 250 and race.tansyoprize <550
group by kumiban
order by kumiban
;



select substring(ymd from 1 for 4) y, count(*) from rec_racer 
group by y;

insert into final.deviation
select ymd, jyocd, raceno, 
  stddev_pop(devi_famewin1) devi_famewin1,
  stddev_pop(devi_famewin2) devi_famewin2,
  stddev_pop(devi_famewin3) devi_famewin3,
  stddev_pop(devi_famerank1) devi_famerank1,
  stddev_pop(devi_famerank2) devi_famerank2,
  stddev_pop(devi_famerank3) devi_famerank3,
  stddev_pop(devi_winingrate_12) devi_winingrate_12,
  stddev_pop(devi_winingrate_23) devi_winingrate_23,
  stddev_pop(devi_winingrate_14) devi_winingrate_14,
  stddev_pop(devi_winingrate_123) devi_winingrate_123,
  stddev_pop(devi_winingrate_123456) devi_winingrate_123456
from 
  (
  select waku2.ymd, waku2.jyocd, waku2.raceno,
    unnest(array[win1_rank1_famerate, win1_rank2_famerate, win1_rank3_famerate]) as devi_famewin1, 
    unnest(array[win2_rank1_famerate, win2_rank2_famerate, win2_rank3_famerate]) as devi_famewin2, 
    unnest(array[win3_rank1_famerate, win3_rank2_famerate, win3_rank3_famerate]) as devi_famewin3, 
    unnest(array[win1_rank1_famerate, win2_rank1_famerate, win3_rank1_famerate]) as devi_famerank1, 
    unnest(array[win1_rank2_famerate, win2_rank2_famerate, win3_rank2_famerate]) as devi_famerank2, 
    unnest(array[win1_rank3_famerate, win2_rank3_famerate, win3_rank3_famerate]) as devi_famerank3, 
    unnest(array[nationwiningrate1, nationwiningrate2]) as devi_winingrate_12, 
    unnest(array[nationwiningrate2, nationwiningrate3]) as devi_winingrate_23, 
    unnest(array[nationwiningrate1, nationwiningrate4]) as devi_winingrate_14, 
    unnest(array[nationwiningrate1, nationwiningrate2, nationwiningrate3]) as devi_winingrate_123,
    unnest(array[nationwiningrate1, nationwiningrate2, nationwiningrate3, nationwiningrate4, nationwiningrate5, nationwiningrate6]) as devi_winingrate_123456
  from rec_race_waku2 waku2, rec_fame_rank3 rank3 
  where waku2.ymd = rank3.ymd and waku2.jyocd = rank3.jyocd and waku2.raceno = rank3.raceno
  ) tmp
group by ymd, jyocd, raceno
order by ymd, jyocd, raceno
;


delete from rec_waku_recent;
delete from final.waku_recent;
delete from final.waku_win;
delete from final.race;


select count(*) cnt from rec_racer where jyocd = '1' and entry = 

select avg(alevelcount) from rec_race where racetype in ('優勝戦'); 5.2646003262642741
select avg(alevelcount) from rec_race where racetype in ('準優勝戦', '準優勝'); 4.454804535035004
select avg(alevelcount) from rec_race where racetype in ('予選'); 2.4153585318556556
select avg(alevelcount) from rec_race where racetype in ('一般戦', '一般'); 2.1493885036820781
select avg(alevelcount) from rec_race where racetype in ('予選特選', '予選特賞'); 4.0436848140665101
select avg(alevelcount) from rec_race where racetype like '選抜'; 3.5982658959537572
select avg(alevelcount) from rec_race where racetype in ('特選', '特賞'); 4.2361232885951305

select substring(ymd from 1 for 4) yyyy, count(*) from rec_race group by yyyy;
select avg(cnt) from 
(select entry, count(*) cnt from rec_racer where ymd >= '20160101' and ymd <= '20161231' group by entry
) tmp;


select nirenhukuno, count(nirenhukuno) from rec_race group by nirenhukuno;


update rec_race set isVenus = 'N' where isVenus = '';
update rec_race set timezone = 'Z' where timezone = '';

update rec_race set racetype_simple = 
	( case 
	  when racetype = '予選' then '予選'
	  when racetype in ('一般戦', '一般') then '一般'
	  when racetype in ('準優勝戦', '準優勝') then '準優勝戦'
	  when racetype = '優勝戦' then '優勝戦'
	  when racetype in ('予選特選', '予選特賞') then '予選特'
	  when racetype like '%選抜%' then '選抜'
	  when racetype in ('特選', '特賞') then '特'
	  else 'else' end ) 
where ymd >= '20190101';



select 
	( case 
	  when racetype = '予選' then '予選'
	  when racetype in ('一般戦', '一般') then '一般'
	  when racetype in ('準優勝戦', '準優勝') then '準優勝戦'
	  when racetype = '優勝戦' then '優勝戦'
	  when racetype in ('予選特選', '予選特賞') then '予選特'
	  when racetype like '%選抜%' then '選抜'
	  when racetype in ('特選', '特賞') then '特'
	  else 'else' end ) type1, 
	  count(*) cnt
from rec_race
group by type1 order by cnt desc, type1;

select distinct racetype, count(*) cnt  from rec_race group by racetype order by cnt desc, racetype;

copy (
select *, ( case nirenhukuno when '12' then '12' else 'not12' end ) winner
from 
(
select 
  race.*, waku.*, waku2.*, odds.*, oddsrank.*, famewaku.*, famerank.*
from rec_race race, rec_race_waku waku, rec_race_waku2 waku2, rec_odds odds, rec_odds_rank10 oddsrank, rec_fame_waku famewaku, rec_fame_rank3 famerank
where race.ymd >= '20120101' and race.ymd <= '20161231'
  and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = odds.ymd and race.jyocd = odds.jyocd and race.raceno = odds.raceno and odds.bettype = '2F' and odds.kumiban = '12'
  and race.ymd = oddsrank.ymd and race.jyocd = oddsrank.jyocd and race.raceno = oddsrank.raceno and oddsrank.bettype = '2F'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and race.ymd = famerank.ymd and race.jyocd = famerank.jyocd and race.raceno = famerank.raceno
  and (
    odds.odds >= 5 and odds.odds <= 6.5
  )
) tmp
) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\tmp.csv' with csv;

copy (

select 
  0, race.*, waku.*, waku2.*, odds.*, oddsrank.*, famewaku.*, famerank.*
from rec_race race, rec_race_waku waku, rec_race_waku2 waku2, rec_odds odds, rec_odds_rank10 oddsrank, rec_fame_waku famewaku, rec_fame_rank3 famerank
where race.ymd >= '20120101' and race.ymd <= '20161231'
  and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd = odds.ymd and race.jyocd = odds.jyocd and race.raceno = odds.raceno and odds.bettype = '2F' and odds.kumiban = '12'
  and race.ymd = oddsrank.ymd and race.jyocd = oddsrank.jyocd and race.raceno = oddsrank.raceno and oddsrank.bettype = '2F'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and race.ymd = famerank.ymd and race.jyocd = famerank.jyocd and race.raceno = famerank.raceno
  and (
    odds.odds >= 5 and odds.odds <= 6.5
  )
order by random() limit 10000
) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\rec_all_12_10000.csv' with csv;

;
group by nirenhukuno order by nirenhukuno;



select nirenhukuno, count(nirenhukuno), min(nirenhukuprize) min , max(nirenhukuprize) max, avg(nirenhukuprize) avg, 
percentile_disc(0.5) within group (order by nirenhukuprize) center, -- 中央値
mode() within group (order by nirenhukuprize) mod, --最頻値
percentile_disc(0.25) within group (order by nirenhukuprize) mod35, -- 2分位値
percentile_disc(0.75) within group (order by nirenhukuprize) mod75, -- 3分位値
stddev (nirenhukuprize) deviation, -- 標準偏差
variance (nirenhukuprize) vari -- 分散標本
from rec_race race
where race.ymd >= '20120101' and race.ymd <= '20161231'
group by nirenhukuno order by nirenhukuno;


select nirenhukuno, count(nirenhukuno), avg(nirenhukuprize)

select 
  betamount, income, balance, 
  cast( (cast(hitcnt as float)/ cast(betcnt as float) *100) as numeric(5,2)) hitrate,
  cast( (cast(income as float)/ cast(betamount as float) *100) as numeric(5,2)) incomerate,
  (betcnt / 365) dayilbet 
from (
select 
  sum ( case nirenhukuno when '12' then 100 else 100 end ) betamount,
  sum ( case nirenhukuno when '12' then nirenhukuprize else 0 end ) income,
  sum ( case nirenhukuno when '12' then 1 else 1 end ) betcnt,
  sum ( case nirenhukuno when '12' then 1 else 0 end ) hitcnt,
  sum ( case nirenhukuno when '12' then nirenhukuprize - 100 else -100 end ) balance
from rec_race race
  , rec_fame_rank3 famerank
where race.ymd >= '20170101' and race.ymd <= '20171231'
  and race.ymd = famerank.ymd and race.jyocd = famerank.jyocd and race.raceno = famerank.raceno
  and race.ymd = odds.ymd and race.jyocd = odds.jyocd and race.raceno = odds.raceno and odds.bettype = '2F' and odds.kumiban = race.nirenhukuno
--  and ( 
--      (win1_rank1_waku = '1' and win2_rank1_waku = '1') 
--     or (win1_rank1_waku = '2' and win2_rank1_waku = '2')
--  )
  and ( 
      (substring(nationwiningrank from 1 for 1) in ('1', '2')) 
    and (substring(nationwiningrank from 2 for 1) not in ('3','4','5','6'))
  )
) tmp;


copy (
select race.*
from rec_race race, rec_race_waku waku, rec_odds_rank10 oddsrank, rec_fame_waku famewaku, rec_fame_rank3 famerank
where race.ymd <= '20161231'
  and race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
  and race.ymd = oddsrank.ymd and race.jyocd = oddsrank.jyocd and race.raceno = oddsrank.raceno and oddsrank.bettype = '2F'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and race.ymd = famerank.ymd and race.jyocd = famerank.jyocd and race.raceno = famerank.raceno
  
  and ( 
      (substring(nationwiningrank from 1 for 1) in ('1', '2')) 
    and (substring(nationwiningrank from 2 for 1) not in ('3','4','5','6'))
  )
  
--group by nirenhukuno order by nirenhukuno;
order by race.ymd, race.sime
) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\rec_race_result.csv' with csv;

-- 5 or 6が含まれる2Fのレース
select * into rec_race_56 from rec_race where ymd <= '20161231' 
and (nirenhukuno like '%5' or nirenhukuno like '%6' or nirenhukuno like '56') ;

copy (select * from rec_race_12) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\rec_race_12.csv' with csv;
copy (select * from rec_race_13) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\rec_race_13.csv' with csv;
copy (select * from rec_race_56) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.results\20181104_test\rec_race_56.csv' with csv;



select * into rec_race_13 from rec_race where ymd <= '20161231' and nirenhukuno = '13';

select race.nirenhukuno, count(race.nirenhukuno), sum(nirenhukuprize) from rec_race 
where ymd <= '20161231' 
group by nirenhukuno order by nirenhukuno;

delete from rec_race;
delete from rec_racer;
delete from rec_race_waku;
delete from rec_race_waku2;

delete from rec_odds;
delete from rec_odds_rank10;
delete from rec_fame;
delete from rec_fame_waku;
delete from rec_fame_rank3;

drop table all_rec_race;
drop table all_rec_racer;
drop table all_rec_race_waku;
drop table all_rec_race_waku2;
drop table all_rec_odds;
drop table all_rec_odds_rank10;
drop table all_rec_fame;
drop table all_rec_fame_waku;
drop table all_rec_fame_rank3;


select distinct ymd from 
(
select ymd, (ymd || jyocd || raceno) keyfield, count((ymd || jyocd || raceno)) cnt 
from rec_fame_rank3
group by ymd, keyfield order by cnt desc, keyfield
) tmp
where tmp.cnt > 1
order by ymd
;



select race.nirenhukuno, count(race.nirenhukuno), sum(nirenhukuprize) 
from rec_fame_rank3 rank3, rec_race race, rec_race_waku 
where rank3.ymd >= '20120101' and rank3.ymd <= '20161231'
  and race.ymd = rank3.ymd and race.jyocd = rank3.jyocd and race.raceno = rank3.raceno
  and (
        (win1_rank1_waku = '1' and win2_rank1_waku = '2') or
        (win1_rank1_waku = '2' and win2_rank1_waku = '1') 
      )
group by race.nirenhukuno
;

select race.nirenhukuno, count(race.nirenhukuno), sum(nirenhukuprize)from rec_fame_waku famewaku, rec_race race 
where famewaku.ymd >= '20100101' and famewaku.ymd <= '20161231'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and (waku1_famerate - waku2_famerate) > 10 and (waku1_famerate - waku2_famerate) < 20 
group by race.nirenhukuno
;
-- 
select race.tansyono, sum(tansyoprize), count(race.tansyono) from rec_fame_waku famewaku, rec_race race 
where famewaku.ymd >= '20100101' and famewaku.ymd <= '20161231'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and waku1_famerate >= 99
group by race.tansyono


select count(*) from rec_fame_waku famewaku, rec_race race 
where famewaku.ymd >= '20100101' and famewaku.ymd <= '20161231'
  and race.ymd = famewaku.ymd and race.jyocd = famewaku.jyocd and race.raceno = famewaku.raceno
  and waku1_famerate >= 95 
  -- and race.tansyono = '1'



4. 着順別支持率90%以上のレース数
select count(*) from rec_fame_waku famewaku 
where famewaku.ymd >= '20100101' and famewaku.ymd <= '20161231'
  and waku1_famerate >= 91.51;

4. 着順別支持率90%
select win, 
percentile_disc(0.90) within group (order by famerate) median90 -- 3分位値
from rec_fame fame
where fame.ymd >= '20100101' and fame.ymd <= '20161231'
group by win order by win;

3. 着順別支持率分布
select win, min(famerate) min , max(famerate) max, avg(famerate) avg, 
percentile_disc(0.5) within group (order by famerate) median50, -- 中央値
mode() within group (order by famerate) modeval, --最頻値
percentile_disc(0.25) within group (order by famerate) median25, -- 2分位値
percentile_disc(0.75) within group (order by famerate) median75 -- 3分位値
from rec_fame fame
where fame.ymd >= '20100101' and fame.ymd <= '20161231'
group by win order by win;

2. 支持率分布
select min(famerate) min , max(famerate) max, avg(famerate) avg, 
percentile_disc(0.5) within group (order by famerate) median50, -- 中央値
mode() within group (order by famerate) modeval, --最頻値
percentile_disc(0.25) within group (order by famerate) median25, -- 2分位値
percentile_disc(0.75) within group (order by famerate) median75 -- 3分位値
from rec_fame fame
where fame.ymd >= '20100101' and fame.ymd <= '20161231';


from rec_fame fame;

select 
from rec_race race, rec_fame fame
where race.ymd >= '20100101' and race.ymd <= '20161231'
 and race.ymd = fame.ymd and race.jyocd = fame.jyocd and race.raceno = fame.raceno

 

1.ALLはバックアップだけして削除する。実戦では一般だけアップロードする
-- 全件を～allテーブルにコピー
select * into all_rec_race from rec_race;
select tbl2.* into all_rec_racer from rec_racer tbl2;
select tbl2.* into all_rec_race_waku from rec_race_waku tbl2;
select tbl2.* into all_rec_race_waku2 from rec_race_waku2 tbl2;
select tbl2.* into all_rec_odds from rec_odds tbl2;
select tbl2.* into all_rec_odds_rank10 from rec_odds_rank10 tbl2;
select tbl2.* into all_rec_fame from rec_fame tbl2;
select tbl2.* into all_rec_fame_waku from rec_fame_waku tbl2;
select tbl2.* into all_rec_fame_rank3 from rec_fame_rank3 tbl2;

-- SG級のデータを削除
delete from rec_fame_rank3 where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_fame_waku where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_fame where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_odds_rank10 where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_odds where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_race_waku2 where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_race_waku where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_racer where (ymd || jyocd || raceno) in (select (ymd || jyocd || raceno) from rec_race race where race.grade in ('SG', 'G1', 'G2'));
delete from rec_race where grade in ('SG', 'G1', 'G2');


-- データCSVバックアップ
copy (select * from rec_odds_before) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_odds_before.csv' with csv;
copy (select * from rec_odds_after) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_odds_after.csv' with csv;
copy (select * from rec_race) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_race.csv' with csv;
copy (select * from rec_racer) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_racer.csv' with csv;
copy (select * from rec_race_waku) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_race_waku.csv' with csv;
copy (select * from rec_race_waku2) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_race_waku2.csv' with csv;
copy (select * from rec_odds) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_odds.csv' with csv;
copy (select * from rec_odds_rank10) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_odds_rank10.csv' with csv;
copy (select * from rec_fame) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_fame.csv' with csv;
copy (select * from rec_fame_waku) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_fame_waku.csv' with csv;
copy (select * from rec_fame_rank3) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_fame_rank3.csv' with csv;
copy (select * from rec_racer_arr) to 'C:\Dev\workspace\Oxygen\pod_boatrace\src\final.stics\boatfinal.rec_racer_arr.csv' with csv;

insert into rec_race_sg select * from rec_race where grade in ('SG', 'G1', 'G2');

select * from rec_race

select * into rec_race_all from rec_race where grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_racer_all from rec_racer tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_race_waku_all from rec_race_waku tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_odds_all from rec_odds tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_odds_rank10_all from rec_odds_rank10 tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_fame_all from rec_fame tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_fame_waku_all from rec_fame_waku tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');
select tbl2.* into rec_fame_rank3_all from rec_fame_rank3 tbl2, rec_race race
 where race.ymd = tbl2.ymd and race.jyocd = tbl2.jyocd and race.raceno = tbl2.raceno and race.grade in ('SG', 'G1', 'G2');


-------------- 20190101~20190221 データ生成 end
-------------- 20190221~20190304 データ生成 end
select max(ymd) from rec_race;
select max(ymd) from rec_race_waku;
select max(ymd) from rec_race_waku2;
select max(ymd) from rec_racer;
select max(ymd) from rec_racer_arr;

update rec_race set racetype = 
	( case 
	  when racetype = '予選' then '1'
	  when racetype in ('予選特選', '予選特賞') then '2'
	  when racetype in ('一般戦', '一般') then '3'
	  when racetype like '%選抜%' then '4'
	  when racetype in ('特選', '特賞') then '5'
	  when racetype in ('準優勝戦', '準優勝') then '6'
	  when racetype = '優勝戦' then '7'
	  else 'else' end )
where ymd >= '20210923' and ymd <= '20211130';

#실행불필요
insert into rec_race_metric
select 
  ymd, jyocd, raceno,
  (select sum(case lvl when 'A1' then 1 else 0 end) from unnest(level) as dt(lvl)) as a1count,
  (select sum(case lvl when 'A2' then 1 else 0 end) from unnest(level) as dt(lvl)) as a2count ,
  (select sum(case lvl when 'B1' then 1 else 0 end) from unnest(level) as dt(lvl)) as b1count ,
  (select sum(case lvl when 'B2' then 1 else 0 end) from unnest(level) as dt(lvl)) as b2count
from rec_racer_arr
where ymd >= '20200810' and ymd <= '20201228';


insert into rec_racer_arr
select 
  ymd, jyocd, raceno, 
  array_agg(entry),
  array_agg(sex),
  array_agg(age),
  array_agg(level),
  array_agg(weight),
  array_agg(branch),
  array_agg(exhibit),
  array_agg(startexhibit),
  array_agg(flying),
  array_agg(late),
  array_agg(averagestart),
  array_agg(avgtime),
  array_agg(nationwiningrate),
  array_agg(nation2winingrate),
  array_agg(nation3winingrate),
  array_agg(localwiningrate),
  array_agg(local2winingrate),
  array_agg(local3winingrate),
  array_agg(motorno),
  array_agg(motor2winingrate),
  array_agg(motor3winingrate),
  array_agg(waku),
  array_agg(rank),
  array_agg(startresult)
from (
  select * from rec_racer 
   where ymd >= '20210923' and ymd <= '20211130' 
   order by ymd, jyocd, raceno, waku 
) tmp
group by ymd, jyocd, raceno
;

#실행 불필요 202012230
truncate wrwaku_fame_rank3;
insert into wrwaku_fame_rank3
select ymd, jyocd, raceno,
win1_rank1_waku,
win1_rank1_famerate,
win1_rank2_waku,
win1_rank2_famerate,
win1_rank3_waku,
win1_rank3_famerate,
win2_rank1_waku,
win2_rank1_famerate,
win2_rank2_waku,
win2_rank2_famerate,
win2_rank3_waku,
win2_rank3_famerate,
win3_rank1_waku,
win3_rank1_famerate,
win3_rank2_waku,
win3_rank2_famerate,
win3_rank3_waku,
win3_rank3_famerate,
(win1_rank1_waku || win1_rank2_waku) wr1112,
(win1_rank1_waku || win2_rank1_waku) wr1121,
(win1_rank1_waku || win1_rank2_waku || win2_rank1_waku) wr111221,
(win1_rank1_waku || win2_rank1_waku || win1_rank2_waku) wr112112,
(win1_rank1_waku || win1_rank2_waku || win2_rank1_waku || win2_rank2_waku) wr11122122,
(win1_rank1_waku || win2_rank1_waku || win1_rank2_waku || win2_rank2_waku) wr11211222
from rec_fame_rank3;

#실행 불필요 202012230
insert into stat_race_gap 
select 
  race.ymd, race.jyocd, race.raceno, 
  racerruncount1 - racerruncount2,
  racerruncount1 - racerruncount3,
  racerruncount1 - racerruncount4,
  racerruncount2 - racerruncount3,
  racerruncount2 - racerruncount4,
  racerruncount3 - racerruncount4,
  racerwiningrate1 - racerwiningrate2,
  racerwiningrate1 - racerwiningrate3,
  racerwiningrate1 - racerwiningrate4,
  racerwiningrate2 - racerwiningrate3,
  racerwiningrate2 - racerwiningrate4,
  racerwiningrate3 - racerwiningrate4,
  racer2winingrate1 - racer2winingrate2,
  racer2winingrate1 - racer2winingrate3,
  racer2winingrate1 - racer2winingrate4,
  racer2winingrate2 - racer2winingrate3,
  racer2winingrate2 - racer2winingrate4,
  racer2winingrate3 - racer2winingrate4,
  motorwiningrate1 - motorwiningrate2,
  motorwiningrate1 - motorwiningrate3,
  motorwiningrate1 - motorwiningrate4,
  motorwiningrate2 - motorwiningrate3,
  motorwiningrate2 - motorwiningrate4,
  motorwiningrate3 - motorwiningrate4,
  motor2winingrate1 - motor2winingrate2,
  motor2winingrate1 - motor2winingrate3,
  motor2winingrate1 - motor2winingrate4,
  motor2winingrate2 - motor2winingrate3,
  motor2winingrate2 - motor2winingrate4,
  motor2winingrate3 - motor2winingrate4
from rec_race race, stat_waku_win statwaku
where 
  race.ymd = statwaku.ymd and race.jyocd = statwaku.jyocd and race.raceno = statwaku.raceno
  and race.ymd >= '20191130' and race.ymd <= '20200618';
;

#실행 불필요 202012230
insert into rec_race_gap 
select 
  race.ymd, race.jyocd, race.raceno, 
  nationwiningrate1 - nationwiningrate2,
  nationwiningrate1 - nationwiningrate3,
  nationwiningrate1 - nationwiningrate4,
  nationwiningrate2 - nationwiningrate3,
  nationwiningrate2 - nationwiningrate4,
  nationwiningrate3 - nationwiningrate4,
  localwiningrate1 - localwiningrate2,
  localwiningrate1 - localwiningrate3,
  localwiningrate1 - localwiningrate4,
  localwiningrate2 - localwiningrate3,
  localwiningrate2 - localwiningrate4,
  localwiningrate3 - localwiningrate4,
  waku2.motor2winingrate1 - waku2.motor2winingrate2,
  waku2.motor2winingrate1 - waku2.motor2winingrate3,
  waku2.motor2winingrate1 - waku2.motor2winingrate4,
  waku2.motor2winingrate2 - waku2.motor2winingrate3,
  waku2.motor2winingrate2 - waku2.motor2winingrate4,
  waku2.motor2winingrate3 - waku2.motor2winingrate4,
  avgst1 - avgst2,
  avgst1 - avgst3,
  avgst1 - avgst4,
  avgst2 - avgst3,
  avgst2 - avgst4,
  avgst3 - avgst4,
  avgtime1 - avgtime2,
  avgtime1 - avgtime3,
  avgtime1 - avgtime4,
  avgtime2 - avgtime3,
  avgtime2 - avgtime4,
  avgtime3 - avgtime4
from rec_race race, rec_race_waku waku, rec_race_waku2 waku2
where 
  race.ymd = waku.ymd and race.jyocd = waku.jyocd and race.raceno = waku.raceno
  and race.ymd = waku2.ymd and race.jyocd = waku2.jyocd and race.raceno = waku2.raceno
  and race.ymd >= '20191130';
;

java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*; ^
  com.pengkong.boatrace.scraping.BoatWebDownloader 20210831 20211224

java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*;. ^
  com.pengkong.boatrace.util.RaceFileUploader 20210923 20211130 C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/race_result_rebuild.properties

#java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*;. ^
#  com.pengkong.boatrace.util.OddsBeforeFileUploader 20200619 20200809 C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/race_result_rebuild.properties

#java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*;. ^
#  com.pengkong.boatrace.util.OddsTrendUploader 20200619 20200809 C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/race_result_rebuild.properties

#java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*;. ^
#  com.pengkong.boatrace.util.OddsBeforeTrendUploader 20200619 20200809 C:/Dev/workspace/Oxygen/pod_boatrace_test/properties/race_result_rebuild.properties

#java -cp C:/Dev/workspace/Oxygen/pod_boatrace/target/classes;C:/Dev/workspace/Oxygen/pod_boatrace_test/lib/*;. ^
#  com.pengkong.boatrace.util.StatGenerator 20180101 20200810 20201228

-------------- 20190323~20190419 データ生成 start
-------------- 20190101~20190221 データ生成 start
